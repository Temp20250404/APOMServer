// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playernickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerjob_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.posz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR CS_FIND_ID_REQUEST::CS_FIND_ID_REQUEST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_FIND_ID_REQUESTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_FIND_ID_REQUESTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_FIND_ID_REQUESTDefaultTypeInternal() {}
  union {
    CS_FIND_ID_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_FIND_ID_REQUESTDefaultTypeInternal _CS_FIND_ID_REQUEST_default_instance_;
PROTOBUF_CONSTEXPR CS_FIND_PW_REQUEST::CS_FIND_PW_REQUEST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_FIND_PW_REQUESTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_FIND_PW_REQUESTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_FIND_PW_REQUESTDefaultTypeInternal() {}
  union {
    CS_FIND_PW_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_FIND_PW_REQUESTDefaultTypeInternal _CS_FIND_PW_REQUEST_default_instance_;
PROTOBUF_CONSTEXPR CS_LOGIN_REQUEST::CS_LOGIN_REQUEST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_LOGIN_REQUESTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_LOGIN_REQUESTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_LOGIN_REQUESTDefaultTypeInternal() {}
  union {
    CS_LOGIN_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_LOGIN_REQUESTDefaultTypeInternal _CS_LOGIN_REQUEST_default_instance_;
PROTOBUF_CONSTEXPR CS_REQUEST_CHARACTER_INFO::CS_REQUEST_CHARACTER_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_REQUEST_CHARACTER_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_REQUEST_CHARACTER_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_REQUEST_CHARACTER_INFODefaultTypeInternal() {}
  union {
    CS_REQUEST_CHARACTER_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_REQUEST_CHARACTER_INFODefaultTypeInternal _CS_REQUEST_CHARACTER_INFO_default_instance_;
PROTOBUF_CONSTEXPR CS_REQUEST_ITEM_INFO::CS_REQUEST_ITEM_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_REQUEST_ITEM_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_REQUEST_ITEM_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_REQUEST_ITEM_INFODefaultTypeInternal() {}
  union {
    CS_REQUEST_ITEM_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_REQUEST_ITEM_INFODefaultTypeInternal _CS_REQUEST_ITEM_INFO_default_instance_;
PROTOBUF_CONSTEXPR CS_SIGNUP_REQUEST::CS_SIGNUP_REQUEST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_SIGNUP_REQUESTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_SIGNUP_REQUESTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_SIGNUP_REQUESTDefaultTypeInternal() {}
  union {
    CS_SIGNUP_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_SIGNUP_REQUESTDefaultTypeInternal _CS_SIGNUP_REQUEST_default_instance_;
PROTOBUF_CONSTEXPR SC_FIND_ID_RESPONSE::SC_FIND_ID_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_FIND_ID_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_FIND_ID_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_FIND_ID_RESPONSEDefaultTypeInternal() {}
  union {
    SC_FIND_ID_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_FIND_ID_RESPONSEDefaultTypeInternal _SC_FIND_ID_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR SC_FIND_PW_RESPONSE::SC_FIND_PW_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_FIND_PW_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_FIND_PW_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_FIND_PW_RESPONSEDefaultTypeInternal() {}
  union {
    SC_FIND_PW_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_FIND_PW_RESPONSEDefaultTypeInternal _SC_FIND_PW_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR SC_LOGIN_RESPONSE::SC_LOGIN_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.errorcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_LOGIN_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_LOGIN_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_LOGIN_RESPONSEDefaultTypeInternal() {}
  union {
    SC_LOGIN_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_LOGIN_RESPONSEDefaultTypeInternal _SC_LOGIN_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR SC_REQUEST_ITEM_INFO::SC_REQUEST_ITEM_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iteminfo_)*/{}
  , /*decltype(_impl_._iteminfo_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_REQUEST_ITEM_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_REQUEST_ITEM_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_REQUEST_ITEM_INFODefaultTypeInternal() {}
  union {
    SC_REQUEST_ITEM_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_REQUEST_ITEM_INFODefaultTypeInternal _SC_REQUEST_ITEM_INFO_default_instance_;
PROTOBUF_CONSTEXPR SC_RESPONSE_CHARACTER_INFO::SC_RESPONSE_CHARACTER_INFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_RESPONSE_CHARACTER_INFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_RESPONSE_CHARACTER_INFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_RESPONSE_CHARACTER_INFODefaultTypeInternal() {}
  union {
    SC_RESPONSE_CHARACTER_INFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_RESPONSE_CHARACTER_INFODefaultTypeInternal _SC_RESPONSE_CHARACTER_INFO_default_instance_;
PROTOBUF_CONSTEXPR SC_SIGNUP_RESPONSE::SC_SIGNUP_RESPONSE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.errorcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_SIGNUP_RESPONSEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_SIGNUP_RESPONSEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_SIGNUP_RESPONSEDefaultTypeInternal() {}
  union {
    SC_SIGNUP_RESPONSE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_SIGNUP_RESPONSEDefaultTypeInternal _SC_SIGNUP_RESPONSE_default_instance_;
PROTOBUF_CONSTEXPR CS_ACCEPT_PARTY::CS_ACCEPT_PARTY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fromplayerid_)*/0u
  , /*decltype(_impl_.toplayerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_ACCEPT_PARTYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_ACCEPT_PARTYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_ACCEPT_PARTYDefaultTypeInternal() {}
  union {
    CS_ACCEPT_PARTY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_ACCEPT_PARTYDefaultTypeInternal _CS_ACCEPT_PARTY_default_instance_;
PROTOBUF_CONSTEXPR CS_CANCEL_ENTERING_DUNGEON::CS_CANCEL_ENTERING_DUNGEON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bcancel_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_CANCEL_ENTERING_DUNGEONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_CANCEL_ENTERING_DUNGEONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_CANCEL_ENTERING_DUNGEONDefaultTypeInternal() {}
  union {
    CS_CANCEL_ENTERING_DUNGEON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_CANCEL_ENTERING_DUNGEONDefaultTypeInternal _CS_CANCEL_ENTERING_DUNGEON_default_instance_;
PROTOBUF_CONSTEXPR CS_CREATE_MONSTER::CS_CREATE_MONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterpos_)*/nullptr
  , /*decltype(_impl_.monstertype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_CREATE_MONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_CREATE_MONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_CREATE_MONSTERDefaultTypeInternal() {}
  union {
    CS_CREATE_MONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_CREATE_MONSTERDefaultTypeInternal _CS_CREATE_MONSTER_default_instance_;
PROTOBUF_CONSTEXPR CS_MAKE_PARTY::CS_MAKE_PARTY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fromplayerid_)*/0u
  , /*decltype(_impl_.toplayerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MAKE_PARTYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MAKE_PARTYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MAKE_PARTYDefaultTypeInternal() {}
  union {
    CS_MAKE_PARTY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MAKE_PARTYDefaultTypeInternal _CS_MAKE_PARTY_default_instance_;
PROTOBUF_CONSTEXPR CS_REGISTER_REQUEST::CS_REGISTER_REQUEST(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.brequest_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_REGISTER_REQUESTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_REGISTER_REQUESTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_REGISTER_REQUESTDefaultTypeInternal() {}
  union {
    CS_REGISTER_REQUEST _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_REGISTER_REQUESTDefaultTypeInternal _CS_REGISTER_REQUEST_default_instance_;
PROTOBUF_CONSTEXPR CS_REQUEST_ENTER_DUNGEON::CS_REQUEST_ENTER_DUNGEON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.benter_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_REQUEST_ENTER_DUNGEONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_REQUEST_ENTER_DUNGEONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_REQUEST_ENTER_DUNGEONDefaultTypeInternal() {}
  union {
    CS_REQUEST_ENTER_DUNGEON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_REQUEST_ENTER_DUNGEONDefaultTypeInternal _CS_REQUEST_ENTER_DUNGEON_default_instance_;
PROTOBUF_CONSTEXPR CS_RESPONSE_ENTER_DUNGEON_END::CS_RESPONSE_ENTER_DUNGEON_END(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.benterend_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal() {}
  union {
    CS_RESPONSE_ENTER_DUNGEON_END _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal _CS_RESPONSE_ENTER_DUNGEON_END_default_instance_;
PROTOBUF_CONSTEXPR CS_SPAWN_CHARACTER::CS_SPAWN_CHARACTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerpos_)*/nullptr
  , /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.camerayaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_SPAWN_CHARACTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_SPAWN_CHARACTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_SPAWN_CHARACTERDefaultTypeInternal() {}
  union {
    CS_SPAWN_CHARACTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_SPAWN_CHARACTERDefaultTypeInternal _CS_SPAWN_CHARACTER_default_instance_;
PROTOBUF_CONSTEXPR CS_START_AI_CALCULATE::CS_START_AI_CALCULATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bstart_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_START_AI_CALCULATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_START_AI_CALCULATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_START_AI_CALCULATEDefaultTypeInternal() {}
  union {
    CS_START_AI_CALCULATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_START_AI_CALCULATEDefaultTypeInternal _CS_START_AI_CALCULATE_default_instance_;
PROTOBUF_CONSTEXPR CS_STOP_AI_CALCULATE::CS_STOP_AI_CALCULATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bstop_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_STOP_AI_CALCULATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_STOP_AI_CALCULATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_STOP_AI_CALCULATEDefaultTypeInternal() {}
  union {
    CS_STOP_AI_CALCULATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_STOP_AI_CALCULATEDefaultTypeInternal _CS_STOP_AI_CALCULATE_default_instance_;
PROTOBUF_CONSTEXPR SC_ACCEPT_PARTY::SC_ACCEPT_PARTY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_.fromplayerid_)*/0u
  , /*decltype(_impl_.toplayerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ACCEPT_PARTYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ACCEPT_PARTYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ACCEPT_PARTYDefaultTypeInternal() {}
  union {
    SC_ACCEPT_PARTY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ACCEPT_PARTYDefaultTypeInternal _SC_ACCEPT_PARTY_default_instance_;
PROTOBUF_CONSTEXPR SC_CANCEL_ENTERING_DUNGEON::SC_CANCEL_ENTERING_DUNGEON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bcancel_)*/false
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CANCEL_ENTERING_DUNGEONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CANCEL_ENTERING_DUNGEONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CANCEL_ENTERING_DUNGEONDefaultTypeInternal() {}
  union {
    SC_CANCEL_ENTERING_DUNGEON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CANCEL_ENTERING_DUNGEONDefaultTypeInternal _SC_CANCEL_ENTERING_DUNGEON_default_instance_;
PROTOBUF_CONSTEXPR SC_CREATE_MONSTER::SC_CREATE_MONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsterpos_)*/nullptr
  , /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.monstertype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CREATE_MONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CREATE_MONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CREATE_MONSTERDefaultTypeInternal() {}
  union {
    SC_CREATE_MONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CREATE_MONSTERDefaultTypeInternal _SC_CREATE_MONSTER_default_instance_;
PROTOBUF_CONSTEXPR SC_MAKE_PARTY::SC_MAKE_PARTY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fromplayerid_)*/0u
  , /*decltype(_impl_.toplayerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MAKE_PARTYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MAKE_PARTYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MAKE_PARTYDefaultTypeInternal() {}
  union {
    SC_MAKE_PARTY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MAKE_PARTYDefaultTypeInternal _SC_MAKE_PARTY_default_instance_;
PROTOBUF_CONSTEXPR SC_PREPARE_ENTERING_DUNGEON::SC_PREPARE_ENTERING_DUNGEON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.benter_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_PREPARE_ENTERING_DUNGEONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_PREPARE_ENTERING_DUNGEONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_PREPARE_ENTERING_DUNGEONDefaultTypeInternal() {}
  union {
    SC_PREPARE_ENTERING_DUNGEON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_PREPARE_ENTERING_DUNGEONDefaultTypeInternal _SC_PREPARE_ENTERING_DUNGEON_default_instance_;
PROTOBUF_CONSTEXPR SC_REMOVE_CHARACTER::SC_REMOVE_CHARACTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_REMOVE_CHARACTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_REMOVE_CHARACTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_REMOVE_CHARACTERDefaultTypeInternal() {}
  union {
    SC_REMOVE_CHARACTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_REMOVE_CHARACTERDefaultTypeInternal _SC_REMOVE_CHARACTER_default_instance_;
PROTOBUF_CONSTEXPR SC_RESPONSE_ENTER_DUNGEON_BEGIN::SC_RESPONSE_ENTER_DUNGEON_BEGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.benterbegin_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_RESPONSE_ENTER_DUNGEON_BEGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_RESPONSE_ENTER_DUNGEON_BEGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_RESPONSE_ENTER_DUNGEON_BEGINDefaultTypeInternal() {}
  union {
    SC_RESPONSE_ENTER_DUNGEON_BEGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_RESPONSE_ENTER_DUNGEON_BEGINDefaultTypeInternal _SC_RESPONSE_ENTER_DUNGEON_BEGIN_default_instance_;
PROTOBUF_CONSTEXPR SC_RESPONSE_ENTER_DUNGEON_END::SC_RESPONSE_ENTER_DUNGEON_END(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.benterend_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal() {}
  union {
    SC_RESPONSE_ENTER_DUNGEON_END _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal _SC_RESPONSE_ENTER_DUNGEON_END_default_instance_;
PROTOBUF_CONSTEXPR SC_SPAWN_CHARACTER::SC_SPAWN_CHARACTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerpos_)*/nullptr
  , /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.camerayaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_SPAWN_CHARACTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_SPAWN_CHARACTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_SPAWN_CHARACTERDefaultTypeInternal() {}
  union {
    SC_SPAWN_CHARACTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_SPAWN_CHARACTERDefaultTypeInternal _SC_SPAWN_CHARACTER_default_instance_;
PROTOBUF_CONSTEXPR SC_START_AI_CALCULATE::SC_START_AI_CALCULATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bstart_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_START_AI_CALCULATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_START_AI_CALCULATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_START_AI_CALCULATEDefaultTypeInternal() {}
  union {
    SC_START_AI_CALCULATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_START_AI_CALCULATEDefaultTypeInternal _SC_START_AI_CALCULATE_default_instance_;
PROTOBUF_CONSTEXPR SC_STOP_AI_CALCULATE::SC_STOP_AI_CALCULATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bstop_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_STOP_AI_CALCULATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_STOP_AI_CALCULATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_STOP_AI_CALCULATEDefaultTypeInternal() {}
  union {
    SC_STOP_AI_CALCULATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_STOP_AI_CALCULATEDefaultTypeInternal _SC_STOP_AI_CALCULATE_default_instance_;
PROTOBUF_CONSTEXPR CS_CHAT::CS_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetid_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_CHATDefaultTypeInternal() {}
  union {
    CS_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_CHATDefaultTypeInternal _CS_CHAT_default_instance_;
PROTOBUF_CONSTEXPR SC_CHAT::SC_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CHATDefaultTypeInternal() {}
  union {
    SC_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CHATDefaultTypeInternal _SC_CHAT_default_instance_;
PROTOBUF_CONSTEXPR CS_KEYINFO::CS_KEYINFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyinfo_)*/0u
  , /*decltype(_impl_.camerayaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_KEYINFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_KEYINFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_KEYINFODefaultTypeInternal() {}
  union {
    CS_KEYINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_KEYINFODefaultTypeInternal _CS_KEYINFO_default_instance_;
PROTOBUF_CONSTEXPR CS_MONSTER_ATTACK::CS_MONSTER_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MONSTER_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MONSTER_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MONSTER_ATTACKDefaultTypeInternal() {}
  union {
    CS_MONSTER_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MONSTER_ATTACKDefaultTypeInternal _CS_MONSTER_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR CS_MONSTER_DIE::CS_MONSTER_DIE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MONSTER_DIEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MONSTER_DIEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MONSTER_DIEDefaultTypeInternal() {}
  union {
    CS_MONSTER_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MONSTER_DIEDefaultTypeInternal _CS_MONSTER_DIE_default_instance_;
PROTOBUF_CONSTEXPR CS_PLAYER_ATTACK::CS_PLAYER_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.attackdamage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_PLAYER_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_PLAYER_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_PLAYER_ATTACKDefaultTypeInternal() {}
  union {
    CS_PLAYER_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_PLAYER_ATTACKDefaultTypeInternal _CS_PLAYER_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR CS_PLAYER_DIE::CS_PLAYER_DIE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_PLAYER_DIEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_PLAYER_DIEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_PLAYER_DIEDefaultTypeInternal() {}
  union {
    CS_PLAYER_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_PLAYER_DIEDefaultTypeInternal _CS_PLAYER_DIE_default_instance_;
PROTOBUF_CONSTEXPR CS_POSITION_SYNC::CS_POSITION_SYNC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.camerayaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_POSITION_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_POSITION_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_POSITION_SYNCDefaultTypeInternal() {}
  union {
    CS_POSITION_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_POSITION_SYNCDefaultTypeInternal _CS_POSITION_SYNC_default_instance_;
PROTOBUF_CONSTEXPR SC_KEYINFO::SC_KEYINFO(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.keyinfo_)*/0u
  , /*decltype(_impl_.camerayaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_KEYINFODefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_KEYINFODefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_KEYINFODefaultTypeInternal() {}
  union {
    SC_KEYINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_KEYINFODefaultTypeInternal _SC_KEYINFO_default_instance_;
PROTOBUF_CONSTEXPR SC_MONSTER_DAMAGED::SC_MONSTER_DAMAGED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MONSTER_DAMAGEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MONSTER_DAMAGEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MONSTER_DAMAGEDDefaultTypeInternal() {}
  union {
    SC_MONSTER_DAMAGED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MONSTER_DAMAGEDDefaultTypeInternal _SC_MONSTER_DAMAGED_default_instance_;
PROTOBUF_CONSTEXPR SC_MONSTER_DIE::SC_MONSTER_DIE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MONSTER_DIEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MONSTER_DIEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MONSTER_DIEDefaultTypeInternal() {}
  union {
    SC_MONSTER_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MONSTER_DIEDefaultTypeInternal _SC_MONSTER_DIE_default_instance_;
PROTOBUF_CONSTEXPR SC_PLAYER_DAMAGED::SC_PLAYER_DAMAGED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_PLAYER_DAMAGEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_PLAYER_DAMAGEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_PLAYER_DAMAGEDDefaultTypeInternal() {}
  union {
    SC_PLAYER_DAMAGED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_PLAYER_DAMAGEDDefaultTypeInternal _SC_PLAYER_DAMAGED_default_instance_;
PROTOBUF_CONSTEXPR SC_PLAYER_DIE::SC_PLAYER_DIE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_PLAYER_DIEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_PLAYER_DIEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_PLAYER_DIEDefaultTypeInternal() {}
  union {
    SC_PLAYER_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_PLAYER_DIEDefaultTypeInternal _SC_PLAYER_DIE_default_instance_;
PROTOBUF_CONSTEXPR SC_POSITION_SYNC::SC_POSITION_SYNC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.posx_)*/0
  , /*decltype(_impl_.posy_)*/0
  , /*decltype(_impl_.camerayaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_POSITION_SYNCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_POSITION_SYNCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_POSITION_SYNCDefaultTypeInternal() {}
  union {
    SC_POSITION_SYNC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_POSITION_SYNCDefaultTypeInternal _SC_POSITION_SYNC_default_instance_;
PROTOBUF_CONSTEXPR CS_MONSTER_AI::CS_MONSTER_AI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetmovementpos_)*/nullptr
  , /*decltype(_impl_.bosspos_)*/nullptr
  , /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.currenthp_)*/0u
  , /*decltype(_impl_.maxhp_)*/0u
  , /*decltype(_impl_.bossstate_)*/0u
  , /*decltype(_impl_.curspeed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MONSTER_AIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MONSTER_AIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MONSTER_AIDefaultTypeInternal() {}
  union {
    CS_MONSTER_AI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MONSTER_AIDefaultTypeInternal _CS_MONSTER_AI_default_instance_;
PROTOBUF_CONSTEXPR CS_MONSTER_ROTATE::CS_MONSTER_ROTATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.rotatey_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_MONSTER_ROTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_MONSTER_ROTATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_MONSTER_ROTATEDefaultTypeInternal() {}
  union {
    CS_MONSTER_ROTATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_MONSTER_ROTATEDefaultTypeInternal _CS_MONSTER_ROTATE_default_instance_;
PROTOBUF_CONSTEXPR SC_MONSTER_AI::SC_MONSTER_AI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetmovementpos_)*/nullptr
  , /*decltype(_impl_.bosspos_)*/nullptr
  , /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.currenthp_)*/0u
  , /*decltype(_impl_.maxhp_)*/0u
  , /*decltype(_impl_.bossstate_)*/0u
  , /*decltype(_impl_.curspeed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MONSTER_AIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MONSTER_AIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MONSTER_AIDefaultTypeInternal() {}
  union {
    SC_MONSTER_AI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MONSTER_AIDefaultTypeInternal _SC_MONSTER_AI_default_instance_;
PROTOBUF_CONSTEXPR SC_MONSTER_ROTATE::SC_MONSTER_ROTATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aiid_)*/0u
  , /*decltype(_impl_.rotatey_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_MONSTER_ROTATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_MONSTER_ROTATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_MONSTER_ROTATEDefaultTypeInternal() {}
  union {
    SC_MONSTER_ROTATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_MONSTER_ROTATEDefaultTypeInternal _SC_MONSTER_ROTATE_default_instance_;
PROTOBUF_CONSTEXPR CS_CHECK_TIMEOUT::CS_CHECK_TIMEOUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bcheck_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_CHECK_TIMEOUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_CHECK_TIMEOUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_CHECK_TIMEOUTDefaultTypeInternal() {}
  union {
    CS_CHECK_TIMEOUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_CHECK_TIMEOUTDefaultTypeInternal _CS_CHECK_TIMEOUT_default_instance_;
PROTOBUF_CONSTEXPR CS_TEST_PACKET1::CS_TEST_PACKET1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tempdata_)*/{}
  , /*decltype(_impl_._tempdata_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_TEST_PACKET1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_TEST_PACKET1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_TEST_PACKET1DefaultTypeInternal() {}
  union {
    CS_TEST_PACKET1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_TEST_PACKET1DefaultTypeInternal _CS_TEST_PACKET1_default_instance_;
PROTOBUF_CONSTEXPR CS_TEST_PACKET2::CS_TEST_PACKET2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tempdata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_TEST_PACKET2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_TEST_PACKET2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_TEST_PACKET2DefaultTypeInternal() {}
  union {
    CS_TEST_PACKET2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_TEST_PACKET2DefaultTypeInternal _CS_TEST_PACKET2_default_instance_;
PROTOBUF_CONSTEXPR SC_TEST_PACKET::SC_TEST_PACKET(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tempdata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_TEST_PACKETDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_TEST_PACKETDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_TEST_PACKETDefaultTypeInternal() {}
  union {
    SC_TEST_PACKET _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_TEST_PACKETDefaultTypeInternal _SC_TEST_PACKET_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[57];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.playernickname_),
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.playerjob_),
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::Position, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::Position, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::Position, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_FIND_ID_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_FIND_ID_REQUEST, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_FIND_PW_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_FIND_PW_REQUEST, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::CS_FIND_PW_REQUEST, _impl_.email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_LOGIN_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_LOGIN_REQUEST, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::CS_LOGIN_REQUEST, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_CHARACTER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_CHARACTER_INFO, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_ITEM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_ITEM_INFO, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_SIGNUP_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_SIGNUP_REQUEST, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::CS_SIGNUP_REQUEST, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::game::CS_SIGNUP_REQUEST, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_FIND_ID_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_FIND_ID_RESPONSE, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::game::SC_FIND_ID_RESPONSE, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_FIND_PW_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_FIND_PW_RESPONSE, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::game::SC_FIND_PW_RESPONSE, _impl_.pw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_LOGIN_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_LOGIN_RESPONSE, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::game::SC_LOGIN_RESPONSE, _impl_.errorcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_REQUEST_ITEM_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_REQUEST_ITEM_INFO, _impl_.iteminfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_RESPONSE_CHARACTER_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_RESPONSE_CHARACTER_INFO, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_SIGNUP_RESPONSE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_SIGNUP_RESPONSE, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::game::SC_SIGNUP_RESPONSE, _impl_.errorcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_ACCEPT_PARTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_ACCEPT_PARTY, _impl_.fromplayerid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ACCEPT_PARTY, _impl_.toplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_CANCEL_ENTERING_DUNGEON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_CANCEL_ENTERING_DUNGEON, _impl_.bcancel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_CREATE_MONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_CREATE_MONSTER, _impl_.monstertype_),
  PROTOBUF_FIELD_OFFSET(::game::CS_CREATE_MONSTER, _impl_.monsterpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MAKE_PARTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MAKE_PARTY, _impl_.fromplayerid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MAKE_PARTY, _impl_.toplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_REGISTER_REQUEST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_REGISTER_REQUEST, _impl_.brequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_ENTER_DUNGEON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_ENTER_DUNGEON, _impl_.benter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_RESPONSE_ENTER_DUNGEON_END, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_RESPONSE_ENTER_DUNGEON_END, _impl_.benterend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_SPAWN_CHARACTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_SPAWN_CHARACTER, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_SPAWN_CHARACTER, _impl_.playerpos_),
  PROTOBUF_FIELD_OFFSET(::game::CS_SPAWN_CHARACTER, _impl_.camerayaw_),
  PROTOBUF_FIELD_OFFSET(::game::CS_SPAWN_CHARACTER, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_START_AI_CALCULATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_START_AI_CALCULATE, _impl_.bstart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_STOP_AI_CALCULATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_STOP_AI_CALCULATE, _impl_.bstop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ACCEPT_PARTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ACCEPT_PARTY, _impl_.fromplayerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ACCEPT_PARTY, _impl_.toplayerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ACCEPT_PARTY, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CANCEL_ENTERING_DUNGEON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CANCEL_ENTERING_DUNGEON, _impl_.bcancel_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CANCEL_ENTERING_DUNGEON, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MONSTER, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MONSTER, _impl_.monstertype_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MONSTER, _impl_.monsterpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MAKE_PARTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MAKE_PARTY, _impl_.fromplayerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MAKE_PARTY, _impl_.toplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_PREPARE_ENTERING_DUNGEON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_PREPARE_ENTERING_DUNGEON, _impl_.benter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_REMOVE_CHARACTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_REMOVE_CHARACTER, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN, _impl_.benterbegin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_RESPONSE_ENTER_DUNGEON_END, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_RESPONSE_ENTER_DUNGEON_END, _impl_.benterend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_SPAWN_CHARACTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_SPAWN_CHARACTER, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_SPAWN_CHARACTER, _impl_.playerpos_),
  PROTOBUF_FIELD_OFFSET(::game::SC_SPAWN_CHARACTER, _impl_.camerayaw_),
  PROTOBUF_FIELD_OFFSET(::game::SC_SPAWN_CHARACTER, _impl_.playerinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_START_AI_CALCULATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_START_AI_CALCULATE, _impl_.bstart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_STOP_AI_CALCULATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_STOP_AI_CALCULATE, _impl_.bstop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_CHAT, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_CHAT, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::game::CS_CHAT, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHAT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CHAT, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CHAT, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_KEYINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_KEYINFO, _impl_.keyinfo_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEYINFO, _impl_.camerayaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_ATTACK, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_ATTACK, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_DIE, _impl_.aiid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_PLAYER_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_PLAYER_ATTACK, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_PLAYER_ATTACK, _impl_.attackdamage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_PLAYER_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_PLAYER_DIE, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_POSITION_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_POSITION_SYNC, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_POSITION_SYNC, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_POSITION_SYNC, _impl_.camerayaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_KEYINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_KEYINFO, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEYINFO, _impl_.keyinfo_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEYINFO, _impl_.camerayaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_DAMAGED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_DAMAGED, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_DAMAGED, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_DIE, _impl_.aiid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_PLAYER_DAMAGED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_PLAYER_DAMAGED, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_PLAYER_DAMAGED, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_PLAYER_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_PLAYER_DIE, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_POSITION_SYNC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_POSITION_SYNC, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_POSITION_SYNC, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_POSITION_SYNC, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_POSITION_SYNC, _impl_.camerayaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.currenthp_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.targetmovementpos_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.bosspos_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.bossstate_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_AI, _impl_.curspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_ROTATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_ROTATE, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_MONSTER_ROTATE, _impl_.rotatey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.currenthp_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.targetmovementpos_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.bosspos_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.bossstate_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_AI, _impl_.curspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_ROTATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_ROTATE, _impl_.aiid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_MONSTER_ROTATE, _impl_.rotatey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_CHECK_TIMEOUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_CHECK_TIMEOUT, _impl_.bcheck_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_TEST_PACKET1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_TEST_PACKET1, _impl_.tempdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_TEST_PACKET2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_TEST_PACKET2, _impl_.tempdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_TEST_PACKET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_TEST_PACKET, _impl_.tempdata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::PlayerInfo)},
  { 9, -1, -1, sizeof(::game::Position)},
  { 18, -1, -1, sizeof(::game::CS_FIND_ID_REQUEST)},
  { 25, -1, -1, sizeof(::game::CS_FIND_PW_REQUEST)},
  { 33, -1, -1, sizeof(::game::CS_LOGIN_REQUEST)},
  { 41, -1, -1, sizeof(::game::CS_REQUEST_CHARACTER_INFO)},
  { 48, -1, -1, sizeof(::game::CS_REQUEST_ITEM_INFO)},
  { 55, -1, -1, sizeof(::game::CS_SIGNUP_REQUEST)},
  { 64, -1, -1, sizeof(::game::SC_FIND_ID_RESPONSE)},
  { 72, -1, -1, sizeof(::game::SC_FIND_PW_RESPONSE)},
  { 80, -1, -1, sizeof(::game::SC_LOGIN_RESPONSE)},
  { 88, -1, -1, sizeof(::game::SC_REQUEST_ITEM_INFO)},
  { 95, -1, -1, sizeof(::game::SC_RESPONSE_CHARACTER_INFO)},
  { 102, -1, -1, sizeof(::game::SC_SIGNUP_RESPONSE)},
  { 110, -1, -1, sizeof(::game::CS_ACCEPT_PARTY)},
  { 118, -1, -1, sizeof(::game::CS_CANCEL_ENTERING_DUNGEON)},
  { 125, -1, -1, sizeof(::game::CS_CREATE_MONSTER)},
  { 133, -1, -1, sizeof(::game::CS_MAKE_PARTY)},
  { 141, -1, -1, sizeof(::game::CS_REGISTER_REQUEST)},
  { 148, -1, -1, sizeof(::game::CS_REQUEST_ENTER_DUNGEON)},
  { 155, -1, -1, sizeof(::game::CS_RESPONSE_ENTER_DUNGEON_END)},
  { 162, -1, -1, sizeof(::game::CS_SPAWN_CHARACTER)},
  { 172, -1, -1, sizeof(::game::CS_START_AI_CALCULATE)},
  { 179, -1, -1, sizeof(::game::CS_STOP_AI_CALCULATE)},
  { 186, -1, -1, sizeof(::game::SC_ACCEPT_PARTY)},
  { 195, -1, -1, sizeof(::game::SC_CANCEL_ENTERING_DUNGEON)},
  { 203, -1, -1, sizeof(::game::SC_CREATE_MONSTER)},
  { 212, -1, -1, sizeof(::game::SC_MAKE_PARTY)},
  { 220, -1, -1, sizeof(::game::SC_PREPARE_ENTERING_DUNGEON)},
  { 227, -1, -1, sizeof(::game::SC_REMOVE_CHARACTER)},
  { 234, -1, -1, sizeof(::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN)},
  { 241, -1, -1, sizeof(::game::SC_RESPONSE_ENTER_DUNGEON_END)},
  { 248, -1, -1, sizeof(::game::SC_SPAWN_CHARACTER)},
  { 258, -1, -1, sizeof(::game::SC_START_AI_CALCULATE)},
  { 265, -1, -1, sizeof(::game::SC_STOP_AI_CALCULATE)},
  { 272, -1, -1, sizeof(::game::CS_CHAT)},
  { 281, -1, -1, sizeof(::game::SC_CHAT)},
  { 290, -1, -1, sizeof(::game::CS_KEYINFO)},
  { 298, -1, -1, sizeof(::game::CS_MONSTER_ATTACK)},
  { 306, -1, -1, sizeof(::game::CS_MONSTER_DIE)},
  { 313, -1, -1, sizeof(::game::CS_PLAYER_ATTACK)},
  { 321, -1, -1, sizeof(::game::CS_PLAYER_DIE)},
  { 328, -1, -1, sizeof(::game::CS_POSITION_SYNC)},
  { 337, -1, -1, sizeof(::game::SC_KEYINFO)},
  { 346, -1, -1, sizeof(::game::SC_MONSTER_DAMAGED)},
  { 354, -1, -1, sizeof(::game::SC_MONSTER_DIE)},
  { 361, -1, -1, sizeof(::game::SC_PLAYER_DAMAGED)},
  { 369, -1, -1, sizeof(::game::SC_PLAYER_DIE)},
  { 376, -1, -1, sizeof(::game::SC_POSITION_SYNC)},
  { 386, -1, -1, sizeof(::game::CS_MONSTER_AI)},
  { 399, -1, -1, sizeof(::game::CS_MONSTER_ROTATE)},
  { 407, -1, -1, sizeof(::game::SC_MONSTER_AI)},
  { 420, -1, -1, sizeof(::game::SC_MONSTER_ROTATE)},
  { 428, -1, -1, sizeof(::game::CS_CHECK_TIMEOUT)},
  { 435, -1, -1, sizeof(::game::CS_TEST_PACKET1)},
  { 442, -1, -1, sizeof(::game::CS_TEST_PACKET2)},
  { 449, -1, -1, sizeof(::game::SC_TEST_PACKET)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_PlayerInfo_default_instance_._instance,
  &::game::_Position_default_instance_._instance,
  &::game::_CS_FIND_ID_REQUEST_default_instance_._instance,
  &::game::_CS_FIND_PW_REQUEST_default_instance_._instance,
  &::game::_CS_LOGIN_REQUEST_default_instance_._instance,
  &::game::_CS_REQUEST_CHARACTER_INFO_default_instance_._instance,
  &::game::_CS_REQUEST_ITEM_INFO_default_instance_._instance,
  &::game::_CS_SIGNUP_REQUEST_default_instance_._instance,
  &::game::_SC_FIND_ID_RESPONSE_default_instance_._instance,
  &::game::_SC_FIND_PW_RESPONSE_default_instance_._instance,
  &::game::_SC_LOGIN_RESPONSE_default_instance_._instance,
  &::game::_SC_REQUEST_ITEM_INFO_default_instance_._instance,
  &::game::_SC_RESPONSE_CHARACTER_INFO_default_instance_._instance,
  &::game::_SC_SIGNUP_RESPONSE_default_instance_._instance,
  &::game::_CS_ACCEPT_PARTY_default_instance_._instance,
  &::game::_CS_CANCEL_ENTERING_DUNGEON_default_instance_._instance,
  &::game::_CS_CREATE_MONSTER_default_instance_._instance,
  &::game::_CS_MAKE_PARTY_default_instance_._instance,
  &::game::_CS_REGISTER_REQUEST_default_instance_._instance,
  &::game::_CS_REQUEST_ENTER_DUNGEON_default_instance_._instance,
  &::game::_CS_RESPONSE_ENTER_DUNGEON_END_default_instance_._instance,
  &::game::_CS_SPAWN_CHARACTER_default_instance_._instance,
  &::game::_CS_START_AI_CALCULATE_default_instance_._instance,
  &::game::_CS_STOP_AI_CALCULATE_default_instance_._instance,
  &::game::_SC_ACCEPT_PARTY_default_instance_._instance,
  &::game::_SC_CANCEL_ENTERING_DUNGEON_default_instance_._instance,
  &::game::_SC_CREATE_MONSTER_default_instance_._instance,
  &::game::_SC_MAKE_PARTY_default_instance_._instance,
  &::game::_SC_PREPARE_ENTERING_DUNGEON_default_instance_._instance,
  &::game::_SC_REMOVE_CHARACTER_default_instance_._instance,
  &::game::_SC_RESPONSE_ENTER_DUNGEON_BEGIN_default_instance_._instance,
  &::game::_SC_RESPONSE_ENTER_DUNGEON_END_default_instance_._instance,
  &::game::_SC_SPAWN_CHARACTER_default_instance_._instance,
  &::game::_SC_START_AI_CALCULATE_default_instance_._instance,
  &::game::_SC_STOP_AI_CALCULATE_default_instance_._instance,
  &::game::_CS_CHAT_default_instance_._instance,
  &::game::_SC_CHAT_default_instance_._instance,
  &::game::_CS_KEYINFO_default_instance_._instance,
  &::game::_CS_MONSTER_ATTACK_default_instance_._instance,
  &::game::_CS_MONSTER_DIE_default_instance_._instance,
  &::game::_CS_PLAYER_ATTACK_default_instance_._instance,
  &::game::_CS_PLAYER_DIE_default_instance_._instance,
  &::game::_CS_POSITION_SYNC_default_instance_._instance,
  &::game::_SC_KEYINFO_default_instance_._instance,
  &::game::_SC_MONSTER_DAMAGED_default_instance_._instance,
  &::game::_SC_MONSTER_DIE_default_instance_._instance,
  &::game::_SC_PLAYER_DAMAGED_default_instance_._instance,
  &::game::_SC_PLAYER_DIE_default_instance_._instance,
  &::game::_SC_POSITION_SYNC_default_instance_._instance,
  &::game::_CS_MONSTER_AI_default_instance_._instance,
  &::game::_CS_MONSTER_ROTATE_default_instance_._instance,
  &::game::_SC_MONSTER_AI_default_instance_._instance,
  &::game::_SC_MONSTER_ROTATE_default_instance_._instance,
  &::game::_CS_CHECK_TIMEOUT_default_instance_._instance,
  &::game::_CS_TEST_PACKET1_default_instance_._instance,
  &::game::_CS_TEST_PACKET2_default_instance_._instance,
  &::game::_SC_TEST_PACKET_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\004game\"F\n\nPlayerInfo\022\026\n\016"
  "playerNickname\030\001 \001(\t\022\021\n\tplayerJob\030\002 \001(\r\022"
  "\r\n\005level\030\003 \001(\r\"4\n\010Position\022\014\n\004posX\030\001 \001(\002"
  "\022\014\n\004posY\030\002 \001(\002\022\014\n\004posZ\030\003 \001(\002\"#\n\022CS_FIND_"
  "ID_REQUEST\022\r\n\005email\030\001 \001(\t\"/\n\022CS_FIND_PW_"
  "REQUEST\022\n\n\002id\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\"0\n\020CS"
  "_LOGIN_REQUEST\022\n\n\002id\030\001 \001(\t\022\020\n\010password\030\002"
  " \001(\t\"\'\n\031CS_REQUEST_CHARACTER_INFO\022\n\n\002id\030"
  "\001 \001(\t\"\"\n\024CS_REQUEST_ITEM_INFO\022\n\n\002id\030\001 \001("
  "\t\"@\n\021CS_SIGNUP_REQUEST\022\n\n\002id\030\001 \001(\t\022\r\n\005em"
  "ail\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"2\n\023SC_FIND_I"
  "D_RESPONSE\022\017\n\007success\030\001 \001(\010\022\n\n\002id\030\002 \001(\t\""
  "2\n\023SC_FIND_PW_RESPONSE\022\017\n\007success\030\001 \001(\010\022"
  "\n\n\002pw\030\002 \001(\t\"7\n\021SC_LOGIN_RESPONSE\022\017\n\007succ"
  "ess\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\r\"(\n\024SC_REQUE"
  "ST_ITEM_INFO\022\020\n\010itemInfo\030\001 \003(\r\"B\n\032SC_RES"
  "PONSE_CHARACTER_INFO\022$\n\nplayerInfo\030\001 \001(\013"
  "2\020.game.PlayerInfo\"8\n\022SC_SIGNUP_RESPONSE"
  "\022\017\n\007success\030\001 \001(\010\022\021\n\terrorCode\030\002 \001(\r\";\n\017"
  "CS_ACCEPT_PARTY\022\024\n\014FromPlayerID\030\001 \001(\r\022\022\n"
  "\nToPlayerID\030\002 \001(\r\"-\n\032CS_CANCEL_ENTERING_"
  "DUNGEON\022\017\n\007bCancel\030\001 \001(\010\"L\n\021CS_CREATE_MO"
  "NSTER\022\023\n\013monsterType\030\001 \001(\r\022\"\n\nmonsterPos"
  "\030\002 \001(\0132\016.game.Position\"9\n\rCS_MAKE_PARTY\022"
  "\024\n\014FromPlayerID\030\001 \001(\r\022\022\n\nToPlayerID\030\002 \001("
  "\r\"\'\n\023CS_REGISTER_REQUEST\022\020\n\010bRequest\030\001 \001"
  "(\010\"*\n\030CS_REQUEST_ENTER_DUNGEON\022\016\n\006bEnter"
  "\030\001 \001(\010\"2\n\035CS_RESPONSE_ENTER_DUNGEON_END\022"
  "\021\n\tbEnterEnd\030\001 \001(\010\"\202\001\n\022CS_SPAWN_CHARACTE"
  "R\022\020\n\010playerID\030\001 \001(\r\022!\n\tplayerPos\030\002 \001(\0132\016"
  ".game.Position\022\021\n\tcameraYaw\030\003 \001(\002\022$\n\npla"
  "yerInfo\030\004 \001(\0132\020.game.PlayerInfo\"\'\n\025CS_ST"
  "ART_AI_CALCULATE\022\016\n\006bStart\030\001 \001(\010\"%\n\024CS_S"
  "TOP_AI_CALCULATE\022\r\n\005bStop\030\001 \001(\010\"a\n\017SC_AC"
  "CEPT_PARTY\022\024\n\014FromPlayerID\030\001 \001(\r\022\022\n\nToPl"
  "ayerID\030\002 \001(\r\022$\n\nplayerInfo\030\003 \001(\0132\020.game."
  "PlayerInfo\"\?\n\032SC_CANCEL_ENTERING_DUNGEON"
  "\022\017\n\007bCancel\030\001 \001(\010\022\020\n\010playerID\030\002 \001(\r\"Z\n\021S"
  "C_CREATE_MONSTER\022\014\n\004aiID\030\001 \001(\r\022\023\n\013monste"
  "rType\030\002 \001(\r\022\"\n\nmonsterPos\030\003 \001(\0132\016.game.P"
  "osition\"9\n\rSC_MAKE_PARTY\022\024\n\014FromPlayerID"
  "\030\001 \001(\r\022\022\n\nToPlayerID\030\002 \001(\r\"-\n\033SC_PREPARE"
  "_ENTERING_DUNGEON\022\016\n\006bEnter\030\001 \001(\010\"\'\n\023SC_"
  "REMOVE_CHARACTER\022\020\n\010playerID\030\001 \001(\r\"6\n\037SC"
  "_RESPONSE_ENTER_DUNGEON_BEGIN\022\023\n\013bEnterB"
  "egin\030\001 \001(\010\"2\n\035SC_RESPONSE_ENTER_DUNGEON_"
  "END\022\021\n\tbEnterEnd\030\001 \001(\010\"\202\001\n\022SC_SPAWN_CHAR"
  "ACTER\022\020\n\010playerID\030\001 \001(\r\022!\n\tplayerPos\030\002 \001"
  "(\0132\016.game.Position\022\021\n\tcameraYaw\030\003 \001(\002\022$\n"
  "\nplayerInfo\030\004 \001(\0132\020.game.PlayerInfo\"\'\n\025S"
  "C_START_AI_CALCULATE\022\016\n\006bStart\030\001 \001(\010\"%\n\024"
  "SC_STOP_AI_CALCULATE\022\r\n\005bStop\030\001 \001(\010\"=\n\007C"
  "S_CHAT\022\020\n\010targetID\030\001 \001(\r\022\017\n\007message\030\002 \001("
  "\t\022\017\n\007channel\030\003 \001(\r\"=\n\007SC_CHAT\022\020\n\010playerI"
  "D\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\017\n\007channel\030\003 \001("
  "\r\"0\n\nCS_KEYINFO\022\017\n\007keyInfo\030\001 \001(\r\022\021\n\tcame"
  "raYaw\030\002 \001(\002\"5\n\021CS_MONSTER_ATTACK\022\020\n\010play"
  "erID\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\"\036\n\016CS_MONSTER"
  "_DIE\022\014\n\004aiID\030\001 \001(\r\"6\n\020CS_PLAYER_ATTACK\022\014"
  "\n\004aiID\030\001 \001(\r\022\024\n\014attackDamage\030\002 \001(\r\"!\n\rCS"
  "_PLAYER_DIE\022\020\n\010playerID\030\001 \001(\r\"A\n\020CS_POSI"
  "TION_SYNC\022\014\n\004posX\030\001 \001(\002\022\014\n\004posY\030\002 \001(\002\022\021\n"
  "\tcameraYaw\030\003 \001(\002\"B\n\nSC_KEYINFO\022\020\n\010player"
  "ID\030\001 \001(\r\022\017\n\007keyInfo\030\002 \001(\r\022\021\n\tcameraYaw\030\003"
  " \001(\002\"2\n\022SC_MONSTER_DAMAGED\022\014\n\004aiID\030\001 \001(\r"
  "\022\016\n\006damage\030\002 \001(\r\"\036\n\016SC_MONSTER_DIE\022\014\n\004ai"
  "ID\030\001 \001(\r\"5\n\021SC_PLAYER_DAMAGED\022\020\n\010playerI"
  "D\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\"!\n\rSC_PLAYER_DIE"
  "\022\020\n\010playerID\030\001 \001(\r\"S\n\020SC_POSITION_SYNC\022\020"
  "\n\010playerID\030\001 \001(\r\022\014\n\004posX\030\002 \001(\002\022\014\n\004posY\030\003"
  " \001(\002\022\021\n\tcameraYaw\030\004 \001(\002\"\260\001\n\rCS_MONSTER_A"
  "I\022\014\n\004aiID\030\001 \001(\r\022\021\n\tcurrentHp\030\002 \001(\r\022\r\n\005ma"
  "xHp\030\003 \001(\r\022)\n\021targetMovementPos\030\004 \001(\0132\016.g"
  "ame.Position\022\037\n\007bossPos\030\005 \001(\0132\016.game.Pos"
  "ition\022\021\n\tbossState\030\006 \001(\r\022\020\n\010curSpeed\030\007 \001"
  "(\002\"2\n\021CS_MONSTER_ROTATE\022\014\n\004aiID\030\001 \001(\r\022\017\n"
  "\007rotateY\030\002 \001(\002\"\260\001\n\rSC_MONSTER_AI\022\014\n\004aiID"
  "\030\001 \001(\r\022\021\n\tcurrentHp\030\002 \001(\r\022\r\n\005maxHp\030\003 \001(\r"
  "\022)\n\021targetMovementPos\030\004 \001(\0132\016.game.Posit"
  "ion\022\037\n\007bossPos\030\005 \001(\0132\016.game.Position\022\021\n\t"
  "bossState\030\006 \001(\r\022\020\n\010curSpeed\030\007 \001(\002\"2\n\021SC_"
  "MONSTER_ROTATE\022\014\n\004aiID\030\001 \001(\r\022\017\n\007rotateY\030"
  "\002 \001(\002\"\"\n\020CS_CHECK_TIMEOUT\022\016\n\006bCheck\030\001 \001("
  "\010\"#\n\017CS_TEST_PACKET1\022\020\n\010tempData\030\001 \003(\r\"5"
  "\n\017CS_TEST_PACKET2\022\"\n\010tempData\030\001 \003(\0132\020.ga"
  "me.PlayerInfo\"4\n\016SC_TEST_PACKET\022\"\n\010tempD"
  "ata\030\001 \003(\0132\020.game.PlayerInfo*\336\t\n\010PacketID"
  "\022\022\n\016CS_AcceptParty\020\000\022\034\n\030CS_CancelEnterin"
  "gDungeon\020\001\022\013\n\007CS_Chat\020\002\022\023\n\017CS_CheckTimeo"
  "ut\020\003\022\024\n\020CS_CreateMonster\020\004\022\024\n\020CS_FindIdR"
  "equest\020\005\022\024\n\020CS_FindPwRequest\020\006\022\016\n\nCS_Key"
  "info\020\007\022\023\n\017CS_LoginRequest\020\010\022\020\n\014CS_MakePa"
  "rty\020\t\022\020\n\014CS_MonsterAi\020\n\022\024\n\020CS_MonsterAtt"
  "ack\020\013\022\021\n\rCS_MonsterDie\020\014\022\024\n\020CS_MonsterRo"
  "tate\020\r\022\023\n\017CS_PlayerAttack\020\016\022\020\n\014CS_Player"
  "Die\020\017\022\023\n\017CS_PositionSync\020\020\022\026\n\022CS_Registe"
  "rRequest\020\021\022\033\n\027CS_RequestCharacterInfo\020\022\022"
  "\032\n\026CS_RequestEnterDungeon\020\023\022\026\n\022CS_Reques"
  "tItemInfo\020\024\022\036\n\032CS_ResponseEnterDungeonEn"
  "d\020\025\022\024\n\020CS_SignupRequest\020\026\022\025\n\021CS_SpawnCha"
  "racter\020\027\022\027\n\023CS_StartAiCalculate\020\030\022\026\n\022CS_"
  "StopAiCalculate\020\031\022\022\n\016CS_TestPacket1\020\032\022\022\n"
  "\016CS_TestPacket2\020\033\022\022\n\016SC_AcceptParty\020\034\022\034\n"
  "\030SC_CancelEnteringDungeon\020\035\022\013\n\007SC_Chat\020\036"
  "\022\024\n\020SC_CreateMonster\020\037\022\025\n\021SC_FindIdRespo"
  "nse\020 \022\025\n\021SC_FindPwResponse\020!\022\016\n\nSC_Keyin"
  "fo\020\"\022\024\n\020SC_LoginResponse\020#\022\020\n\014SC_MakePar"
  "ty\020$\022\020\n\014SC_MonsterAi\020%\022\025\n\021SC_MonsterDama"
  "ged\020&\022\021\n\rSC_MonsterDie\020\'\022\024\n\020SC_MonsterRo"
  "tate\020(\022\024\n\020SC_PlayerDamaged\020)\022\020\n\014SC_Playe"
  "rDie\020*\022\023\n\017SC_PositionSync\020+\022\035\n\031SC_Prepar"
  "eEnteringDungeon\020,\022\026\n\022SC_RemoveCharacter"
  "\020-\022\026\n\022SC_RequestItemInfo\020.\022\034\n\030SC_Respons"
  "eCharacterInfo\020/\022 \n\034SC_ResponseEnterDung"
  "eonBegin\0200\022\036\n\032SC_ResponseEnterDungeonEnd"
  "\0201\022\025\n\021SC_SignupResponse\0202\022\025\n\021SC_SpawnCha"
  "racter\0203\022\027\n\023SC_StartAiCalculate\0204\022\026\n\022SC_"
  "StopAiCalculate\0205\022\021\n\rSC_TestPacket\0206b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 4724, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 57,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool PacketID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playernickname_){}
    , decltype(_impl_.playerjob_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playernickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playernickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playernickname().empty()) {
    _this->_impl_.playernickname_.Set(from._internal_playernickname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerjob_, &from._impl_.playerjob_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.playerjob_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:game.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playernickname_){}
    , decltype(_impl_.playerjob_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playernickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playernickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:game.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playernickname_.Destroy();
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playernickname_.ClearToEmpty();
  ::memset(&_impl_.playerjob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.playerjob_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerNickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playernickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.PlayerInfo.playerNickname"));
        } else
          goto handle_unusual;
        continue;
      // uint32 playerJob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerjob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerNickname = 1;
  if (!this->_internal_playernickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playernickname().data(), static_cast<int>(this->_internal_playernickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.PlayerInfo.playerNickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playernickname(), target);
  }

  // uint32 playerJob = 2;
  if (this->_internal_playerjob() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerjob(), target);
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerNickname = 1;
  if (!this->_internal_playernickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playernickname());
  }

  // uint32 playerJob = 2;
  if (this->_internal_playerjob() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerjob());
  }

  // uint32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playernickname().empty()) {
    _this->_internal_set_playernickname(from._internal_playernickname());
  }
  if (from._internal_playerjob() != 0) {
    _this->_internal_set_playerjob(from._internal_playerjob());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playernickname_, lhs_arena,
      &other->_impl_.playernickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.level_)
      + sizeof(PlayerInfo::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.playerjob_)>(
          reinterpret_cast<char*>(&_impl_.playerjob_),
          reinterpret_cast<char*>(&other->_impl_.playerjob_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.posz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:game.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:game.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float posX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_posx(), target);
  }

  // float posY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_posy(), target);
  }

  // float posZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posz = this->_internal_posz();
  uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float posX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    total_size += 1 + 4;
  }

  // float posY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    total_size += 1 + 4;
  }

  // float posZ = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posz = this->_internal_posz();
  uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = from._internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = from._internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posz = from._internal_posz();
  uint32_t raw_posz;
  memcpy(&raw_posz, &tmp_posz, sizeof(tmp_posz));
  if (raw_posz != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.posz_)
      + sizeof(Position::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class CS_FIND_ID_REQUEST::_Internal {
 public:
};

CS_FIND_ID_REQUEST::CS_FIND_ID_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_FIND_ID_REQUEST)
}
CS_FIND_ID_REQUEST::CS_FIND_ID_REQUEST(const CS_FIND_ID_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_FIND_ID_REQUEST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_FIND_ID_REQUEST)
}

inline void CS_FIND_ID_REQUEST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_FIND_ID_REQUEST::~CS_FIND_ID_REQUEST() {
  // @@protoc_insertion_point(destructor:game.CS_FIND_ID_REQUEST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_FIND_ID_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
}

void CS_FIND_ID_REQUEST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_FIND_ID_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_FIND_ID_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_FIND_ID_REQUEST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_FIND_ID_REQUEST.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_FIND_ID_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_FIND_ID_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_FIND_ID_REQUEST.email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_FIND_ID_REQUEST)
  return target;
}

size_t CS_FIND_ID_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_FIND_ID_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_FIND_ID_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_FIND_ID_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_FIND_ID_REQUEST::GetClassData() const { return &_class_data_; }


void CS_FIND_ID_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_FIND_ID_REQUEST*>(&to_msg);
  auto& from = static_cast<const CS_FIND_ID_REQUEST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_FIND_ID_REQUEST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_FIND_ID_REQUEST::CopyFrom(const CS_FIND_ID_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_FIND_ID_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FIND_ID_REQUEST::IsInitialized() const {
  return true;
}

void CS_FIND_ID_REQUEST::InternalSwap(CS_FIND_ID_REQUEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_FIND_ID_REQUEST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class CS_FIND_PW_REQUEST::_Internal {
 public:
};

CS_FIND_PW_REQUEST::CS_FIND_PW_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_FIND_PW_REQUEST)
}
CS_FIND_PW_REQUEST::CS_FIND_PW_REQUEST(const CS_FIND_PW_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_FIND_PW_REQUEST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_FIND_PW_REQUEST)
}

inline void CS_FIND_PW_REQUEST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.email_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_FIND_PW_REQUEST::~CS_FIND_PW_REQUEST() {
  // @@protoc_insertion_point(destructor:game.CS_FIND_PW_REQUEST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_FIND_PW_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.email_.Destroy();
}

void CS_FIND_PW_REQUEST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_FIND_PW_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_FIND_PW_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_FIND_PW_REQUEST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_FIND_PW_REQUEST.id"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_FIND_PW_REQUEST.email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_FIND_PW_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_FIND_PW_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_FIND_PW_REQUEST.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_FIND_PW_REQUEST.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_FIND_PW_REQUEST)
  return target;
}

size_t CS_FIND_PW_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_FIND_PW_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_FIND_PW_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_FIND_PW_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_FIND_PW_REQUEST::GetClassData() const { return &_class_data_; }


void CS_FIND_PW_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_FIND_PW_REQUEST*>(&to_msg);
  auto& from = static_cast<const CS_FIND_PW_REQUEST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_FIND_PW_REQUEST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_FIND_PW_REQUEST::CopyFrom(const CS_FIND_PW_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_FIND_PW_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FIND_PW_REQUEST::IsInitialized() const {
  return true;
}

void CS_FIND_PW_REQUEST::InternalSwap(CS_FIND_PW_REQUEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_FIND_PW_REQUEST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class CS_LOGIN_REQUEST::_Internal {
 public:
};

CS_LOGIN_REQUEST::CS_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_LOGIN_REQUEST)
}
CS_LOGIN_REQUEST::CS_LOGIN_REQUEST(const CS_LOGIN_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_LOGIN_REQUEST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_LOGIN_REQUEST)
}

inline void CS_LOGIN_REQUEST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_LOGIN_REQUEST::~CS_LOGIN_REQUEST() {
  // @@protoc_insertion_point(destructor:game.CS_LOGIN_REQUEST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_LOGIN_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.password_.Destroy();
}

void CS_LOGIN_REQUEST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_LOGIN_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_LOGIN_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_LOGIN_REQUEST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_LOGIN_REQUEST.id"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_LOGIN_REQUEST.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_LOGIN_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_LOGIN_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_LOGIN_REQUEST.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_LOGIN_REQUEST.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_LOGIN_REQUEST)
  return target;
}

size_t CS_LOGIN_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_LOGIN_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_LOGIN_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_LOGIN_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_LOGIN_REQUEST::GetClassData() const { return &_class_data_; }


void CS_LOGIN_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_LOGIN_REQUEST*>(&to_msg);
  auto& from = static_cast<const CS_LOGIN_REQUEST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_LOGIN_REQUEST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_LOGIN_REQUEST::CopyFrom(const CS_LOGIN_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_LOGIN_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LOGIN_REQUEST::IsInitialized() const {
  return true;
}

void CS_LOGIN_REQUEST::InternalSwap(CS_LOGIN_REQUEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_LOGIN_REQUEST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class CS_REQUEST_CHARACTER_INFO::_Internal {
 public:
};

CS_REQUEST_CHARACTER_INFO::CS_REQUEST_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_REQUEST_CHARACTER_INFO)
}
CS_REQUEST_CHARACTER_INFO::CS_REQUEST_CHARACTER_INFO(const CS_REQUEST_CHARACTER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_REQUEST_CHARACTER_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_REQUEST_CHARACTER_INFO)
}

inline void CS_REQUEST_CHARACTER_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_REQUEST_CHARACTER_INFO::~CS_REQUEST_CHARACTER_INFO() {
  // @@protoc_insertion_point(destructor:game.CS_REQUEST_CHARACTER_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_REQUEST_CHARACTER_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CS_REQUEST_CHARACTER_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_REQUEST_CHARACTER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_REQUEST_CHARACTER_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_REQUEST_CHARACTER_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_REQUEST_CHARACTER_INFO.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_REQUEST_CHARACTER_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_REQUEST_CHARACTER_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_REQUEST_CHARACTER_INFO.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_REQUEST_CHARACTER_INFO)
  return target;
}

size_t CS_REQUEST_CHARACTER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_REQUEST_CHARACTER_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_REQUEST_CHARACTER_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_REQUEST_CHARACTER_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_REQUEST_CHARACTER_INFO::GetClassData() const { return &_class_data_; }


void CS_REQUEST_CHARACTER_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_REQUEST_CHARACTER_INFO*>(&to_msg);
  auto& from = static_cast<const CS_REQUEST_CHARACTER_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_REQUEST_CHARACTER_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_REQUEST_CHARACTER_INFO::CopyFrom(const CS_REQUEST_CHARACTER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_REQUEST_CHARACTER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REQUEST_CHARACTER_INFO::IsInitialized() const {
  return true;
}

void CS_REQUEST_CHARACTER_INFO::InternalSwap(CS_REQUEST_CHARACTER_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_REQUEST_CHARACTER_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class CS_REQUEST_ITEM_INFO::_Internal {
 public:
};

CS_REQUEST_ITEM_INFO::CS_REQUEST_ITEM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_REQUEST_ITEM_INFO)
}
CS_REQUEST_ITEM_INFO::CS_REQUEST_ITEM_INFO(const CS_REQUEST_ITEM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_REQUEST_ITEM_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_REQUEST_ITEM_INFO)
}

inline void CS_REQUEST_ITEM_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_REQUEST_ITEM_INFO::~CS_REQUEST_ITEM_INFO() {
  // @@protoc_insertion_point(destructor:game.CS_REQUEST_ITEM_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_REQUEST_ITEM_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CS_REQUEST_ITEM_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_REQUEST_ITEM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_REQUEST_ITEM_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_REQUEST_ITEM_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_REQUEST_ITEM_INFO.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_REQUEST_ITEM_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_REQUEST_ITEM_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_REQUEST_ITEM_INFO.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_REQUEST_ITEM_INFO)
  return target;
}

size_t CS_REQUEST_ITEM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_REQUEST_ITEM_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_REQUEST_ITEM_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_REQUEST_ITEM_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_REQUEST_ITEM_INFO::GetClassData() const { return &_class_data_; }


void CS_REQUEST_ITEM_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_REQUEST_ITEM_INFO*>(&to_msg);
  auto& from = static_cast<const CS_REQUEST_ITEM_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_REQUEST_ITEM_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_REQUEST_ITEM_INFO::CopyFrom(const CS_REQUEST_ITEM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_REQUEST_ITEM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REQUEST_ITEM_INFO::IsInitialized() const {
  return true;
}

void CS_REQUEST_ITEM_INFO::InternalSwap(CS_REQUEST_ITEM_INFO* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_REQUEST_ITEM_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class CS_SIGNUP_REQUEST::_Internal {
 public:
};

CS_SIGNUP_REQUEST::CS_SIGNUP_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_SIGNUP_REQUEST)
}
CS_SIGNUP_REQUEST::CS_SIGNUP_REQUEST(const CS_SIGNUP_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_SIGNUP_REQUEST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_SIGNUP_REQUEST)
}

inline void CS_SIGNUP_REQUEST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_SIGNUP_REQUEST::~CS_SIGNUP_REQUEST() {
  // @@protoc_insertion_point(destructor:game.CS_SIGNUP_REQUEST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_SIGNUP_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
}

void CS_SIGNUP_REQUEST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_SIGNUP_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_SIGNUP_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_SIGNUP_REQUEST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_SIGNUP_REQUEST.id"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_SIGNUP_REQUEST.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_SIGNUP_REQUEST.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_SIGNUP_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_SIGNUP_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_SIGNUP_REQUEST.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_SIGNUP_REQUEST.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_SIGNUP_REQUEST.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_SIGNUP_REQUEST)
  return target;
}

size_t CS_SIGNUP_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_SIGNUP_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_SIGNUP_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_SIGNUP_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_SIGNUP_REQUEST::GetClassData() const { return &_class_data_; }


void CS_SIGNUP_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_SIGNUP_REQUEST*>(&to_msg);
  auto& from = static_cast<const CS_SIGNUP_REQUEST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_SIGNUP_REQUEST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_SIGNUP_REQUEST::CopyFrom(const CS_SIGNUP_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_SIGNUP_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SIGNUP_REQUEST::IsInitialized() const {
  return true;
}

void CS_SIGNUP_REQUEST::InternalSwap(CS_SIGNUP_REQUEST* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SIGNUP_REQUEST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class SC_FIND_ID_RESPONSE::_Internal {
 public:
};

SC_FIND_ID_RESPONSE::SC_FIND_ID_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_FIND_ID_RESPONSE)
}
SC_FIND_ID_RESPONSE::SC_FIND_ID_RESPONSE(const SC_FIND_ID_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_FIND_ID_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:game.SC_FIND_ID_RESPONSE)
}

inline void SC_FIND_ID_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SC_FIND_ID_RESPONSE::~SC_FIND_ID_RESPONSE() {
  // @@protoc_insertion_point(destructor:game.SC_FIND_ID_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_FIND_ID_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void SC_FIND_ID_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_FIND_ID_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_FIND_ID_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_FIND_ID_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SC_FIND_ID_RESPONSE.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_FIND_ID_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_FIND_ID_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SC_FIND_ID_RESPONSE.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_FIND_ID_RESPONSE)
  return target;
}

size_t SC_FIND_ID_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_FIND_ID_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_FIND_ID_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_FIND_ID_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_FIND_ID_RESPONSE::GetClassData() const { return &_class_data_; }


void SC_FIND_ID_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_FIND_ID_RESPONSE*>(&to_msg);
  auto& from = static_cast<const SC_FIND_ID_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_FIND_ID_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_FIND_ID_RESPONSE::CopyFrom(const SC_FIND_ID_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_FIND_ID_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FIND_ID_RESPONSE::IsInitialized() const {
  return true;
}

void SC_FIND_ID_RESPONSE::InternalSwap(SC_FIND_ID_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_FIND_ID_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class SC_FIND_PW_RESPONSE::_Internal {
 public:
};

SC_FIND_PW_RESPONSE::SC_FIND_PW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_FIND_PW_RESPONSE)
}
SC_FIND_PW_RESPONSE::SC_FIND_PW_RESPONSE(const SC_FIND_PW_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_FIND_PW_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pw_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pw().empty()) {
    _this->_impl_.pw_.Set(from._internal_pw(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:game.SC_FIND_PW_RESPONSE)
}

inline void SC_FIND_PW_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pw_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SC_FIND_PW_RESPONSE::~SC_FIND_PW_RESPONSE() {
  // @@protoc_insertion_point(destructor:game.SC_FIND_PW_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_FIND_PW_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pw_.Destroy();
}

void SC_FIND_PW_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_FIND_PW_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_FIND_PW_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pw_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_FIND_PW_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SC_FIND_PW_RESPONSE.pw"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_FIND_PW_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_FIND_PW_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SC_FIND_PW_RESPONSE.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_FIND_PW_RESPONSE)
  return target;
}

size_t SC_FIND_PW_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_FIND_PW_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_FIND_PW_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_FIND_PW_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_FIND_PW_RESPONSE::GetClassData() const { return &_class_data_; }


void SC_FIND_PW_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_FIND_PW_RESPONSE*>(&to_msg);
  auto& from = static_cast<const SC_FIND_PW_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_FIND_PW_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pw().empty()) {
    _this->_internal_set_pw(from._internal_pw());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_FIND_PW_RESPONSE::CopyFrom(const SC_FIND_PW_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_FIND_PW_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FIND_PW_RESPONSE::IsInitialized() const {
  return true;
}

void SC_FIND_PW_RESPONSE::InternalSwap(SC_FIND_PW_RESPONSE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pw_, lhs_arena,
      &other->_impl_.pw_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_FIND_PW_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class SC_LOGIN_RESPONSE::_Internal {
 public:
};

SC_LOGIN_RESPONSE::SC_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_LOGIN_RESPONSE)
}
SC_LOGIN_RESPONSE::SC_LOGIN_RESPONSE(const SC_LOGIN_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_LOGIN_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.errorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errorcode_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.errorcode_));
  // @@protoc_insertion_point(copy_constructor:game.SC_LOGIN_RESPONSE)
}

inline void SC_LOGIN_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.errorcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_LOGIN_RESPONSE::~SC_LOGIN_RESPONSE() {
  // @@protoc_insertion_point(destructor:game.SC_LOGIN_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_LOGIN_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_LOGIN_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_LOGIN_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_LOGIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.errorcode_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_LOGIN_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_LOGIN_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_LOGIN_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_LOGIN_RESPONSE)
  return target;
}

size_t SC_LOGIN_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_LOGIN_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_LOGIN_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_LOGIN_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_LOGIN_RESPONSE::GetClassData() const { return &_class_data_; }


void SC_LOGIN_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_LOGIN_RESPONSE*>(&to_msg);
  auto& from = static_cast<const SC_LOGIN_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_LOGIN_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_LOGIN_RESPONSE::CopyFrom(const SC_LOGIN_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_LOGIN_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LOGIN_RESPONSE::IsInitialized() const {
  return true;
}

void SC_LOGIN_RESPONSE::InternalSwap(SC_LOGIN_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_LOGIN_RESPONSE, _impl_.errorcode_)
      + sizeof(SC_LOGIN_RESPONSE::_impl_.errorcode_)
      - PROTOBUF_FIELD_OFFSET(SC_LOGIN_RESPONSE, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_LOGIN_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class SC_REQUEST_ITEM_INFO::_Internal {
 public:
};

SC_REQUEST_ITEM_INFO::SC_REQUEST_ITEM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_REQUEST_ITEM_INFO)
}
SC_REQUEST_ITEM_INFO::SC_REQUEST_ITEM_INFO(const SC_REQUEST_ITEM_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_REQUEST_ITEM_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iteminfo_){from._impl_.iteminfo_}
    , /*decltype(_impl_._iteminfo_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.SC_REQUEST_ITEM_INFO)
}

inline void SC_REQUEST_ITEM_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iteminfo_){arena}
    , /*decltype(_impl_._iteminfo_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_REQUEST_ITEM_INFO::~SC_REQUEST_ITEM_INFO() {
  // @@protoc_insertion_point(destructor:game.SC_REQUEST_ITEM_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_REQUEST_ITEM_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iteminfo_.~RepeatedField();
}

void SC_REQUEST_ITEM_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_REQUEST_ITEM_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_REQUEST_ITEM_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iteminfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_REQUEST_ITEM_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 itemInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_iteminfo(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_iteminfo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_REQUEST_ITEM_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_REQUEST_ITEM_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 itemInfo = 1;
  {
    int byte_size = _impl_._iteminfo_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_iteminfo(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_REQUEST_ITEM_INFO)
  return target;
}

size_t SC_REQUEST_ITEM_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_REQUEST_ITEM_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 itemInfo = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.iteminfo_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._iteminfo_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_REQUEST_ITEM_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_REQUEST_ITEM_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_REQUEST_ITEM_INFO::GetClassData() const { return &_class_data_; }


void SC_REQUEST_ITEM_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_REQUEST_ITEM_INFO*>(&to_msg);
  auto& from = static_cast<const SC_REQUEST_ITEM_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_REQUEST_ITEM_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.iteminfo_.MergeFrom(from._impl_.iteminfo_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_REQUEST_ITEM_INFO::CopyFrom(const SC_REQUEST_ITEM_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_REQUEST_ITEM_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_REQUEST_ITEM_INFO::IsInitialized() const {
  return true;
}

void SC_REQUEST_ITEM_INFO::InternalSwap(SC_REQUEST_ITEM_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.iteminfo_.InternalSwap(&other->_impl_.iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_REQUEST_ITEM_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class SC_RESPONSE_CHARACTER_INFO::_Internal {
 public:
  static const ::game::PlayerInfo& playerinfo(const SC_RESPONSE_CHARACTER_INFO* msg);
};

const ::game::PlayerInfo&
SC_RESPONSE_CHARACTER_INFO::_Internal::playerinfo(const SC_RESPONSE_CHARACTER_INFO* msg) {
  return *msg->_impl_.playerinfo_;
}
SC_RESPONSE_CHARACTER_INFO::SC_RESPONSE_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_RESPONSE_CHARACTER_INFO)
}
SC_RESPONSE_CHARACTER_INFO::SC_RESPONSE_CHARACTER_INFO(const SC_RESPONSE_CHARACTER_INFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_RESPONSE_CHARACTER_INFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::game::PlayerInfo(*from._impl_.playerinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:game.SC_RESPONSE_CHARACTER_INFO)
}

inline void SC_RESPONSE_CHARACTER_INFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_RESPONSE_CHARACTER_INFO::~SC_RESPONSE_CHARACTER_INFO() {
  // @@protoc_insertion_point(destructor:game.SC_RESPONSE_CHARACTER_INFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_RESPONSE_CHARACTER_INFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void SC_RESPONSE_CHARACTER_INFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_RESPONSE_CHARACTER_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_RESPONSE_CHARACTER_INFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_RESPONSE_CHARACTER_INFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.PlayerInfo playerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_RESPONSE_CHARACTER_INFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_RESPONSE_CHARACTER_INFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.PlayerInfo playerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_RESPONSE_CHARACTER_INFO)
  return target;
}

size_t SC_RESPONSE_CHARACTER_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_RESPONSE_CHARACTER_INFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.PlayerInfo playerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_RESPONSE_CHARACTER_INFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_RESPONSE_CHARACTER_INFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_RESPONSE_CHARACTER_INFO::GetClassData() const { return &_class_data_; }


void SC_RESPONSE_CHARACTER_INFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_RESPONSE_CHARACTER_INFO*>(&to_msg);
  auto& from = static_cast<const SC_RESPONSE_CHARACTER_INFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_RESPONSE_CHARACTER_INFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::game::PlayerInfo::MergeFrom(
        from._internal_playerinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_RESPONSE_CHARACTER_INFO::CopyFrom(const SC_RESPONSE_CHARACTER_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_RESPONSE_CHARACTER_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RESPONSE_CHARACTER_INFO::IsInitialized() const {
  return true;
}

void SC_RESPONSE_CHARACTER_INFO::InternalSwap(SC_RESPONSE_CHARACTER_INFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerinfo_, other->_impl_.playerinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_RESPONSE_CHARACTER_INFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class SC_SIGNUP_RESPONSE::_Internal {
 public:
};

SC_SIGNUP_RESPONSE::SC_SIGNUP_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_SIGNUP_RESPONSE)
}
SC_SIGNUP_RESPONSE::SC_SIGNUP_RESPONSE(const SC_SIGNUP_RESPONSE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_SIGNUP_RESPONSE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.errorcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errorcode_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.errorcode_));
  // @@protoc_insertion_point(copy_constructor:game.SC_SIGNUP_RESPONSE)
}

inline void SC_SIGNUP_RESPONSE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.errorcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_SIGNUP_RESPONSE::~SC_SIGNUP_RESPONSE() {
  // @@protoc_insertion_point(destructor:game.SC_SIGNUP_RESPONSE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_SIGNUP_RESPONSE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_SIGNUP_RESPONSE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_SIGNUP_RESPONSE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_SIGNUP_RESPONSE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.errorcode_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SIGNUP_RESPONSE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_SIGNUP_RESPONSE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_SIGNUP_RESPONSE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_SIGNUP_RESPONSE)
  return target;
}

size_t SC_SIGNUP_RESPONSE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_SIGNUP_RESPONSE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 errorCode = 2;
  if (this->_internal_errorcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_SIGNUP_RESPONSE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_SIGNUP_RESPONSE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_SIGNUP_RESPONSE::GetClassData() const { return &_class_data_; }


void SC_SIGNUP_RESPONSE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_SIGNUP_RESPONSE*>(&to_msg);
  auto& from = static_cast<const SC_SIGNUP_RESPONSE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_SIGNUP_RESPONSE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_errorcode() != 0) {
    _this->_internal_set_errorcode(from._internal_errorcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_SIGNUP_RESPONSE::CopyFrom(const SC_SIGNUP_RESPONSE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_SIGNUP_RESPONSE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SIGNUP_RESPONSE::IsInitialized() const {
  return true;
}

void SC_SIGNUP_RESPONSE::InternalSwap(SC_SIGNUP_RESPONSE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SIGNUP_RESPONSE, _impl_.errorcode_)
      + sizeof(SC_SIGNUP_RESPONSE::_impl_.errorcode_)
      - PROTOBUF_FIELD_OFFSET(SC_SIGNUP_RESPONSE, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SIGNUP_RESPONSE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class CS_ACCEPT_PARTY::_Internal {
 public:
};

CS_ACCEPT_PARTY::CS_ACCEPT_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_ACCEPT_PARTY)
}
CS_ACCEPT_PARTY::CS_ACCEPT_PARTY(const CS_ACCEPT_PARTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_ACCEPT_PARTY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fromplayerid_){}
    , decltype(_impl_.toplayerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fromplayerid_, &from._impl_.fromplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.toplayerid_) -
    reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  // @@protoc_insertion_point(copy_constructor:game.CS_ACCEPT_PARTY)
}

inline void CS_ACCEPT_PARTY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fromplayerid_){0u}
    , decltype(_impl_.toplayerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_ACCEPT_PARTY::~CS_ACCEPT_PARTY() {
  // @@protoc_insertion_point(destructor:game.CS_ACCEPT_PARTY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_ACCEPT_PARTY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_ACCEPT_PARTY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_ACCEPT_PARTY::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_ACCEPT_PARTY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fromplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.toplayerid_) -
      reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ACCEPT_PARTY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 FromPlayerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fromplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ToPlayerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.toplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_ACCEPT_PARTY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_ACCEPT_PARTY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fromplayerid(), target);
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_toplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_ACCEPT_PARTY)
  return target;
}

size_t CS_ACCEPT_PARTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_ACCEPT_PARTY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromplayerid());
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_ACCEPT_PARTY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_ACCEPT_PARTY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_ACCEPT_PARTY::GetClassData() const { return &_class_data_; }


void CS_ACCEPT_PARTY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_ACCEPT_PARTY*>(&to_msg);
  auto& from = static_cast<const CS_ACCEPT_PARTY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_ACCEPT_PARTY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromplayerid() != 0) {
    _this->_internal_set_fromplayerid(from._internal_fromplayerid());
  }
  if (from._internal_toplayerid() != 0) {
    _this->_internal_set_toplayerid(from._internal_toplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_ACCEPT_PARTY::CopyFrom(const CS_ACCEPT_PARTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_ACCEPT_PARTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ACCEPT_PARTY::IsInitialized() const {
  return true;
}

void CS_ACCEPT_PARTY::InternalSwap(CS_ACCEPT_PARTY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_ACCEPT_PARTY, _impl_.toplayerid_)
      + sizeof(CS_ACCEPT_PARTY::_impl_.toplayerid_)
      - PROTOBUF_FIELD_OFFSET(CS_ACCEPT_PARTY, _impl_.fromplayerid_)>(
          reinterpret_cast<char*>(&_impl_.fromplayerid_),
          reinterpret_cast<char*>(&other->_impl_.fromplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ACCEPT_PARTY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class CS_CANCEL_ENTERING_DUNGEON::_Internal {
 public:
};

CS_CANCEL_ENTERING_DUNGEON::CS_CANCEL_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_CANCEL_ENTERING_DUNGEON)
}
CS_CANCEL_ENTERING_DUNGEON::CS_CANCEL_ENTERING_DUNGEON(const CS_CANCEL_ENTERING_DUNGEON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_CANCEL_ENTERING_DUNGEON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bcancel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bcancel_ = from._impl_.bcancel_;
  // @@protoc_insertion_point(copy_constructor:game.CS_CANCEL_ENTERING_DUNGEON)
}

inline void CS_CANCEL_ENTERING_DUNGEON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bcancel_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_CANCEL_ENTERING_DUNGEON::~CS_CANCEL_ENTERING_DUNGEON() {
  // @@protoc_insertion_point(destructor:game.CS_CANCEL_ENTERING_DUNGEON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_CANCEL_ENTERING_DUNGEON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_CANCEL_ENTERING_DUNGEON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_CANCEL_ENTERING_DUNGEON::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_CANCEL_ENTERING_DUNGEON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bcancel_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_CANCEL_ENTERING_DUNGEON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bCancel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bcancel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_CANCEL_ENTERING_DUNGEON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_CANCEL_ENTERING_DUNGEON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bCancel = 1;
  if (this->_internal_bcancel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bcancel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_CANCEL_ENTERING_DUNGEON)
  return target;
}

size_t CS_CANCEL_ENTERING_DUNGEON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_CANCEL_ENTERING_DUNGEON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bCancel = 1;
  if (this->_internal_bcancel() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_CANCEL_ENTERING_DUNGEON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_CANCEL_ENTERING_DUNGEON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_CANCEL_ENTERING_DUNGEON::GetClassData() const { return &_class_data_; }


void CS_CANCEL_ENTERING_DUNGEON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_CANCEL_ENTERING_DUNGEON*>(&to_msg);
  auto& from = static_cast<const CS_CANCEL_ENTERING_DUNGEON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_CANCEL_ENTERING_DUNGEON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bcancel() != 0) {
    _this->_internal_set_bcancel(from._internal_bcancel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_CANCEL_ENTERING_DUNGEON::CopyFrom(const CS_CANCEL_ENTERING_DUNGEON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_CANCEL_ENTERING_DUNGEON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CANCEL_ENTERING_DUNGEON::IsInitialized() const {
  return true;
}

void CS_CANCEL_ENTERING_DUNGEON::InternalSwap(CS_CANCEL_ENTERING_DUNGEON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bcancel_, other->_impl_.bcancel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CANCEL_ENTERING_DUNGEON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class CS_CREATE_MONSTER::_Internal {
 public:
  static const ::game::Position& monsterpos(const CS_CREATE_MONSTER* msg);
};

const ::game::Position&
CS_CREATE_MONSTER::_Internal::monsterpos(const CS_CREATE_MONSTER* msg) {
  return *msg->_impl_.monsterpos_;
}
CS_CREATE_MONSTER::CS_CREATE_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_CREATE_MONSTER)
}
CS_CREATE_MONSTER::CS_CREATE_MONSTER(const CS_CREATE_MONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_CREATE_MONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterpos_){nullptr}
    , decltype(_impl_.monstertype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_monsterpos()) {
    _this->_impl_.monsterpos_ = new ::game::Position(*from._impl_.monsterpos_);
  }
  _this->_impl_.monstertype_ = from._impl_.monstertype_;
  // @@protoc_insertion_point(copy_constructor:game.CS_CREATE_MONSTER)
}

inline void CS_CREATE_MONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterpos_){nullptr}
    , decltype(_impl_.monstertype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_CREATE_MONSTER::~CS_CREATE_MONSTER() {
  // @@protoc_insertion_point(destructor:game.CS_CREATE_MONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_CREATE_MONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.monsterpos_;
}

void CS_CREATE_MONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_CREATE_MONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_CREATE_MONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.monsterpos_ != nullptr) {
    delete _impl_.monsterpos_;
  }
  _impl_.monsterpos_ = nullptr;
  _impl_.monstertype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_CREATE_MONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 monsterType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monstertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position monsterPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_monsterpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_CREATE_MONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_CREATE_MONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monsterType = 1;
  if (this->_internal_monstertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_monstertype(), target);
  }

  // .game.Position monsterPos = 2;
  if (this->_internal_has_monsterpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::monsterpos(this),
        _Internal::monsterpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_CREATE_MONSTER)
  return target;
}

size_t CS_CREATE_MONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_CREATE_MONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.Position monsterPos = 2;
  if (this->_internal_has_monsterpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monsterpos_);
  }

  // uint32 monsterType = 1;
  if (this->_internal_monstertype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monstertype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_CREATE_MONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_CREATE_MONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_CREATE_MONSTER::GetClassData() const { return &_class_data_; }


void CS_CREATE_MONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_CREATE_MONSTER*>(&to_msg);
  auto& from = static_cast<const CS_CREATE_MONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_CREATE_MONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_monsterpos()) {
    _this->_internal_mutable_monsterpos()->::game::Position::MergeFrom(
        from._internal_monsterpos());
  }
  if (from._internal_monstertype() != 0) {
    _this->_internal_set_monstertype(from._internal_monstertype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_CREATE_MONSTER::CopyFrom(const CS_CREATE_MONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_CREATE_MONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CREATE_MONSTER::IsInitialized() const {
  return true;
}

void CS_CREATE_MONSTER::InternalSwap(CS_CREATE_MONSTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_CREATE_MONSTER, _impl_.monstertype_)
      + sizeof(CS_CREATE_MONSTER::_impl_.monstertype_)
      - PROTOBUF_FIELD_OFFSET(CS_CREATE_MONSTER, _impl_.monsterpos_)>(
          reinterpret_cast<char*>(&_impl_.monsterpos_),
          reinterpret_cast<char*>(&other->_impl_.monsterpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CREATE_MONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class CS_MAKE_PARTY::_Internal {
 public:
};

CS_MAKE_PARTY::CS_MAKE_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MAKE_PARTY)
}
CS_MAKE_PARTY::CS_MAKE_PARTY(const CS_MAKE_PARTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MAKE_PARTY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fromplayerid_){}
    , decltype(_impl_.toplayerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fromplayerid_, &from._impl_.fromplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.toplayerid_) -
    reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  // @@protoc_insertion_point(copy_constructor:game.CS_MAKE_PARTY)
}

inline void CS_MAKE_PARTY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fromplayerid_){0u}
    , decltype(_impl_.toplayerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MAKE_PARTY::~CS_MAKE_PARTY() {
  // @@protoc_insertion_point(destructor:game.CS_MAKE_PARTY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MAKE_PARTY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_MAKE_PARTY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MAKE_PARTY::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MAKE_PARTY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fromplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.toplayerid_) -
      reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MAKE_PARTY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 FromPlayerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fromplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ToPlayerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.toplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MAKE_PARTY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MAKE_PARTY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fromplayerid(), target);
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_toplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MAKE_PARTY)
  return target;
}

size_t CS_MAKE_PARTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MAKE_PARTY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromplayerid());
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MAKE_PARTY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MAKE_PARTY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MAKE_PARTY::GetClassData() const { return &_class_data_; }


void CS_MAKE_PARTY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MAKE_PARTY*>(&to_msg);
  auto& from = static_cast<const CS_MAKE_PARTY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MAKE_PARTY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromplayerid() != 0) {
    _this->_internal_set_fromplayerid(from._internal_fromplayerid());
  }
  if (from._internal_toplayerid() != 0) {
    _this->_internal_set_toplayerid(from._internal_toplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MAKE_PARTY::CopyFrom(const CS_MAKE_PARTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MAKE_PARTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MAKE_PARTY::IsInitialized() const {
  return true;
}

void CS_MAKE_PARTY::InternalSwap(CS_MAKE_PARTY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MAKE_PARTY, _impl_.toplayerid_)
      + sizeof(CS_MAKE_PARTY::_impl_.toplayerid_)
      - PROTOBUF_FIELD_OFFSET(CS_MAKE_PARTY, _impl_.fromplayerid_)>(
          reinterpret_cast<char*>(&_impl_.fromplayerid_),
          reinterpret_cast<char*>(&other->_impl_.fromplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MAKE_PARTY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class CS_REGISTER_REQUEST::_Internal {
 public:
};

CS_REGISTER_REQUEST::CS_REGISTER_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_REGISTER_REQUEST)
}
CS_REGISTER_REQUEST::CS_REGISTER_REQUEST(const CS_REGISTER_REQUEST& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_REGISTER_REQUEST* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.brequest_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.brequest_ = from._impl_.brequest_;
  // @@protoc_insertion_point(copy_constructor:game.CS_REGISTER_REQUEST)
}

inline void CS_REGISTER_REQUEST::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.brequest_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_REGISTER_REQUEST::~CS_REGISTER_REQUEST() {
  // @@protoc_insertion_point(destructor:game.CS_REGISTER_REQUEST)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_REGISTER_REQUEST::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_REGISTER_REQUEST::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_REGISTER_REQUEST::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_REGISTER_REQUEST)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brequest_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_REGISTER_REQUEST::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.brequest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_REGISTER_REQUEST::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_REGISTER_REQUEST)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bRequest = 1;
  if (this->_internal_brequest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_brequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_REGISTER_REQUEST)
  return target;
}

size_t CS_REGISTER_REQUEST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_REGISTER_REQUEST)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bRequest = 1;
  if (this->_internal_brequest() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_REGISTER_REQUEST::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_REGISTER_REQUEST::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_REGISTER_REQUEST::GetClassData() const { return &_class_data_; }


void CS_REGISTER_REQUEST::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_REGISTER_REQUEST*>(&to_msg);
  auto& from = static_cast<const CS_REGISTER_REQUEST&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_REGISTER_REQUEST)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_brequest() != 0) {
    _this->_internal_set_brequest(from._internal_brequest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_REGISTER_REQUEST::CopyFrom(const CS_REGISTER_REQUEST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_REGISTER_REQUEST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REGISTER_REQUEST::IsInitialized() const {
  return true;
}

void CS_REGISTER_REQUEST::InternalSwap(CS_REGISTER_REQUEST* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.brequest_, other->_impl_.brequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_REGISTER_REQUEST::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class CS_REQUEST_ENTER_DUNGEON::_Internal {
 public:
};

CS_REQUEST_ENTER_DUNGEON::CS_REQUEST_ENTER_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_REQUEST_ENTER_DUNGEON)
}
CS_REQUEST_ENTER_DUNGEON::CS_REQUEST_ENTER_DUNGEON(const CS_REQUEST_ENTER_DUNGEON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_REQUEST_ENTER_DUNGEON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.benter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.benter_ = from._impl_.benter_;
  // @@protoc_insertion_point(copy_constructor:game.CS_REQUEST_ENTER_DUNGEON)
}

inline void CS_REQUEST_ENTER_DUNGEON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.benter_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_REQUEST_ENTER_DUNGEON::~CS_REQUEST_ENTER_DUNGEON() {
  // @@protoc_insertion_point(destructor:game.CS_REQUEST_ENTER_DUNGEON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_REQUEST_ENTER_DUNGEON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_REQUEST_ENTER_DUNGEON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_REQUEST_ENTER_DUNGEON::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_REQUEST_ENTER_DUNGEON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benter_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_REQUEST_ENTER_DUNGEON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bEnter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.benter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_REQUEST_ENTER_DUNGEON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_REQUEST_ENTER_DUNGEON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bEnter = 1;
  if (this->_internal_benter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_benter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_REQUEST_ENTER_DUNGEON)
  return target;
}

size_t CS_REQUEST_ENTER_DUNGEON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_REQUEST_ENTER_DUNGEON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bEnter = 1;
  if (this->_internal_benter() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_REQUEST_ENTER_DUNGEON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_REQUEST_ENTER_DUNGEON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_REQUEST_ENTER_DUNGEON::GetClassData() const { return &_class_data_; }


void CS_REQUEST_ENTER_DUNGEON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_REQUEST_ENTER_DUNGEON*>(&to_msg);
  auto& from = static_cast<const CS_REQUEST_ENTER_DUNGEON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_REQUEST_ENTER_DUNGEON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_benter() != 0) {
    _this->_internal_set_benter(from._internal_benter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_REQUEST_ENTER_DUNGEON::CopyFrom(const CS_REQUEST_ENTER_DUNGEON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_REQUEST_ENTER_DUNGEON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REQUEST_ENTER_DUNGEON::IsInitialized() const {
  return true;
}

void CS_REQUEST_ENTER_DUNGEON::InternalSwap(CS_REQUEST_ENTER_DUNGEON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.benter_, other->_impl_.benter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_REQUEST_ENTER_DUNGEON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class CS_RESPONSE_ENTER_DUNGEON_END::_Internal {
 public:
};

CS_RESPONSE_ENTER_DUNGEON_END::CS_RESPONSE_ENTER_DUNGEON_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_RESPONSE_ENTER_DUNGEON_END)
}
CS_RESPONSE_ENTER_DUNGEON_END::CS_RESPONSE_ENTER_DUNGEON_END(const CS_RESPONSE_ENTER_DUNGEON_END& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_RESPONSE_ENTER_DUNGEON_END* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.benterend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.benterend_ = from._impl_.benterend_;
  // @@protoc_insertion_point(copy_constructor:game.CS_RESPONSE_ENTER_DUNGEON_END)
}

inline void CS_RESPONSE_ENTER_DUNGEON_END::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.benterend_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_RESPONSE_ENTER_DUNGEON_END::~CS_RESPONSE_ENTER_DUNGEON_END() {
  // @@protoc_insertion_point(destructor:game.CS_RESPONSE_ENTER_DUNGEON_END)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_RESPONSE_ENTER_DUNGEON_END::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_RESPONSE_ENTER_DUNGEON_END::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_RESPONSE_ENTER_DUNGEON_END::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_RESPONSE_ENTER_DUNGEON_END)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benterend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_RESPONSE_ENTER_DUNGEON_END::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bEnterEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.benterend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_RESPONSE_ENTER_DUNGEON_END::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_RESPONSE_ENTER_DUNGEON_END)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bEnterEnd = 1;
  if (this->_internal_benterend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_benterend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_RESPONSE_ENTER_DUNGEON_END)
  return target;
}

size_t CS_RESPONSE_ENTER_DUNGEON_END::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_RESPONSE_ENTER_DUNGEON_END)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bEnterEnd = 1;
  if (this->_internal_benterend() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_RESPONSE_ENTER_DUNGEON_END::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_RESPONSE_ENTER_DUNGEON_END::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_RESPONSE_ENTER_DUNGEON_END::GetClassData() const { return &_class_data_; }


void CS_RESPONSE_ENTER_DUNGEON_END::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_RESPONSE_ENTER_DUNGEON_END*>(&to_msg);
  auto& from = static_cast<const CS_RESPONSE_ENTER_DUNGEON_END&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_RESPONSE_ENTER_DUNGEON_END)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_benterend() != 0) {
    _this->_internal_set_benterend(from._internal_benterend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_RESPONSE_ENTER_DUNGEON_END::CopyFrom(const CS_RESPONSE_ENTER_DUNGEON_END& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_RESPONSE_ENTER_DUNGEON_END)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_RESPONSE_ENTER_DUNGEON_END::IsInitialized() const {
  return true;
}

void CS_RESPONSE_ENTER_DUNGEON_END::InternalSwap(CS_RESPONSE_ENTER_DUNGEON_END* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.benterend_, other->_impl_.benterend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_RESPONSE_ENTER_DUNGEON_END::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class CS_SPAWN_CHARACTER::_Internal {
 public:
  static const ::game::Position& playerpos(const CS_SPAWN_CHARACTER* msg);
  static const ::game::PlayerInfo& playerinfo(const CS_SPAWN_CHARACTER* msg);
};

const ::game::Position&
CS_SPAWN_CHARACTER::_Internal::playerpos(const CS_SPAWN_CHARACTER* msg) {
  return *msg->_impl_.playerpos_;
}
const ::game::PlayerInfo&
CS_SPAWN_CHARACTER::_Internal::playerinfo(const CS_SPAWN_CHARACTER* msg) {
  return *msg->_impl_.playerinfo_;
}
CS_SPAWN_CHARACTER::CS_SPAWN_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_SPAWN_CHARACTER)
}
CS_SPAWN_CHARACTER::CS_SPAWN_CHARACTER(const CS_SPAWN_CHARACTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_SPAWN_CHARACTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerpos_){nullptr}
    , decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.camerayaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerpos()) {
    _this->_impl_.playerpos_ = new ::game::Position(*from._impl_.playerpos_);
  }
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::game::PlayerInfo(*from._impl_.playerinfo_);
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camerayaw_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  // @@protoc_insertion_point(copy_constructor:game.CS_SPAWN_CHARACTER)
}

inline void CS_SPAWN_CHARACTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerpos_){nullptr}
    , decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.camerayaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_SPAWN_CHARACTER::~CS_SPAWN_CHARACTER() {
  // @@protoc_insertion_point(destructor:game.CS_SPAWN_CHARACTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_SPAWN_CHARACTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerpos_;
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void CS_SPAWN_CHARACTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_SPAWN_CHARACTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_SPAWN_CHARACTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerpos_ != nullptr) {
    delete _impl_.playerpos_;
  }
  _impl_.playerpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camerayaw_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_SPAWN_CHARACTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position playerPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cameraYaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.camerayaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .game.PlayerInfo playerInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_SPAWN_CHARACTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_SPAWN_CHARACTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .game.Position playerPos = 2;
  if (this->_internal_has_playerpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::playerpos(this),
        _Internal::playerpos(this).GetCachedSize(), target, stream);
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_camerayaw(), target);
  }

  // .game.PlayerInfo playerInfo = 4;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_SPAWN_CHARACTER)
  return target;
}

size_t CS_SPAWN_CHARACTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_SPAWN_CHARACTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.Position playerPos = 2;
  if (this->_internal_has_playerpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerpos_);
  }

  // .game.PlayerInfo playerInfo = 4;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_SPAWN_CHARACTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_SPAWN_CHARACTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_SPAWN_CHARACTER::GetClassData() const { return &_class_data_; }


void CS_SPAWN_CHARACTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_SPAWN_CHARACTER*>(&to_msg);
  auto& from = static_cast<const CS_SPAWN_CHARACTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_SPAWN_CHARACTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerpos()) {
    _this->_internal_mutable_playerpos()->::game::Position::MergeFrom(
        from._internal_playerpos());
  }
  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::game::PlayerInfo::MergeFrom(
        from._internal_playerinfo());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = from._internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    _this->_internal_set_camerayaw(from._internal_camerayaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_SPAWN_CHARACTER::CopyFrom(const CS_SPAWN_CHARACTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_SPAWN_CHARACTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SPAWN_CHARACTER::IsInitialized() const {
  return true;
}

void CS_SPAWN_CHARACTER::InternalSwap(CS_SPAWN_CHARACTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_SPAWN_CHARACTER, _impl_.camerayaw_)
      + sizeof(CS_SPAWN_CHARACTER::_impl_.camerayaw_)
      - PROTOBUF_FIELD_OFFSET(CS_SPAWN_CHARACTER, _impl_.playerpos_)>(
          reinterpret_cast<char*>(&_impl_.playerpos_),
          reinterpret_cast<char*>(&other->_impl_.playerpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SPAWN_CHARACTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class CS_START_AI_CALCULATE::_Internal {
 public:
};

CS_START_AI_CALCULATE::CS_START_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_START_AI_CALCULATE)
}
CS_START_AI_CALCULATE::CS_START_AI_CALCULATE(const CS_START_AI_CALCULATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_START_AI_CALCULATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bstart_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bstart_ = from._impl_.bstart_;
  // @@protoc_insertion_point(copy_constructor:game.CS_START_AI_CALCULATE)
}

inline void CS_START_AI_CALCULATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bstart_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_START_AI_CALCULATE::~CS_START_AI_CALCULATE() {
  // @@protoc_insertion_point(destructor:game.CS_START_AI_CALCULATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_START_AI_CALCULATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_START_AI_CALCULATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_START_AI_CALCULATE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_START_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bstart_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_START_AI_CALCULATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bStart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_START_AI_CALCULATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_START_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bStart = 1;
  if (this->_internal_bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_START_AI_CALCULATE)
  return target;
}

size_t CS_START_AI_CALCULATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_START_AI_CALCULATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bStart = 1;
  if (this->_internal_bstart() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_START_AI_CALCULATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_START_AI_CALCULATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_START_AI_CALCULATE::GetClassData() const { return &_class_data_; }


void CS_START_AI_CALCULATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_START_AI_CALCULATE*>(&to_msg);
  auto& from = static_cast<const CS_START_AI_CALCULATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_START_AI_CALCULATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bstart() != 0) {
    _this->_internal_set_bstart(from._internal_bstart());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_START_AI_CALCULATE::CopyFrom(const CS_START_AI_CALCULATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_START_AI_CALCULATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_START_AI_CALCULATE::IsInitialized() const {
  return true;
}

void CS_START_AI_CALCULATE::InternalSwap(CS_START_AI_CALCULATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bstart_, other->_impl_.bstart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_START_AI_CALCULATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class CS_STOP_AI_CALCULATE::_Internal {
 public:
};

CS_STOP_AI_CALCULATE::CS_STOP_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_STOP_AI_CALCULATE)
}
CS_STOP_AI_CALCULATE::CS_STOP_AI_CALCULATE(const CS_STOP_AI_CALCULATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_STOP_AI_CALCULATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bstop_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bstop_ = from._impl_.bstop_;
  // @@protoc_insertion_point(copy_constructor:game.CS_STOP_AI_CALCULATE)
}

inline void CS_STOP_AI_CALCULATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bstop_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_STOP_AI_CALCULATE::~CS_STOP_AI_CALCULATE() {
  // @@protoc_insertion_point(destructor:game.CS_STOP_AI_CALCULATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_STOP_AI_CALCULATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_STOP_AI_CALCULATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_STOP_AI_CALCULATE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_STOP_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bstop_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_STOP_AI_CALCULATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bStop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bstop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_STOP_AI_CALCULATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_STOP_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bStop = 1;
  if (this->_internal_bstop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bstop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_STOP_AI_CALCULATE)
  return target;
}

size_t CS_STOP_AI_CALCULATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_STOP_AI_CALCULATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bStop = 1;
  if (this->_internal_bstop() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_STOP_AI_CALCULATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_STOP_AI_CALCULATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_STOP_AI_CALCULATE::GetClassData() const { return &_class_data_; }


void CS_STOP_AI_CALCULATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_STOP_AI_CALCULATE*>(&to_msg);
  auto& from = static_cast<const CS_STOP_AI_CALCULATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_STOP_AI_CALCULATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bstop() != 0) {
    _this->_internal_set_bstop(from._internal_bstop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_STOP_AI_CALCULATE::CopyFrom(const CS_STOP_AI_CALCULATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_STOP_AI_CALCULATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_STOP_AI_CALCULATE::IsInitialized() const {
  return true;
}

void CS_STOP_AI_CALCULATE::InternalSwap(CS_STOP_AI_CALCULATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bstop_, other->_impl_.bstop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_STOP_AI_CALCULATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class SC_ACCEPT_PARTY::_Internal {
 public:
  static const ::game::PlayerInfo& playerinfo(const SC_ACCEPT_PARTY* msg);
};

const ::game::PlayerInfo&
SC_ACCEPT_PARTY::_Internal::playerinfo(const SC_ACCEPT_PARTY* msg) {
  return *msg->_impl_.playerinfo_;
}
SC_ACCEPT_PARTY::SC_ACCEPT_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ACCEPT_PARTY)
}
SC_ACCEPT_PARTY::SC_ACCEPT_PARTY(const SC_ACCEPT_PARTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ACCEPT_PARTY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.fromplayerid_){}
    , decltype(_impl_.toplayerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::game::PlayerInfo(*from._impl_.playerinfo_);
  }
  ::memcpy(&_impl_.fromplayerid_, &from._impl_.fromplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.toplayerid_) -
    reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_ACCEPT_PARTY)
}

inline void SC_ACCEPT_PARTY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.fromplayerid_){0u}
    , decltype(_impl_.toplayerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ACCEPT_PARTY::~SC_ACCEPT_PARTY() {
  // @@protoc_insertion_point(destructor:game.SC_ACCEPT_PARTY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ACCEPT_PARTY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void SC_ACCEPT_PARTY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ACCEPT_PARTY::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ACCEPT_PARTY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  ::memset(&_impl_.fromplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.toplayerid_) -
      reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ACCEPT_PARTY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 FromPlayerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fromplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ToPlayerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.toplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.PlayerInfo playerInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ACCEPT_PARTY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ACCEPT_PARTY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fromplayerid(), target);
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_toplayerid(), target);
  }

  // .game.PlayerInfo playerInfo = 3;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ACCEPT_PARTY)
  return target;
}

size_t SC_ACCEPT_PARTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ACCEPT_PARTY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.PlayerInfo playerInfo = 3;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromplayerid());
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ACCEPT_PARTY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ACCEPT_PARTY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ACCEPT_PARTY::GetClassData() const { return &_class_data_; }


void SC_ACCEPT_PARTY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ACCEPT_PARTY*>(&to_msg);
  auto& from = static_cast<const SC_ACCEPT_PARTY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ACCEPT_PARTY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::game::PlayerInfo::MergeFrom(
        from._internal_playerinfo());
  }
  if (from._internal_fromplayerid() != 0) {
    _this->_internal_set_fromplayerid(from._internal_fromplayerid());
  }
  if (from._internal_toplayerid() != 0) {
    _this->_internal_set_toplayerid(from._internal_toplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ACCEPT_PARTY::CopyFrom(const SC_ACCEPT_PARTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ACCEPT_PARTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ACCEPT_PARTY::IsInitialized() const {
  return true;
}

void SC_ACCEPT_PARTY::InternalSwap(SC_ACCEPT_PARTY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ACCEPT_PARTY, _impl_.toplayerid_)
      + sizeof(SC_ACCEPT_PARTY::_impl_.toplayerid_)
      - PROTOBUF_FIELD_OFFSET(SC_ACCEPT_PARTY, _impl_.playerinfo_)>(
          reinterpret_cast<char*>(&_impl_.playerinfo_),
          reinterpret_cast<char*>(&other->_impl_.playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ACCEPT_PARTY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class SC_CANCEL_ENTERING_DUNGEON::_Internal {
 public:
};

SC_CANCEL_ENTERING_DUNGEON::SC_CANCEL_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CANCEL_ENTERING_DUNGEON)
}
SC_CANCEL_ENTERING_DUNGEON::SC_CANCEL_ENTERING_DUNGEON(const SC_CANCEL_ENTERING_DUNGEON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CANCEL_ENTERING_DUNGEON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bcancel_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bcancel_, &from._impl_.bcancel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.bcancel_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CANCEL_ENTERING_DUNGEON)
}

inline void SC_CANCEL_ENTERING_DUNGEON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bcancel_){false}
    , decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CANCEL_ENTERING_DUNGEON::~SC_CANCEL_ENTERING_DUNGEON() {
  // @@protoc_insertion_point(destructor:game.SC_CANCEL_ENTERING_DUNGEON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CANCEL_ENTERING_DUNGEON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_CANCEL_ENTERING_DUNGEON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CANCEL_ENTERING_DUNGEON::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CANCEL_ENTERING_DUNGEON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bcancel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.bcancel_)) + sizeof(_impl_.playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CANCEL_ENTERING_DUNGEON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bCancel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bcancel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CANCEL_ENTERING_DUNGEON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CANCEL_ENTERING_DUNGEON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bCancel = 1;
  if (this->_internal_bcancel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bcancel(), target);
  }

  // uint32 playerID = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CANCEL_ENTERING_DUNGEON)
  return target;
}

size_t SC_CANCEL_ENTERING_DUNGEON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CANCEL_ENTERING_DUNGEON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bCancel = 1;
  if (this->_internal_bcancel() != 0) {
    total_size += 1 + 1;
  }

  // uint32 playerID = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CANCEL_ENTERING_DUNGEON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CANCEL_ENTERING_DUNGEON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CANCEL_ENTERING_DUNGEON::GetClassData() const { return &_class_data_; }


void SC_CANCEL_ENTERING_DUNGEON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CANCEL_ENTERING_DUNGEON*>(&to_msg);
  auto& from = static_cast<const SC_CANCEL_ENTERING_DUNGEON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CANCEL_ENTERING_DUNGEON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bcancel() != 0) {
    _this->_internal_set_bcancel(from._internal_bcancel());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CANCEL_ENTERING_DUNGEON::CopyFrom(const SC_CANCEL_ENTERING_DUNGEON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CANCEL_ENTERING_DUNGEON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CANCEL_ENTERING_DUNGEON::IsInitialized() const {
  return true;
}

void SC_CANCEL_ENTERING_DUNGEON::InternalSwap(SC_CANCEL_ENTERING_DUNGEON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CANCEL_ENTERING_DUNGEON, _impl_.playerid_)
      + sizeof(SC_CANCEL_ENTERING_DUNGEON::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(SC_CANCEL_ENTERING_DUNGEON, _impl_.bcancel_)>(
          reinterpret_cast<char*>(&_impl_.bcancel_),
          reinterpret_cast<char*>(&other->_impl_.bcancel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CANCEL_ENTERING_DUNGEON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class SC_CREATE_MONSTER::_Internal {
 public:
  static const ::game::Position& monsterpos(const SC_CREATE_MONSTER* msg);
};

const ::game::Position&
SC_CREATE_MONSTER::_Internal::monsterpos(const SC_CREATE_MONSTER* msg) {
  return *msg->_impl_.monsterpos_;
}
SC_CREATE_MONSTER::SC_CREATE_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CREATE_MONSTER)
}
SC_CREATE_MONSTER::SC_CREATE_MONSTER(const SC_CREATE_MONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CREATE_MONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterpos_){nullptr}
    , decltype(_impl_.aiid_){}
    , decltype(_impl_.monstertype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_monsterpos()) {
    _this->_impl_.monsterpos_ = new ::game::Position(*from._impl_.monsterpos_);
  }
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monstertype_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.monstertype_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CREATE_MONSTER)
}

inline void SC_CREATE_MONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsterpos_){nullptr}
    , decltype(_impl_.aiid_){0u}
    , decltype(_impl_.monstertype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CREATE_MONSTER::~SC_CREATE_MONSTER() {
  // @@protoc_insertion_point(destructor:game.SC_CREATE_MONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CREATE_MONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.monsterpos_;
}

void SC_CREATE_MONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CREATE_MONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CREATE_MONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.monsterpos_ != nullptr) {
    delete _impl_.monsterpos_;
  }
  _impl_.monsterpos_ = nullptr;
  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monstertype_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.monstertype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CREATE_MONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 monsterType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.monstertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position monsterPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_monsterpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CREATE_MONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CREATE_MONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // uint32 monsterType = 2;
  if (this->_internal_monstertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_monstertype(), target);
  }

  // .game.Position monsterPos = 3;
  if (this->_internal_has_monsterpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::monsterpos(this),
        _Internal::monsterpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CREATE_MONSTER)
  return target;
}

size_t SC_CREATE_MONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CREATE_MONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.Position monsterPos = 3;
  if (this->_internal_has_monsterpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monsterpos_);
  }

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // uint32 monsterType = 2;
  if (this->_internal_monstertype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monstertype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CREATE_MONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CREATE_MONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CREATE_MONSTER::GetClassData() const { return &_class_data_; }


void SC_CREATE_MONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CREATE_MONSTER*>(&to_msg);
  auto& from = static_cast<const SC_CREATE_MONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CREATE_MONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_monsterpos()) {
    _this->_internal_mutable_monsterpos()->::game::Position::MergeFrom(
        from._internal_monsterpos());
  }
  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  if (from._internal_monstertype() != 0) {
    _this->_internal_set_monstertype(from._internal_monstertype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CREATE_MONSTER::CopyFrom(const SC_CREATE_MONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CREATE_MONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CREATE_MONSTER::IsInitialized() const {
  return true;
}

void SC_CREATE_MONSTER::InternalSwap(SC_CREATE_MONSTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CREATE_MONSTER, _impl_.monstertype_)
      + sizeof(SC_CREATE_MONSTER::_impl_.monstertype_)
      - PROTOBUF_FIELD_OFFSET(SC_CREATE_MONSTER, _impl_.monsterpos_)>(
          reinterpret_cast<char*>(&_impl_.monsterpos_),
          reinterpret_cast<char*>(&other->_impl_.monsterpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CREATE_MONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class SC_MAKE_PARTY::_Internal {
 public:
};

SC_MAKE_PARTY::SC_MAKE_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MAKE_PARTY)
}
SC_MAKE_PARTY::SC_MAKE_PARTY(const SC_MAKE_PARTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MAKE_PARTY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fromplayerid_){}
    , decltype(_impl_.toplayerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fromplayerid_, &from._impl_.fromplayerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.toplayerid_) -
    reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_MAKE_PARTY)
}

inline void SC_MAKE_PARTY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fromplayerid_){0u}
    , decltype(_impl_.toplayerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MAKE_PARTY::~SC_MAKE_PARTY() {
  // @@protoc_insertion_point(destructor:game.SC_MAKE_PARTY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MAKE_PARTY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_MAKE_PARTY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MAKE_PARTY::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MAKE_PARTY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fromplayerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.toplayerid_) -
      reinterpret_cast<char*>(&_impl_.fromplayerid_)) + sizeof(_impl_.toplayerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MAKE_PARTY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 FromPlayerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.fromplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ToPlayerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.toplayerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MAKE_PARTY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MAKE_PARTY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fromplayerid(), target);
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_toplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MAKE_PARTY)
  return target;
}

size_t SC_MAKE_PARTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MAKE_PARTY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 FromPlayerID = 1;
  if (this->_internal_fromplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fromplayerid());
  }

  // uint32 ToPlayerID = 2;
  if (this->_internal_toplayerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_toplayerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MAKE_PARTY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MAKE_PARTY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MAKE_PARTY::GetClassData() const { return &_class_data_; }


void SC_MAKE_PARTY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MAKE_PARTY*>(&to_msg);
  auto& from = static_cast<const SC_MAKE_PARTY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MAKE_PARTY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fromplayerid() != 0) {
    _this->_internal_set_fromplayerid(from._internal_fromplayerid());
  }
  if (from._internal_toplayerid() != 0) {
    _this->_internal_set_toplayerid(from._internal_toplayerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MAKE_PARTY::CopyFrom(const SC_MAKE_PARTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MAKE_PARTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MAKE_PARTY::IsInitialized() const {
  return true;
}

void SC_MAKE_PARTY::InternalSwap(SC_MAKE_PARTY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MAKE_PARTY, _impl_.toplayerid_)
      + sizeof(SC_MAKE_PARTY::_impl_.toplayerid_)
      - PROTOBUF_FIELD_OFFSET(SC_MAKE_PARTY, _impl_.fromplayerid_)>(
          reinterpret_cast<char*>(&_impl_.fromplayerid_),
          reinterpret_cast<char*>(&other->_impl_.fromplayerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MAKE_PARTY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class SC_PREPARE_ENTERING_DUNGEON::_Internal {
 public:
};

SC_PREPARE_ENTERING_DUNGEON::SC_PREPARE_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_PREPARE_ENTERING_DUNGEON)
}
SC_PREPARE_ENTERING_DUNGEON::SC_PREPARE_ENTERING_DUNGEON(const SC_PREPARE_ENTERING_DUNGEON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_PREPARE_ENTERING_DUNGEON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.benter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.benter_ = from._impl_.benter_;
  // @@protoc_insertion_point(copy_constructor:game.SC_PREPARE_ENTERING_DUNGEON)
}

inline void SC_PREPARE_ENTERING_DUNGEON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.benter_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_PREPARE_ENTERING_DUNGEON::~SC_PREPARE_ENTERING_DUNGEON() {
  // @@protoc_insertion_point(destructor:game.SC_PREPARE_ENTERING_DUNGEON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_PREPARE_ENTERING_DUNGEON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_PREPARE_ENTERING_DUNGEON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_PREPARE_ENTERING_DUNGEON::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_PREPARE_ENTERING_DUNGEON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benter_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_PREPARE_ENTERING_DUNGEON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bEnter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.benter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_PREPARE_ENTERING_DUNGEON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_PREPARE_ENTERING_DUNGEON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bEnter = 1;
  if (this->_internal_benter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_benter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_PREPARE_ENTERING_DUNGEON)
  return target;
}

size_t SC_PREPARE_ENTERING_DUNGEON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_PREPARE_ENTERING_DUNGEON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bEnter = 1;
  if (this->_internal_benter() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_PREPARE_ENTERING_DUNGEON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_PREPARE_ENTERING_DUNGEON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_PREPARE_ENTERING_DUNGEON::GetClassData() const { return &_class_data_; }


void SC_PREPARE_ENTERING_DUNGEON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_PREPARE_ENTERING_DUNGEON*>(&to_msg);
  auto& from = static_cast<const SC_PREPARE_ENTERING_DUNGEON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_PREPARE_ENTERING_DUNGEON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_benter() != 0) {
    _this->_internal_set_benter(from._internal_benter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_PREPARE_ENTERING_DUNGEON::CopyFrom(const SC_PREPARE_ENTERING_DUNGEON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_PREPARE_ENTERING_DUNGEON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PREPARE_ENTERING_DUNGEON::IsInitialized() const {
  return true;
}

void SC_PREPARE_ENTERING_DUNGEON::InternalSwap(SC_PREPARE_ENTERING_DUNGEON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.benter_, other->_impl_.benter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_PREPARE_ENTERING_DUNGEON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class SC_REMOVE_CHARACTER::_Internal {
 public:
};

SC_REMOVE_CHARACTER::SC_REMOVE_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_REMOVE_CHARACTER)
}
SC_REMOVE_CHARACTER::SC_REMOVE_CHARACTER(const SC_REMOVE_CHARACTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_REMOVE_CHARACTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:game.SC_REMOVE_CHARACTER)
}

inline void SC_REMOVE_CHARACTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_REMOVE_CHARACTER::~SC_REMOVE_CHARACTER() {
  // @@protoc_insertion_point(destructor:game.SC_REMOVE_CHARACTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_REMOVE_CHARACTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_REMOVE_CHARACTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_REMOVE_CHARACTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_REMOVE_CHARACTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_REMOVE_CHARACTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_REMOVE_CHARACTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_REMOVE_CHARACTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_REMOVE_CHARACTER)
  return target;
}

size_t SC_REMOVE_CHARACTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_REMOVE_CHARACTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_REMOVE_CHARACTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_REMOVE_CHARACTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_REMOVE_CHARACTER::GetClassData() const { return &_class_data_; }


void SC_REMOVE_CHARACTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_REMOVE_CHARACTER*>(&to_msg);
  auto& from = static_cast<const SC_REMOVE_CHARACTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_REMOVE_CHARACTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_REMOVE_CHARACTER::CopyFrom(const SC_REMOVE_CHARACTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_REMOVE_CHARACTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_REMOVE_CHARACTER::IsInitialized() const {
  return true;
}

void SC_REMOVE_CHARACTER::InternalSwap(SC_REMOVE_CHARACTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_REMOVE_CHARACTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// ===================================================================

class SC_RESPONSE_ENTER_DUNGEON_BEGIN::_Internal {
 public:
};

SC_RESPONSE_ENTER_DUNGEON_BEGIN::SC_RESPONSE_ENTER_DUNGEON_BEGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
}
SC_RESPONSE_ENTER_DUNGEON_BEGIN::SC_RESPONSE_ENTER_DUNGEON_BEGIN(const SC_RESPONSE_ENTER_DUNGEON_BEGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_RESPONSE_ENTER_DUNGEON_BEGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.benterbegin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.benterbegin_ = from._impl_.benterbegin_;
  // @@protoc_insertion_point(copy_constructor:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
}

inline void SC_RESPONSE_ENTER_DUNGEON_BEGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.benterbegin_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_RESPONSE_ENTER_DUNGEON_BEGIN::~SC_RESPONSE_ENTER_DUNGEON_BEGIN() {
  // @@protoc_insertion_point(destructor:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_RESPONSE_ENTER_DUNGEON_BEGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_RESPONSE_ENTER_DUNGEON_BEGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_RESPONSE_ENTER_DUNGEON_BEGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benterbegin_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_RESPONSE_ENTER_DUNGEON_BEGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bEnterBegin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.benterbegin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_RESPONSE_ENTER_DUNGEON_BEGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bEnterBegin = 1;
  if (this->_internal_benterbegin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_benterbegin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  return target;
}

size_t SC_RESPONSE_ENTER_DUNGEON_BEGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bEnterBegin = 1;
  if (this->_internal_benterbegin() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_RESPONSE_ENTER_DUNGEON_BEGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_RESPONSE_ENTER_DUNGEON_BEGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_RESPONSE_ENTER_DUNGEON_BEGIN::GetClassData() const { return &_class_data_; }


void SC_RESPONSE_ENTER_DUNGEON_BEGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_RESPONSE_ENTER_DUNGEON_BEGIN*>(&to_msg);
  auto& from = static_cast<const SC_RESPONSE_ENTER_DUNGEON_BEGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_benterbegin() != 0) {
    _this->_internal_set_benterbegin(from._internal_benterbegin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_RESPONSE_ENTER_DUNGEON_BEGIN::CopyFrom(const SC_RESPONSE_ENTER_DUNGEON_BEGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RESPONSE_ENTER_DUNGEON_BEGIN::IsInitialized() const {
  return true;
}

void SC_RESPONSE_ENTER_DUNGEON_BEGIN::InternalSwap(SC_RESPONSE_ENTER_DUNGEON_BEGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.benterbegin_, other->_impl_.benterbegin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_RESPONSE_ENTER_DUNGEON_BEGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[30]);
}

// ===================================================================

class SC_RESPONSE_ENTER_DUNGEON_END::_Internal {
 public:
};

SC_RESPONSE_ENTER_DUNGEON_END::SC_RESPONSE_ENTER_DUNGEON_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_RESPONSE_ENTER_DUNGEON_END)
}
SC_RESPONSE_ENTER_DUNGEON_END::SC_RESPONSE_ENTER_DUNGEON_END(const SC_RESPONSE_ENTER_DUNGEON_END& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_RESPONSE_ENTER_DUNGEON_END* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.benterend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.benterend_ = from._impl_.benterend_;
  // @@protoc_insertion_point(copy_constructor:game.SC_RESPONSE_ENTER_DUNGEON_END)
}

inline void SC_RESPONSE_ENTER_DUNGEON_END::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.benterend_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_RESPONSE_ENTER_DUNGEON_END::~SC_RESPONSE_ENTER_DUNGEON_END() {
  // @@protoc_insertion_point(destructor:game.SC_RESPONSE_ENTER_DUNGEON_END)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_RESPONSE_ENTER_DUNGEON_END::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_RESPONSE_ENTER_DUNGEON_END::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_RESPONSE_ENTER_DUNGEON_END::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_RESPONSE_ENTER_DUNGEON_END)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benterend_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_RESPONSE_ENTER_DUNGEON_END::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bEnterEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.benterend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_RESPONSE_ENTER_DUNGEON_END::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_RESPONSE_ENTER_DUNGEON_END)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bEnterEnd = 1;
  if (this->_internal_benterend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_benterend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_RESPONSE_ENTER_DUNGEON_END)
  return target;
}

size_t SC_RESPONSE_ENTER_DUNGEON_END::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_RESPONSE_ENTER_DUNGEON_END)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bEnterEnd = 1;
  if (this->_internal_benterend() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_RESPONSE_ENTER_DUNGEON_END::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_RESPONSE_ENTER_DUNGEON_END::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_RESPONSE_ENTER_DUNGEON_END::GetClassData() const { return &_class_data_; }


void SC_RESPONSE_ENTER_DUNGEON_END::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_RESPONSE_ENTER_DUNGEON_END*>(&to_msg);
  auto& from = static_cast<const SC_RESPONSE_ENTER_DUNGEON_END&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_RESPONSE_ENTER_DUNGEON_END)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_benterend() != 0) {
    _this->_internal_set_benterend(from._internal_benterend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_RESPONSE_ENTER_DUNGEON_END::CopyFrom(const SC_RESPONSE_ENTER_DUNGEON_END& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_RESPONSE_ENTER_DUNGEON_END)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RESPONSE_ENTER_DUNGEON_END::IsInitialized() const {
  return true;
}

void SC_RESPONSE_ENTER_DUNGEON_END::InternalSwap(SC_RESPONSE_ENTER_DUNGEON_END* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.benterend_, other->_impl_.benterend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_RESPONSE_ENTER_DUNGEON_END::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[31]);
}

// ===================================================================

class SC_SPAWN_CHARACTER::_Internal {
 public:
  static const ::game::Position& playerpos(const SC_SPAWN_CHARACTER* msg);
  static const ::game::PlayerInfo& playerinfo(const SC_SPAWN_CHARACTER* msg);
};

const ::game::Position&
SC_SPAWN_CHARACTER::_Internal::playerpos(const SC_SPAWN_CHARACTER* msg) {
  return *msg->_impl_.playerpos_;
}
const ::game::PlayerInfo&
SC_SPAWN_CHARACTER::_Internal::playerinfo(const SC_SPAWN_CHARACTER* msg) {
  return *msg->_impl_.playerinfo_;
}
SC_SPAWN_CHARACTER::SC_SPAWN_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_SPAWN_CHARACTER)
}
SC_SPAWN_CHARACTER::SC_SPAWN_CHARACTER(const SC_SPAWN_CHARACTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_SPAWN_CHARACTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerpos_){nullptr}
    , decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.camerayaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerpos()) {
    _this->_impl_.playerpos_ = new ::game::Position(*from._impl_.playerpos_);
  }
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::game::PlayerInfo(*from._impl_.playerinfo_);
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camerayaw_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  // @@protoc_insertion_point(copy_constructor:game.SC_SPAWN_CHARACTER)
}

inline void SC_SPAWN_CHARACTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerpos_){nullptr}
    , decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.camerayaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_SPAWN_CHARACTER::~SC_SPAWN_CHARACTER() {
  // @@protoc_insertion_point(destructor:game.SC_SPAWN_CHARACTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_SPAWN_CHARACTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerpos_;
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
}

void SC_SPAWN_CHARACTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_SPAWN_CHARACTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_SPAWN_CHARACTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerpos_ != nullptr) {
    delete _impl_.playerpos_;
  }
  _impl_.playerpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camerayaw_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SPAWN_CHARACTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position playerPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cameraYaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.camerayaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .game.PlayerInfo playerInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_SPAWN_CHARACTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_SPAWN_CHARACTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .game.Position playerPos = 2;
  if (this->_internal_has_playerpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::playerpos(this),
        _Internal::playerpos(this).GetCachedSize(), target, stream);
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_camerayaw(), target);
  }

  // .game.PlayerInfo playerInfo = 4;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_SPAWN_CHARACTER)
  return target;
}

size_t SC_SPAWN_CHARACTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_SPAWN_CHARACTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.Position playerPos = 2;
  if (this->_internal_has_playerpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerpos_);
  }

  // .game.PlayerInfo playerInfo = 4;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_SPAWN_CHARACTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_SPAWN_CHARACTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_SPAWN_CHARACTER::GetClassData() const { return &_class_data_; }


void SC_SPAWN_CHARACTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_SPAWN_CHARACTER*>(&to_msg);
  auto& from = static_cast<const SC_SPAWN_CHARACTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_SPAWN_CHARACTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerpos()) {
    _this->_internal_mutable_playerpos()->::game::Position::MergeFrom(
        from._internal_playerpos());
  }
  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::game::PlayerInfo::MergeFrom(
        from._internal_playerinfo());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = from._internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    _this->_internal_set_camerayaw(from._internal_camerayaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_SPAWN_CHARACTER::CopyFrom(const SC_SPAWN_CHARACTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_SPAWN_CHARACTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SPAWN_CHARACTER::IsInitialized() const {
  return true;
}

void SC_SPAWN_CHARACTER::InternalSwap(SC_SPAWN_CHARACTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SPAWN_CHARACTER, _impl_.camerayaw_)
      + sizeof(SC_SPAWN_CHARACTER::_impl_.camerayaw_)
      - PROTOBUF_FIELD_OFFSET(SC_SPAWN_CHARACTER, _impl_.playerpos_)>(
          reinterpret_cast<char*>(&_impl_.playerpos_),
          reinterpret_cast<char*>(&other->_impl_.playerpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SPAWN_CHARACTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[32]);
}

// ===================================================================

class SC_START_AI_CALCULATE::_Internal {
 public:
};

SC_START_AI_CALCULATE::SC_START_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_START_AI_CALCULATE)
}
SC_START_AI_CALCULATE::SC_START_AI_CALCULATE(const SC_START_AI_CALCULATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_START_AI_CALCULATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bstart_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bstart_ = from._impl_.bstart_;
  // @@protoc_insertion_point(copy_constructor:game.SC_START_AI_CALCULATE)
}

inline void SC_START_AI_CALCULATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bstart_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_START_AI_CALCULATE::~SC_START_AI_CALCULATE() {
  // @@protoc_insertion_point(destructor:game.SC_START_AI_CALCULATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_START_AI_CALCULATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_START_AI_CALCULATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_START_AI_CALCULATE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_START_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bstart_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_START_AI_CALCULATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bStart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_START_AI_CALCULATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_START_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bStart = 1;
  if (this->_internal_bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bstart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_START_AI_CALCULATE)
  return target;
}

size_t SC_START_AI_CALCULATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_START_AI_CALCULATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bStart = 1;
  if (this->_internal_bstart() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_START_AI_CALCULATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_START_AI_CALCULATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_START_AI_CALCULATE::GetClassData() const { return &_class_data_; }


void SC_START_AI_CALCULATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_START_AI_CALCULATE*>(&to_msg);
  auto& from = static_cast<const SC_START_AI_CALCULATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_START_AI_CALCULATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bstart() != 0) {
    _this->_internal_set_bstart(from._internal_bstart());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_START_AI_CALCULATE::CopyFrom(const SC_START_AI_CALCULATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_START_AI_CALCULATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_START_AI_CALCULATE::IsInitialized() const {
  return true;
}

void SC_START_AI_CALCULATE::InternalSwap(SC_START_AI_CALCULATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bstart_, other->_impl_.bstart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_START_AI_CALCULATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[33]);
}

// ===================================================================

class SC_STOP_AI_CALCULATE::_Internal {
 public:
};

SC_STOP_AI_CALCULATE::SC_STOP_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_STOP_AI_CALCULATE)
}
SC_STOP_AI_CALCULATE::SC_STOP_AI_CALCULATE(const SC_STOP_AI_CALCULATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_STOP_AI_CALCULATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bstop_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bstop_ = from._impl_.bstop_;
  // @@protoc_insertion_point(copy_constructor:game.SC_STOP_AI_CALCULATE)
}

inline void SC_STOP_AI_CALCULATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bstop_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_STOP_AI_CALCULATE::~SC_STOP_AI_CALCULATE() {
  // @@protoc_insertion_point(destructor:game.SC_STOP_AI_CALCULATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_STOP_AI_CALCULATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_STOP_AI_CALCULATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_STOP_AI_CALCULATE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_STOP_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bstop_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_STOP_AI_CALCULATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bStop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bstop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_STOP_AI_CALCULATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_STOP_AI_CALCULATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bStop = 1;
  if (this->_internal_bstop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bstop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_STOP_AI_CALCULATE)
  return target;
}

size_t SC_STOP_AI_CALCULATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_STOP_AI_CALCULATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bStop = 1;
  if (this->_internal_bstop() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_STOP_AI_CALCULATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_STOP_AI_CALCULATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_STOP_AI_CALCULATE::GetClassData() const { return &_class_data_; }


void SC_STOP_AI_CALCULATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_STOP_AI_CALCULATE*>(&to_msg);
  auto& from = static_cast<const SC_STOP_AI_CALCULATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_STOP_AI_CALCULATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bstop() != 0) {
    _this->_internal_set_bstop(from._internal_bstop());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_STOP_AI_CALCULATE::CopyFrom(const SC_STOP_AI_CALCULATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_STOP_AI_CALCULATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_STOP_AI_CALCULATE::IsInitialized() const {
  return true;
}

void SC_STOP_AI_CALCULATE::InternalSwap(SC_STOP_AI_CALCULATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bstop_, other->_impl_.bstop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_STOP_AI_CALCULATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[34]);
}

// ===================================================================

class CS_CHAT::_Internal {
 public:
};

CS_CHAT::CS_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_CHAT)
}
CS_CHAT::CS_CHAT(const CS_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.targetid_, &from._impl_.targetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.targetid_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:game.CS_CHAT)
}

inline void CS_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.targetid_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_CHAT::~CS_CHAT() {
  // @@protoc_insertion_point(destructor:game.CS_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CS_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.targetid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.targetid_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 targetID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_CHAT.message"));
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 targetID = 1;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_targetid(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_CHAT.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_CHAT)
  return target;
}

size_t CS_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 targetID = 1;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_targetid());
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_CHAT::GetClassData() const { return &_class_data_; }


void CS_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_CHAT*>(&to_msg);
  auto& from = static_cast<const CS_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_CHAT::CopyFrom(const CS_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CHAT::IsInitialized() const {
  return true;
}

void CS_CHAT::InternalSwap(CS_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_CHAT, _impl_.channel_)
      + sizeof(CS_CHAT::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(CS_CHAT, _impl_.targetid_)>(
          reinterpret_cast<char*>(&_impl_.targetid_),
          reinterpret_cast<char*>(&other->_impl_.targetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[35]);
}

// ===================================================================

class SC_CHAT::_Internal {
 public:
};

SC_CHAT::SC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CHAT)
}
SC_CHAT::SC_CHAT(const SC_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CHAT)
}

inline void SC_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.channel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SC_CHAT::~SC_CHAT() {
  // @@protoc_insertion_point(destructor:game.SC_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void SC_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SC_CHAT.message"));
        } else
          goto handle_unusual;
        continue;
      // uint32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SC_CHAT.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CHAT)
  return target;
}

size_t SC_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CHAT::GetClassData() const { return &_class_data_; }


void SC_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CHAT*>(&to_msg);
  auto& from = static_cast<const SC_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CHAT::CopyFrom(const SC_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CHAT::IsInitialized() const {
  return true;
}

void SC_CHAT::InternalSwap(SC_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CHAT, _impl_.channel_)
      + sizeof(SC_CHAT::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(SC_CHAT, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[36]);
}

// ===================================================================

class CS_KEYINFO::_Internal {
 public:
};

CS_KEYINFO::CS_KEYINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_KEYINFO)
}
CS_KEYINFO::CS_KEYINFO(const CS_KEYINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_KEYINFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyinfo_){}
    , decltype(_impl_.camerayaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.keyinfo_, &from._impl_.keyinfo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camerayaw_) -
    reinterpret_cast<char*>(&_impl_.keyinfo_)) + sizeof(_impl_.camerayaw_));
  // @@protoc_insertion_point(copy_constructor:game.CS_KEYINFO)
}

inline void CS_KEYINFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keyinfo_){0u}
    , decltype(_impl_.camerayaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_KEYINFO::~CS_KEYINFO() {
  // @@protoc_insertion_point(destructor:game.CS_KEYINFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_KEYINFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_KEYINFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_KEYINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_KEYINFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.keyinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camerayaw_) -
      reinterpret_cast<char*>(&_impl_.keyinfo_)) + sizeof(_impl_.camerayaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_KEYINFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 keyInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.keyinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cameraYaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.camerayaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_KEYINFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_KEYINFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyInfo = 1;
  if (this->_internal_keyinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyinfo(), target);
  }

  // float cameraYaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_camerayaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_KEYINFO)
  return target;
}

size_t CS_KEYINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_KEYINFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keyInfo = 1;
  if (this->_internal_keyinfo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyinfo());
  }

  // float cameraYaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_KEYINFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_KEYINFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_KEYINFO::GetClassData() const { return &_class_data_; }


void CS_KEYINFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_KEYINFO*>(&to_msg);
  auto& from = static_cast<const CS_KEYINFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_KEYINFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_keyinfo() != 0) {
    _this->_internal_set_keyinfo(from._internal_keyinfo());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = from._internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    _this->_internal_set_camerayaw(from._internal_camerayaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_KEYINFO::CopyFrom(const CS_KEYINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_KEYINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_KEYINFO::IsInitialized() const {
  return true;
}

void CS_KEYINFO::InternalSwap(CS_KEYINFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_KEYINFO, _impl_.camerayaw_)
      + sizeof(CS_KEYINFO::_impl_.camerayaw_)
      - PROTOBUF_FIELD_OFFSET(CS_KEYINFO, _impl_.keyinfo_)>(
          reinterpret_cast<char*>(&_impl_.keyinfo_),
          reinterpret_cast<char*>(&other->_impl_.keyinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_KEYINFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[37]);
}

// ===================================================================

class CS_MONSTER_ATTACK::_Internal {
 public:
};

CS_MONSTER_ATTACK::CS_MONSTER_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MONSTER_ATTACK)
}
CS_MONSTER_ATTACK::CS_MONSTER_ATTACK(const CS_MONSTER_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MONSTER_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:game.CS_MONSTER_ATTACK)
}

inline void CS_MONSTER_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.damage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MONSTER_ATTACK::~CS_MONSTER_ATTACK() {
  // @@protoc_insertion_point(destructor:game.CS_MONSTER_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MONSTER_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_MONSTER_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MONSTER_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MONSTER_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MONSTER_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MONSTER_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MONSTER_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MONSTER_ATTACK)
  return target;
}

size_t CS_MONSTER_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MONSTER_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MONSTER_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MONSTER_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MONSTER_ATTACK::GetClassData() const { return &_class_data_; }


void CS_MONSTER_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MONSTER_ATTACK*>(&to_msg);
  auto& from = static_cast<const CS_MONSTER_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MONSTER_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MONSTER_ATTACK::CopyFrom(const CS_MONSTER_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MONSTER_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MONSTER_ATTACK::IsInitialized() const {
  return true;
}

void CS_MONSTER_ATTACK::InternalSwap(CS_MONSTER_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MONSTER_ATTACK, _impl_.damage_)
      + sizeof(CS_MONSTER_ATTACK::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(CS_MONSTER_ATTACK, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MONSTER_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[38]);
}

// ===================================================================

class CS_MONSTER_DIE::_Internal {
 public:
};

CS_MONSTER_DIE::CS_MONSTER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MONSTER_DIE)
}
CS_MONSTER_DIE::CS_MONSTER_DIE(const CS_MONSTER_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MONSTER_DIE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.aiid_ = from._impl_.aiid_;
  // @@protoc_insertion_point(copy_constructor:game.CS_MONSTER_DIE)
}

inline void CS_MONSTER_DIE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MONSTER_DIE::~CS_MONSTER_DIE() {
  // @@protoc_insertion_point(destructor:game.CS_MONSTER_DIE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MONSTER_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_MONSTER_DIE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MONSTER_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MONSTER_DIE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aiid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MONSTER_DIE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MONSTER_DIE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MONSTER_DIE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MONSTER_DIE)
  return target;
}

size_t CS_MONSTER_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MONSTER_DIE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MONSTER_DIE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MONSTER_DIE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MONSTER_DIE::GetClassData() const { return &_class_data_; }


void CS_MONSTER_DIE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MONSTER_DIE*>(&to_msg);
  auto& from = static_cast<const CS_MONSTER_DIE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MONSTER_DIE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MONSTER_DIE::CopyFrom(const CS_MONSTER_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MONSTER_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MONSTER_DIE::IsInitialized() const {
  return true;
}

void CS_MONSTER_DIE::InternalSwap(CS_MONSTER_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.aiid_, other->_impl_.aiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MONSTER_DIE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[39]);
}

// ===================================================================

class CS_PLAYER_ATTACK::_Internal {
 public:
};

CS_PLAYER_ATTACK::CS_PLAYER_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_PLAYER_ATTACK)
}
CS_PLAYER_ATTACK::CS_PLAYER_ATTACK(const CS_PLAYER_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_PLAYER_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , decltype(_impl_.attackdamage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attackdamage_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.attackdamage_));
  // @@protoc_insertion_point(copy_constructor:game.CS_PLAYER_ATTACK)
}

inline void CS_PLAYER_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){0u}
    , decltype(_impl_.attackdamage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_PLAYER_ATTACK::~CS_PLAYER_ATTACK() {
  // @@protoc_insertion_point(destructor:game.CS_PLAYER_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_PLAYER_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_PLAYER_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_PLAYER_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_PLAYER_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attackdamage_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.attackdamage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_PLAYER_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attackDamage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attackdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_PLAYER_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_PLAYER_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // uint32 attackDamage = 2;
  if (this->_internal_attackdamage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attackdamage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_PLAYER_ATTACK)
  return target;
}

size_t CS_PLAYER_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_PLAYER_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // uint32 attackDamage = 2;
  if (this->_internal_attackdamage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attackdamage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_PLAYER_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_PLAYER_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_PLAYER_ATTACK::GetClassData() const { return &_class_data_; }


void CS_PLAYER_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_PLAYER_ATTACK*>(&to_msg);
  auto& from = static_cast<const CS_PLAYER_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_PLAYER_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  if (from._internal_attackdamage() != 0) {
    _this->_internal_set_attackdamage(from._internal_attackdamage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_PLAYER_ATTACK::CopyFrom(const CS_PLAYER_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_PLAYER_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_PLAYER_ATTACK::IsInitialized() const {
  return true;
}

void CS_PLAYER_ATTACK::InternalSwap(CS_PLAYER_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_PLAYER_ATTACK, _impl_.attackdamage_)
      + sizeof(CS_PLAYER_ATTACK::_impl_.attackdamage_)
      - PROTOBUF_FIELD_OFFSET(CS_PLAYER_ATTACK, _impl_.aiid_)>(
          reinterpret_cast<char*>(&_impl_.aiid_),
          reinterpret_cast<char*>(&other->_impl_.aiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_PLAYER_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[40]);
}

// ===================================================================

class CS_PLAYER_DIE::_Internal {
 public:
};

CS_PLAYER_DIE::CS_PLAYER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_PLAYER_DIE)
}
CS_PLAYER_DIE::CS_PLAYER_DIE(const CS_PLAYER_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_PLAYER_DIE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:game.CS_PLAYER_DIE)
}

inline void CS_PLAYER_DIE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_PLAYER_DIE::~CS_PLAYER_DIE() {
  // @@protoc_insertion_point(destructor:game.CS_PLAYER_DIE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_PLAYER_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_PLAYER_DIE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_PLAYER_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_PLAYER_DIE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_PLAYER_DIE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_PLAYER_DIE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_PLAYER_DIE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_PLAYER_DIE)
  return target;
}

size_t CS_PLAYER_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_PLAYER_DIE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_PLAYER_DIE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_PLAYER_DIE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_PLAYER_DIE::GetClassData() const { return &_class_data_; }


void CS_PLAYER_DIE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_PLAYER_DIE*>(&to_msg);
  auto& from = static_cast<const CS_PLAYER_DIE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_PLAYER_DIE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_PLAYER_DIE::CopyFrom(const CS_PLAYER_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_PLAYER_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_PLAYER_DIE::IsInitialized() const {
  return true;
}

void CS_PLAYER_DIE::InternalSwap(CS_PLAYER_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_PLAYER_DIE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[41]);
}

// ===================================================================

class CS_POSITION_SYNC::_Internal {
 public:
};

CS_POSITION_SYNC::CS_POSITION_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_POSITION_SYNC)
}
CS_POSITION_SYNC::CS_POSITION_SYNC(const CS_POSITION_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_POSITION_SYNC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.camerayaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camerayaw_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.camerayaw_));
  // @@protoc_insertion_point(copy_constructor:game.CS_POSITION_SYNC)
}

inline void CS_POSITION_SYNC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.camerayaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_POSITION_SYNC::~CS_POSITION_SYNC() {
  // @@protoc_insertion_point(destructor:game.CS_POSITION_SYNC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_POSITION_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_POSITION_SYNC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_POSITION_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_POSITION_SYNC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camerayaw_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.camerayaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_POSITION_SYNC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cameraYaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.camerayaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_POSITION_SYNC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_POSITION_SYNC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float posX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_posx(), target);
  }

  // float posY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_posy(), target);
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_camerayaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_POSITION_SYNC)
  return target;
}

size_t CS_POSITION_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_POSITION_SYNC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float posX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    total_size += 1 + 4;
  }

  // float posY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    total_size += 1 + 4;
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_POSITION_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_POSITION_SYNC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_POSITION_SYNC::GetClassData() const { return &_class_data_; }


void CS_POSITION_SYNC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_POSITION_SYNC*>(&to_msg);
  auto& from = static_cast<const CS_POSITION_SYNC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_POSITION_SYNC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = from._internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = from._internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = from._internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    _this->_internal_set_camerayaw(from._internal_camerayaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_POSITION_SYNC::CopyFrom(const CS_POSITION_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_POSITION_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_POSITION_SYNC::IsInitialized() const {
  return true;
}

void CS_POSITION_SYNC::InternalSwap(CS_POSITION_SYNC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_POSITION_SYNC, _impl_.camerayaw_)
      + sizeof(CS_POSITION_SYNC::_impl_.camerayaw_)
      - PROTOBUF_FIELD_OFFSET(CS_POSITION_SYNC, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_POSITION_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[42]);
}

// ===================================================================

class SC_KEYINFO::_Internal {
 public:
};

SC_KEYINFO::SC_KEYINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_KEYINFO)
}
SC_KEYINFO::SC_KEYINFO(const SC_KEYINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_KEYINFO* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.keyinfo_){}
    , decltype(_impl_.camerayaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camerayaw_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  // @@protoc_insertion_point(copy_constructor:game.SC_KEYINFO)
}

inline void SC_KEYINFO::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.keyinfo_){0u}
    , decltype(_impl_.camerayaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_KEYINFO::~SC_KEYINFO() {
  // @@protoc_insertion_point(destructor:game.SC_KEYINFO)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_KEYINFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_KEYINFO::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_KEYINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_KEYINFO)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camerayaw_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_KEYINFO::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keyinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cameraYaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.camerayaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_KEYINFO::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_KEYINFO)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 keyInfo = 2;
  if (this->_internal_keyinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keyinfo(), target);
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_camerayaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_KEYINFO)
  return target;
}

size_t SC_KEYINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_KEYINFO)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 keyInfo = 2;
  if (this->_internal_keyinfo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyinfo());
  }

  // float cameraYaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_KEYINFO::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_KEYINFO::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_KEYINFO::GetClassData() const { return &_class_data_; }


void SC_KEYINFO::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_KEYINFO*>(&to_msg);
  auto& from = static_cast<const SC_KEYINFO&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_KEYINFO)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_keyinfo() != 0) {
    _this->_internal_set_keyinfo(from._internal_keyinfo());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = from._internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    _this->_internal_set_camerayaw(from._internal_camerayaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_KEYINFO::CopyFrom(const SC_KEYINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_KEYINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_KEYINFO::IsInitialized() const {
  return true;
}

void SC_KEYINFO::InternalSwap(SC_KEYINFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_KEYINFO, _impl_.camerayaw_)
      + sizeof(SC_KEYINFO::_impl_.camerayaw_)
      - PROTOBUF_FIELD_OFFSET(SC_KEYINFO, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_KEYINFO::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[43]);
}

// ===================================================================

class SC_MONSTER_DAMAGED::_Internal {
 public:
};

SC_MONSTER_DAMAGED::SC_MONSTER_DAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MONSTER_DAMAGED)
}
SC_MONSTER_DAMAGED::SC_MONSTER_DAMAGED(const SC_MONSTER_DAMAGED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MONSTER_DAMAGED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:game.SC_MONSTER_DAMAGED)
}

inline void SC_MONSTER_DAMAGED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){0u}
    , decltype(_impl_.damage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MONSTER_DAMAGED::~SC_MONSTER_DAMAGED() {
  // @@protoc_insertion_point(destructor:game.SC_MONSTER_DAMAGED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MONSTER_DAMAGED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_MONSTER_DAMAGED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MONSTER_DAMAGED::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MONSTER_DAMAGED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MONSTER_DAMAGED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MONSTER_DAMAGED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MONSTER_DAMAGED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MONSTER_DAMAGED)
  return target;
}

size_t SC_MONSTER_DAMAGED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MONSTER_DAMAGED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MONSTER_DAMAGED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MONSTER_DAMAGED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MONSTER_DAMAGED::GetClassData() const { return &_class_data_; }


void SC_MONSTER_DAMAGED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MONSTER_DAMAGED*>(&to_msg);
  auto& from = static_cast<const SC_MONSTER_DAMAGED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MONSTER_DAMAGED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MONSTER_DAMAGED::CopyFrom(const SC_MONSTER_DAMAGED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MONSTER_DAMAGED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MONSTER_DAMAGED::IsInitialized() const {
  return true;
}

void SC_MONSTER_DAMAGED::InternalSwap(SC_MONSTER_DAMAGED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MONSTER_DAMAGED, _impl_.damage_)
      + sizeof(SC_MONSTER_DAMAGED::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(SC_MONSTER_DAMAGED, _impl_.aiid_)>(
          reinterpret_cast<char*>(&_impl_.aiid_),
          reinterpret_cast<char*>(&other->_impl_.aiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MONSTER_DAMAGED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[44]);
}

// ===================================================================

class SC_MONSTER_DIE::_Internal {
 public:
};

SC_MONSTER_DIE::SC_MONSTER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MONSTER_DIE)
}
SC_MONSTER_DIE::SC_MONSTER_DIE(const SC_MONSTER_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MONSTER_DIE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.aiid_ = from._impl_.aiid_;
  // @@protoc_insertion_point(copy_constructor:game.SC_MONSTER_DIE)
}

inline void SC_MONSTER_DIE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MONSTER_DIE::~SC_MONSTER_DIE() {
  // @@protoc_insertion_point(destructor:game.SC_MONSTER_DIE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MONSTER_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_MONSTER_DIE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MONSTER_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MONSTER_DIE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aiid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MONSTER_DIE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MONSTER_DIE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MONSTER_DIE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MONSTER_DIE)
  return target;
}

size_t SC_MONSTER_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MONSTER_DIE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MONSTER_DIE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MONSTER_DIE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MONSTER_DIE::GetClassData() const { return &_class_data_; }


void SC_MONSTER_DIE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MONSTER_DIE*>(&to_msg);
  auto& from = static_cast<const SC_MONSTER_DIE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MONSTER_DIE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MONSTER_DIE::CopyFrom(const SC_MONSTER_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MONSTER_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MONSTER_DIE::IsInitialized() const {
  return true;
}

void SC_MONSTER_DIE::InternalSwap(SC_MONSTER_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.aiid_, other->_impl_.aiid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MONSTER_DIE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[45]);
}

// ===================================================================

class SC_PLAYER_DAMAGED::_Internal {
 public:
};

SC_PLAYER_DAMAGED::SC_PLAYER_DAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_PLAYER_DAMAGED)
}
SC_PLAYER_DAMAGED::SC_PLAYER_DAMAGED(const SC_PLAYER_DAMAGED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_PLAYER_DAMAGED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:game.SC_PLAYER_DAMAGED)
}

inline void SC_PLAYER_DAMAGED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.damage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_PLAYER_DAMAGED::~SC_PLAYER_DAMAGED() {
  // @@protoc_insertion_point(destructor:game.SC_PLAYER_DAMAGED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_PLAYER_DAMAGED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_PLAYER_DAMAGED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_PLAYER_DAMAGED::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_PLAYER_DAMAGED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_PLAYER_DAMAGED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_PLAYER_DAMAGED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_PLAYER_DAMAGED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_PLAYER_DAMAGED)
  return target;
}

size_t SC_PLAYER_DAMAGED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_PLAYER_DAMAGED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 damage = 2;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_PLAYER_DAMAGED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_PLAYER_DAMAGED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_PLAYER_DAMAGED::GetClassData() const { return &_class_data_; }


void SC_PLAYER_DAMAGED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_PLAYER_DAMAGED*>(&to_msg);
  auto& from = static_cast<const SC_PLAYER_DAMAGED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_PLAYER_DAMAGED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_PLAYER_DAMAGED::CopyFrom(const SC_PLAYER_DAMAGED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_PLAYER_DAMAGED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PLAYER_DAMAGED::IsInitialized() const {
  return true;
}

void SC_PLAYER_DAMAGED::InternalSwap(SC_PLAYER_DAMAGED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_PLAYER_DAMAGED, _impl_.damage_)
      + sizeof(SC_PLAYER_DAMAGED::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(SC_PLAYER_DAMAGED, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_PLAYER_DAMAGED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[46]);
}

// ===================================================================

class SC_PLAYER_DIE::_Internal {
 public:
};

SC_PLAYER_DIE::SC_PLAYER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_PLAYER_DIE)
}
SC_PLAYER_DIE::SC_PLAYER_DIE(const SC_PLAYER_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_PLAYER_DIE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:game.SC_PLAYER_DIE)
}

inline void SC_PLAYER_DIE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_PLAYER_DIE::~SC_PLAYER_DIE() {
  // @@protoc_insertion_point(destructor:game.SC_PLAYER_DIE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_PLAYER_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_PLAYER_DIE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_PLAYER_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_PLAYER_DIE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_PLAYER_DIE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_PLAYER_DIE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_PLAYER_DIE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_PLAYER_DIE)
  return target;
}

size_t SC_PLAYER_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_PLAYER_DIE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_PLAYER_DIE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_PLAYER_DIE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_PLAYER_DIE::GetClassData() const { return &_class_data_; }


void SC_PLAYER_DIE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_PLAYER_DIE*>(&to_msg);
  auto& from = static_cast<const SC_PLAYER_DIE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_PLAYER_DIE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_PLAYER_DIE::CopyFrom(const SC_PLAYER_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_PLAYER_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PLAYER_DIE::IsInitialized() const {
  return true;
}

void SC_PLAYER_DIE::InternalSwap(SC_PLAYER_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_PLAYER_DIE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[47]);
}

// ===================================================================

class SC_POSITION_SYNC::_Internal {
 public:
};

SC_POSITION_SYNC::SC_POSITION_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_POSITION_SYNC)
}
SC_POSITION_SYNC::SC_POSITION_SYNC(const SC_POSITION_SYNC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_POSITION_SYNC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.camerayaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camerayaw_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  // @@protoc_insertion_point(copy_constructor:game.SC_POSITION_SYNC)
}

inline void SC_POSITION_SYNC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.posx_){0}
    , decltype(_impl_.posy_){0}
    , decltype(_impl_.camerayaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_POSITION_SYNC::~SC_POSITION_SYNC() {
  // @@protoc_insertion_point(destructor:game.SC_POSITION_SYNC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_POSITION_SYNC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_POSITION_SYNC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_POSITION_SYNC::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_POSITION_SYNC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camerayaw_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.camerayaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_POSITION_SYNC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float posX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cameraYaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.camerayaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_POSITION_SYNC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_POSITION_SYNC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // float posX = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_posx(), target);
  }

  // float posY = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_posy(), target);
  }

  // float cameraYaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_camerayaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_POSITION_SYNC)
  return target;
}

size_t SC_POSITION_SYNC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_POSITION_SYNC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerID = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // float posX = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    total_size += 1 + 4;
  }

  // float posY = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    total_size += 1 + 4;
  }

  // float cameraYaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = this->_internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_POSITION_SYNC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_POSITION_SYNC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_POSITION_SYNC::GetClassData() const { return &_class_data_; }


void SC_POSITION_SYNC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_POSITION_SYNC*>(&to_msg);
  auto& from = static_cast<const SC_POSITION_SYNC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_POSITION_SYNC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = from._internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = from._internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_camerayaw = from._internal_camerayaw();
  uint32_t raw_camerayaw;
  memcpy(&raw_camerayaw, &tmp_camerayaw, sizeof(tmp_camerayaw));
  if (raw_camerayaw != 0) {
    _this->_internal_set_camerayaw(from._internal_camerayaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_POSITION_SYNC::CopyFrom(const SC_POSITION_SYNC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_POSITION_SYNC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_POSITION_SYNC::IsInitialized() const {
  return true;
}

void SC_POSITION_SYNC::InternalSwap(SC_POSITION_SYNC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_POSITION_SYNC, _impl_.camerayaw_)
      + sizeof(SC_POSITION_SYNC::_impl_.camerayaw_)
      - PROTOBUF_FIELD_OFFSET(SC_POSITION_SYNC, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_POSITION_SYNC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[48]);
}

// ===================================================================

class CS_MONSTER_AI::_Internal {
 public:
  static const ::game::Position& targetmovementpos(const CS_MONSTER_AI* msg);
  static const ::game::Position& bosspos(const CS_MONSTER_AI* msg);
};

const ::game::Position&
CS_MONSTER_AI::_Internal::targetmovementpos(const CS_MONSTER_AI* msg) {
  return *msg->_impl_.targetmovementpos_;
}
const ::game::Position&
CS_MONSTER_AI::_Internal::bosspos(const CS_MONSTER_AI* msg) {
  return *msg->_impl_.bosspos_;
}
CS_MONSTER_AI::CS_MONSTER_AI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MONSTER_AI)
}
CS_MONSTER_AI::CS_MONSTER_AI(const CS_MONSTER_AI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MONSTER_AI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetmovementpos_){nullptr}
    , decltype(_impl_.bosspos_){nullptr}
    , decltype(_impl_.aiid_){}
    , decltype(_impl_.currenthp_){}
    , decltype(_impl_.maxhp_){}
    , decltype(_impl_.bossstate_){}
    , decltype(_impl_.curspeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetmovementpos()) {
    _this->_impl_.targetmovementpos_ = new ::game::Position(*from._impl_.targetmovementpos_);
  }
  if (from._internal_has_bosspos()) {
    _this->_impl_.bosspos_ = new ::game::Position(*from._impl_.bosspos_);
  }
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curspeed_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.curspeed_));
  // @@protoc_insertion_point(copy_constructor:game.CS_MONSTER_AI)
}

inline void CS_MONSTER_AI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetmovementpos_){nullptr}
    , decltype(_impl_.bosspos_){nullptr}
    , decltype(_impl_.aiid_){0u}
    , decltype(_impl_.currenthp_){0u}
    , decltype(_impl_.maxhp_){0u}
    , decltype(_impl_.bossstate_){0u}
    , decltype(_impl_.curspeed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MONSTER_AI::~CS_MONSTER_AI() {
  // @@protoc_insertion_point(destructor:game.CS_MONSTER_AI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MONSTER_AI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetmovementpos_;
  if (this != internal_default_instance()) delete _impl_.bosspos_;
}

void CS_MONSTER_AI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MONSTER_AI::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MONSTER_AI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.targetmovementpos_ != nullptr) {
    delete _impl_.targetmovementpos_;
  }
  _impl_.targetmovementpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bosspos_ != nullptr) {
    delete _impl_.bosspos_;
  }
  _impl_.bosspos_ = nullptr;
  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curspeed_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.curspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MONSTER_AI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 currentHp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.currenthp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position targetMovementPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetmovementpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position bossPos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bosspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bossState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bossstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float curSpeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.curspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MONSTER_AI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MONSTER_AI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // uint32 currentHp = 2;
  if (this->_internal_currenthp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currenthp(), target);
  }

  // uint32 maxHp = 3;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // .game.Position targetMovementPos = 4;
  if (this->_internal_has_targetmovementpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::targetmovementpos(this),
        _Internal::targetmovementpos(this).GetCachedSize(), target, stream);
  }

  // .game.Position bossPos = 5;
  if (this->_internal_has_bosspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bosspos(this),
        _Internal::bosspos(this).GetCachedSize(), target, stream);
  }

  // uint32 bossState = 6;
  if (this->_internal_bossstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bossstate(), target);
  }

  // float curSpeed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curspeed = this->_internal_curspeed();
  uint32_t raw_curspeed;
  memcpy(&raw_curspeed, &tmp_curspeed, sizeof(tmp_curspeed));
  if (raw_curspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_curspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MONSTER_AI)
  return target;
}

size_t CS_MONSTER_AI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MONSTER_AI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.Position targetMovementPos = 4;
  if (this->_internal_has_targetmovementpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetmovementpos_);
  }

  // .game.Position bossPos = 5;
  if (this->_internal_has_bosspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bosspos_);
  }

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // uint32 currentHp = 2;
  if (this->_internal_currenthp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currenthp());
  }

  // uint32 maxHp = 3;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 bossState = 6;
  if (this->_internal_bossstate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bossstate());
  }

  // float curSpeed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curspeed = this->_internal_curspeed();
  uint32_t raw_curspeed;
  memcpy(&raw_curspeed, &tmp_curspeed, sizeof(tmp_curspeed));
  if (raw_curspeed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MONSTER_AI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MONSTER_AI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MONSTER_AI::GetClassData() const { return &_class_data_; }


void CS_MONSTER_AI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MONSTER_AI*>(&to_msg);
  auto& from = static_cast<const CS_MONSTER_AI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MONSTER_AI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetmovementpos()) {
    _this->_internal_mutable_targetmovementpos()->::game::Position::MergeFrom(
        from._internal_targetmovementpos());
  }
  if (from._internal_has_bosspos()) {
    _this->_internal_mutable_bosspos()->::game::Position::MergeFrom(
        from._internal_bosspos());
  }
  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  if (from._internal_currenthp() != 0) {
    _this->_internal_set_currenthp(from._internal_currenthp());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_bossstate() != 0) {
    _this->_internal_set_bossstate(from._internal_bossstate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curspeed = from._internal_curspeed();
  uint32_t raw_curspeed;
  memcpy(&raw_curspeed, &tmp_curspeed, sizeof(tmp_curspeed));
  if (raw_curspeed != 0) {
    _this->_internal_set_curspeed(from._internal_curspeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MONSTER_AI::CopyFrom(const CS_MONSTER_AI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MONSTER_AI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MONSTER_AI::IsInitialized() const {
  return true;
}

void CS_MONSTER_AI::InternalSwap(CS_MONSTER_AI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MONSTER_AI, _impl_.curspeed_)
      + sizeof(CS_MONSTER_AI::_impl_.curspeed_)
      - PROTOBUF_FIELD_OFFSET(CS_MONSTER_AI, _impl_.targetmovementpos_)>(
          reinterpret_cast<char*>(&_impl_.targetmovementpos_),
          reinterpret_cast<char*>(&other->_impl_.targetmovementpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MONSTER_AI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[49]);
}

// ===================================================================

class CS_MONSTER_ROTATE::_Internal {
 public:
};

CS_MONSTER_ROTATE::CS_MONSTER_ROTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_MONSTER_ROTATE)
}
CS_MONSTER_ROTATE::CS_MONSTER_ROTATE(const CS_MONSTER_ROTATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_MONSTER_ROTATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , decltype(_impl_.rotatey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotatey_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.rotatey_));
  // @@protoc_insertion_point(copy_constructor:game.CS_MONSTER_ROTATE)
}

inline void CS_MONSTER_ROTATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){0u}
    , decltype(_impl_.rotatey_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_MONSTER_ROTATE::~CS_MONSTER_ROTATE() {
  // @@protoc_insertion_point(destructor:game.CS_MONSTER_ROTATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_MONSTER_ROTATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_MONSTER_ROTATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_MONSTER_ROTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_MONSTER_ROTATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotatey_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.rotatey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_MONSTER_ROTATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rotateY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.rotatey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_MONSTER_ROTATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_MONSTER_ROTATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // float rotateY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = this->_internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_rotatey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_MONSTER_ROTATE)
  return target;
}

size_t CS_MONSTER_ROTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_MONSTER_ROTATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // float rotateY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = this->_internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_MONSTER_ROTATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_MONSTER_ROTATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_MONSTER_ROTATE::GetClassData() const { return &_class_data_; }


void CS_MONSTER_ROTATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_MONSTER_ROTATE*>(&to_msg);
  auto& from = static_cast<const CS_MONSTER_ROTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_MONSTER_ROTATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = from._internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    _this->_internal_set_rotatey(from._internal_rotatey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_MONSTER_ROTATE::CopyFrom(const CS_MONSTER_ROTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_MONSTER_ROTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MONSTER_ROTATE::IsInitialized() const {
  return true;
}

void CS_MONSTER_ROTATE::InternalSwap(CS_MONSTER_ROTATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_MONSTER_ROTATE, _impl_.rotatey_)
      + sizeof(CS_MONSTER_ROTATE::_impl_.rotatey_)
      - PROTOBUF_FIELD_OFFSET(CS_MONSTER_ROTATE, _impl_.aiid_)>(
          reinterpret_cast<char*>(&_impl_.aiid_),
          reinterpret_cast<char*>(&other->_impl_.aiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_MONSTER_ROTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[50]);
}

// ===================================================================

class SC_MONSTER_AI::_Internal {
 public:
  static const ::game::Position& targetmovementpos(const SC_MONSTER_AI* msg);
  static const ::game::Position& bosspos(const SC_MONSTER_AI* msg);
};

const ::game::Position&
SC_MONSTER_AI::_Internal::targetmovementpos(const SC_MONSTER_AI* msg) {
  return *msg->_impl_.targetmovementpos_;
}
const ::game::Position&
SC_MONSTER_AI::_Internal::bosspos(const SC_MONSTER_AI* msg) {
  return *msg->_impl_.bosspos_;
}
SC_MONSTER_AI::SC_MONSTER_AI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MONSTER_AI)
}
SC_MONSTER_AI::SC_MONSTER_AI(const SC_MONSTER_AI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MONSTER_AI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetmovementpos_){nullptr}
    , decltype(_impl_.bosspos_){nullptr}
    , decltype(_impl_.aiid_){}
    , decltype(_impl_.currenthp_){}
    , decltype(_impl_.maxhp_){}
    , decltype(_impl_.bossstate_){}
    , decltype(_impl_.curspeed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetmovementpos()) {
    _this->_impl_.targetmovementpos_ = new ::game::Position(*from._impl_.targetmovementpos_);
  }
  if (from._internal_has_bosspos()) {
    _this->_impl_.bosspos_ = new ::game::Position(*from._impl_.bosspos_);
  }
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curspeed_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.curspeed_));
  // @@protoc_insertion_point(copy_constructor:game.SC_MONSTER_AI)
}

inline void SC_MONSTER_AI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetmovementpos_){nullptr}
    , decltype(_impl_.bosspos_){nullptr}
    , decltype(_impl_.aiid_){0u}
    , decltype(_impl_.currenthp_){0u}
    , decltype(_impl_.maxhp_){0u}
    , decltype(_impl_.bossstate_){0u}
    , decltype(_impl_.curspeed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MONSTER_AI::~SC_MONSTER_AI() {
  // @@protoc_insertion_point(destructor:game.SC_MONSTER_AI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MONSTER_AI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.targetmovementpos_;
  if (this != internal_default_instance()) delete _impl_.bosspos_;
}

void SC_MONSTER_AI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MONSTER_AI::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MONSTER_AI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.targetmovementpos_ != nullptr) {
    delete _impl_.targetmovementpos_;
  }
  _impl_.targetmovementpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bosspos_ != nullptr) {
    delete _impl_.bosspos_;
  }
  _impl_.bosspos_ = nullptr;
  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curspeed_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.curspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MONSTER_AI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 currentHp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.currenthp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position targetMovementPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetmovementpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.Position bossPos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bosspos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bossState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.bossstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float curSpeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.curspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MONSTER_AI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MONSTER_AI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // uint32 currentHp = 2;
  if (this->_internal_currenthp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currenthp(), target);
  }

  // uint32 maxHp = 3;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // .game.Position targetMovementPos = 4;
  if (this->_internal_has_targetmovementpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::targetmovementpos(this),
        _Internal::targetmovementpos(this).GetCachedSize(), target, stream);
  }

  // .game.Position bossPos = 5;
  if (this->_internal_has_bosspos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bosspos(this),
        _Internal::bosspos(this).GetCachedSize(), target, stream);
  }

  // uint32 bossState = 6;
  if (this->_internal_bossstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bossstate(), target);
  }

  // float curSpeed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curspeed = this->_internal_curspeed();
  uint32_t raw_curspeed;
  memcpy(&raw_curspeed, &tmp_curspeed, sizeof(tmp_curspeed));
  if (raw_curspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_curspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MONSTER_AI)
  return target;
}

size_t SC_MONSTER_AI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MONSTER_AI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.Position targetMovementPos = 4;
  if (this->_internal_has_targetmovementpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.targetmovementpos_);
  }

  // .game.Position bossPos = 5;
  if (this->_internal_has_bosspos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bosspos_);
  }

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // uint32 currentHp = 2;
  if (this->_internal_currenthp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currenthp());
  }

  // uint32 maxHp = 3;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 bossState = 6;
  if (this->_internal_bossstate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bossstate());
  }

  // float curSpeed = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curspeed = this->_internal_curspeed();
  uint32_t raw_curspeed;
  memcpy(&raw_curspeed, &tmp_curspeed, sizeof(tmp_curspeed));
  if (raw_curspeed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MONSTER_AI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MONSTER_AI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MONSTER_AI::GetClassData() const { return &_class_data_; }


void SC_MONSTER_AI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MONSTER_AI*>(&to_msg);
  auto& from = static_cast<const SC_MONSTER_AI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MONSTER_AI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetmovementpos()) {
    _this->_internal_mutable_targetmovementpos()->::game::Position::MergeFrom(
        from._internal_targetmovementpos());
  }
  if (from._internal_has_bosspos()) {
    _this->_internal_mutable_bosspos()->::game::Position::MergeFrom(
        from._internal_bosspos());
  }
  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  if (from._internal_currenthp() != 0) {
    _this->_internal_set_currenthp(from._internal_currenthp());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_bossstate() != 0) {
    _this->_internal_set_bossstate(from._internal_bossstate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_curspeed = from._internal_curspeed();
  uint32_t raw_curspeed;
  memcpy(&raw_curspeed, &tmp_curspeed, sizeof(tmp_curspeed));
  if (raw_curspeed != 0) {
    _this->_internal_set_curspeed(from._internal_curspeed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MONSTER_AI::CopyFrom(const SC_MONSTER_AI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MONSTER_AI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MONSTER_AI::IsInitialized() const {
  return true;
}

void SC_MONSTER_AI::InternalSwap(SC_MONSTER_AI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MONSTER_AI, _impl_.curspeed_)
      + sizeof(SC_MONSTER_AI::_impl_.curspeed_)
      - PROTOBUF_FIELD_OFFSET(SC_MONSTER_AI, _impl_.targetmovementpos_)>(
          reinterpret_cast<char*>(&_impl_.targetmovementpos_),
          reinterpret_cast<char*>(&other->_impl_.targetmovementpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MONSTER_AI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[51]);
}

// ===================================================================

class SC_MONSTER_ROTATE::_Internal {
 public:
};

SC_MONSTER_ROTATE::SC_MONSTER_ROTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_MONSTER_ROTATE)
}
SC_MONSTER_ROTATE::SC_MONSTER_ROTATE(const SC_MONSTER_ROTATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_MONSTER_ROTATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){}
    , decltype(_impl_.rotatey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aiid_, &from._impl_.aiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rotatey_) -
    reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.rotatey_));
  // @@protoc_insertion_point(copy_constructor:game.SC_MONSTER_ROTATE)
}

inline void SC_MONSTER_ROTATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aiid_){0u}
    , decltype(_impl_.rotatey_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_MONSTER_ROTATE::~SC_MONSTER_ROTATE() {
  // @@protoc_insertion_point(destructor:game.SC_MONSTER_ROTATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_MONSTER_ROTATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_MONSTER_ROTATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_MONSTER_ROTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_MONSTER_ROTATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.aiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rotatey_) -
      reinterpret_cast<char*>(&_impl_.aiid_)) + sizeof(_impl_.rotatey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_MONSTER_ROTATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 aiID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rotateY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.rotatey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_MONSTER_ROTATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_MONSTER_ROTATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_aiid(), target);
  }

  // float rotateY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = this->_internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_rotatey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_MONSTER_ROTATE)
  return target;
}

size_t SC_MONSTER_ROTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_MONSTER_ROTATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 aiID = 1;
  if (this->_internal_aiid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aiid());
  }

  // float rotateY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = this->_internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_MONSTER_ROTATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_MONSTER_ROTATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_MONSTER_ROTATE::GetClassData() const { return &_class_data_; }


void SC_MONSTER_ROTATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_MONSTER_ROTATE*>(&to_msg);
  auto& from = static_cast<const SC_MONSTER_ROTATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_MONSTER_ROTATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aiid() != 0) {
    _this->_internal_set_aiid(from._internal_aiid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rotatey = from._internal_rotatey();
  uint32_t raw_rotatey;
  memcpy(&raw_rotatey, &tmp_rotatey, sizeof(tmp_rotatey));
  if (raw_rotatey != 0) {
    _this->_internal_set_rotatey(from._internal_rotatey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_MONSTER_ROTATE::CopyFrom(const SC_MONSTER_ROTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_MONSTER_ROTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MONSTER_ROTATE::IsInitialized() const {
  return true;
}

void SC_MONSTER_ROTATE::InternalSwap(SC_MONSTER_ROTATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_MONSTER_ROTATE, _impl_.rotatey_)
      + sizeof(SC_MONSTER_ROTATE::_impl_.rotatey_)
      - PROTOBUF_FIELD_OFFSET(SC_MONSTER_ROTATE, _impl_.aiid_)>(
          reinterpret_cast<char*>(&_impl_.aiid_),
          reinterpret_cast<char*>(&other->_impl_.aiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_MONSTER_ROTATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[52]);
}

// ===================================================================

class CS_CHECK_TIMEOUT::_Internal {
 public:
};

CS_CHECK_TIMEOUT::CS_CHECK_TIMEOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_CHECK_TIMEOUT)
}
CS_CHECK_TIMEOUT::CS_CHECK_TIMEOUT(const CS_CHECK_TIMEOUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_CHECK_TIMEOUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bcheck_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bcheck_ = from._impl_.bcheck_;
  // @@protoc_insertion_point(copy_constructor:game.CS_CHECK_TIMEOUT)
}

inline void CS_CHECK_TIMEOUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bcheck_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_CHECK_TIMEOUT::~CS_CHECK_TIMEOUT() {
  // @@protoc_insertion_point(destructor:game.CS_CHECK_TIMEOUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_CHECK_TIMEOUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_CHECK_TIMEOUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_CHECK_TIMEOUT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_CHECK_TIMEOUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bcheck_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_CHECK_TIMEOUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bCheck = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_CHECK_TIMEOUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_CHECK_TIMEOUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bCheck = 1;
  if (this->_internal_bcheck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bcheck(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_CHECK_TIMEOUT)
  return target;
}

size_t CS_CHECK_TIMEOUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_CHECK_TIMEOUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bCheck = 1;
  if (this->_internal_bcheck() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_CHECK_TIMEOUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_CHECK_TIMEOUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_CHECK_TIMEOUT::GetClassData() const { return &_class_data_; }


void CS_CHECK_TIMEOUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_CHECK_TIMEOUT*>(&to_msg);
  auto& from = static_cast<const CS_CHECK_TIMEOUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_CHECK_TIMEOUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bcheck() != 0) {
    _this->_internal_set_bcheck(from._internal_bcheck());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_CHECK_TIMEOUT::CopyFrom(const CS_CHECK_TIMEOUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_CHECK_TIMEOUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CHECK_TIMEOUT::IsInitialized() const {
  return true;
}

void CS_CHECK_TIMEOUT::InternalSwap(CS_CHECK_TIMEOUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bcheck_, other->_impl_.bcheck_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CHECK_TIMEOUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[53]);
}

// ===================================================================

class CS_TEST_PACKET1::_Internal {
 public:
};

CS_TEST_PACKET1::CS_TEST_PACKET1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_TEST_PACKET1)
}
CS_TEST_PACKET1::CS_TEST_PACKET1(const CS_TEST_PACKET1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_TEST_PACKET1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tempdata_){from._impl_.tempdata_}
    , /*decltype(_impl_._tempdata_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.CS_TEST_PACKET1)
}

inline void CS_TEST_PACKET1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tempdata_){arena}
    , /*decltype(_impl_._tempdata_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_TEST_PACKET1::~CS_TEST_PACKET1() {
  // @@protoc_insertion_point(destructor:game.CS_TEST_PACKET1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_TEST_PACKET1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tempdata_.~RepeatedField();
}

void CS_TEST_PACKET1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_TEST_PACKET1::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_TEST_PACKET1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tempdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_TEST_PACKET1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 tempData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tempdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_tempdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_TEST_PACKET1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_TEST_PACKET1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 tempData = 1;
  {
    int byte_size = _impl_._tempdata_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_tempdata(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_TEST_PACKET1)
  return target;
}

size_t CS_TEST_PACKET1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_TEST_PACKET1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tempData = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tempdata_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tempdata_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_TEST_PACKET1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_TEST_PACKET1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_TEST_PACKET1::GetClassData() const { return &_class_data_; }


void CS_TEST_PACKET1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_TEST_PACKET1*>(&to_msg);
  auto& from = static_cast<const CS_TEST_PACKET1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_TEST_PACKET1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tempdata_.MergeFrom(from._impl_.tempdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_TEST_PACKET1::CopyFrom(const CS_TEST_PACKET1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_TEST_PACKET1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEST_PACKET1::IsInitialized() const {
  return true;
}

void CS_TEST_PACKET1::InternalSwap(CS_TEST_PACKET1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tempdata_.InternalSwap(&other->_impl_.tempdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEST_PACKET1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[54]);
}

// ===================================================================

class CS_TEST_PACKET2::_Internal {
 public:
};

CS_TEST_PACKET2::CS_TEST_PACKET2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_TEST_PACKET2)
}
CS_TEST_PACKET2::CS_TEST_PACKET2(const CS_TEST_PACKET2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_TEST_PACKET2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tempdata_){from._impl_.tempdata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.CS_TEST_PACKET2)
}

inline void CS_TEST_PACKET2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tempdata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_TEST_PACKET2::~CS_TEST_PACKET2() {
  // @@protoc_insertion_point(destructor:game.CS_TEST_PACKET2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_TEST_PACKET2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tempdata_.~RepeatedPtrField();
}

void CS_TEST_PACKET2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_TEST_PACKET2::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_TEST_PACKET2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tempdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_TEST_PACKET2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.PlayerInfo tempData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tempdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_TEST_PACKET2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_TEST_PACKET2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PlayerInfo tempData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tempdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_tempdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_TEST_PACKET2)
  return target;
}

size_t CS_TEST_PACKET2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_TEST_PACKET2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.PlayerInfo tempData = 1;
  total_size += 1UL * this->_internal_tempdata_size();
  for (const auto& msg : this->_impl_.tempdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_TEST_PACKET2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_TEST_PACKET2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_TEST_PACKET2::GetClassData() const { return &_class_data_; }


void CS_TEST_PACKET2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_TEST_PACKET2*>(&to_msg);
  auto& from = static_cast<const CS_TEST_PACKET2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_TEST_PACKET2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tempdata_.MergeFrom(from._impl_.tempdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_TEST_PACKET2::CopyFrom(const CS_TEST_PACKET2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_TEST_PACKET2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_TEST_PACKET2::IsInitialized() const {
  return true;
}

void CS_TEST_PACKET2::InternalSwap(CS_TEST_PACKET2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tempdata_.InternalSwap(&other->_impl_.tempdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_TEST_PACKET2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[55]);
}

// ===================================================================

class SC_TEST_PACKET::_Internal {
 public:
};

SC_TEST_PACKET::SC_TEST_PACKET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_TEST_PACKET)
}
SC_TEST_PACKET::SC_TEST_PACKET(const SC_TEST_PACKET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_TEST_PACKET* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tempdata_){from._impl_.tempdata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.SC_TEST_PACKET)
}

inline void SC_TEST_PACKET::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tempdata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_TEST_PACKET::~SC_TEST_PACKET() {
  // @@protoc_insertion_point(destructor:game.SC_TEST_PACKET)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_TEST_PACKET::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tempdata_.~RepeatedPtrField();
}

void SC_TEST_PACKET::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_TEST_PACKET::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_TEST_PACKET)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tempdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_TEST_PACKET::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.PlayerInfo tempData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tempdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_TEST_PACKET::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_TEST_PACKET)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PlayerInfo tempData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tempdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_tempdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_TEST_PACKET)
  return target;
}

size_t SC_TEST_PACKET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_TEST_PACKET)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.PlayerInfo tempData = 1;
  total_size += 1UL * this->_internal_tempdata_size();
  for (const auto& msg : this->_impl_.tempdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_TEST_PACKET::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_TEST_PACKET::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_TEST_PACKET::GetClassData() const { return &_class_data_; }


void SC_TEST_PACKET::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_TEST_PACKET*>(&to_msg);
  auto& from = static_cast<const SC_TEST_PACKET&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_TEST_PACKET)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tempdata_.MergeFrom(from._impl_.tempdata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_TEST_PACKET::CopyFrom(const SC_TEST_PACKET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_TEST_PACKET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_TEST_PACKET::IsInitialized() const {
  return true;
}

void SC_TEST_PACKET::InternalSwap(SC_TEST_PACKET* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tempdata_.InternalSwap(&other->_impl_.tempdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_TEST_PACKET::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[56]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::PlayerInfo*
Arena::CreateMaybeMessage< ::game::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::game::Position*
Arena::CreateMaybeMessage< ::game::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_FIND_ID_REQUEST*
Arena::CreateMaybeMessage< ::game::CS_FIND_ID_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_FIND_ID_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_FIND_PW_REQUEST*
Arena::CreateMaybeMessage< ::game::CS_FIND_PW_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_FIND_PW_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_LOGIN_REQUEST*
Arena::CreateMaybeMessage< ::game::CS_LOGIN_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_LOGIN_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_REQUEST_CHARACTER_INFO*
Arena::CreateMaybeMessage< ::game::CS_REQUEST_CHARACTER_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_REQUEST_CHARACTER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_REQUEST_ITEM_INFO*
Arena::CreateMaybeMessage< ::game::CS_REQUEST_ITEM_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_REQUEST_ITEM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_SIGNUP_REQUEST*
Arena::CreateMaybeMessage< ::game::CS_SIGNUP_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_SIGNUP_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_FIND_ID_RESPONSE*
Arena::CreateMaybeMessage< ::game::SC_FIND_ID_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_FIND_ID_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_FIND_PW_RESPONSE*
Arena::CreateMaybeMessage< ::game::SC_FIND_PW_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_FIND_PW_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_LOGIN_RESPONSE*
Arena::CreateMaybeMessage< ::game::SC_LOGIN_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_LOGIN_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_REQUEST_ITEM_INFO*
Arena::CreateMaybeMessage< ::game::SC_REQUEST_ITEM_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_REQUEST_ITEM_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_RESPONSE_CHARACTER_INFO*
Arena::CreateMaybeMessage< ::game::SC_RESPONSE_CHARACTER_INFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_RESPONSE_CHARACTER_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_SIGNUP_RESPONSE*
Arena::CreateMaybeMessage< ::game::SC_SIGNUP_RESPONSE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_SIGNUP_RESPONSE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_ACCEPT_PARTY*
Arena::CreateMaybeMessage< ::game::CS_ACCEPT_PARTY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_ACCEPT_PARTY >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_CANCEL_ENTERING_DUNGEON*
Arena::CreateMaybeMessage< ::game::CS_CANCEL_ENTERING_DUNGEON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_CANCEL_ENTERING_DUNGEON >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_CREATE_MONSTER*
Arena::CreateMaybeMessage< ::game::CS_CREATE_MONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_CREATE_MONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MAKE_PARTY*
Arena::CreateMaybeMessage< ::game::CS_MAKE_PARTY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MAKE_PARTY >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_REGISTER_REQUEST*
Arena::CreateMaybeMessage< ::game::CS_REGISTER_REQUEST >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_REGISTER_REQUEST >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_REQUEST_ENTER_DUNGEON*
Arena::CreateMaybeMessage< ::game::CS_REQUEST_ENTER_DUNGEON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_REQUEST_ENTER_DUNGEON >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_RESPONSE_ENTER_DUNGEON_END*
Arena::CreateMaybeMessage< ::game::CS_RESPONSE_ENTER_DUNGEON_END >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_RESPONSE_ENTER_DUNGEON_END >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_SPAWN_CHARACTER*
Arena::CreateMaybeMessage< ::game::CS_SPAWN_CHARACTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_SPAWN_CHARACTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_START_AI_CALCULATE*
Arena::CreateMaybeMessage< ::game::CS_START_AI_CALCULATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_START_AI_CALCULATE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_STOP_AI_CALCULATE*
Arena::CreateMaybeMessage< ::game::CS_STOP_AI_CALCULATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_STOP_AI_CALCULATE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ACCEPT_PARTY*
Arena::CreateMaybeMessage< ::game::SC_ACCEPT_PARTY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ACCEPT_PARTY >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CANCEL_ENTERING_DUNGEON*
Arena::CreateMaybeMessage< ::game::SC_CANCEL_ENTERING_DUNGEON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CANCEL_ENTERING_DUNGEON >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CREATE_MONSTER*
Arena::CreateMaybeMessage< ::game::SC_CREATE_MONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CREATE_MONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MAKE_PARTY*
Arena::CreateMaybeMessage< ::game::SC_MAKE_PARTY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MAKE_PARTY >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_PREPARE_ENTERING_DUNGEON*
Arena::CreateMaybeMessage< ::game::SC_PREPARE_ENTERING_DUNGEON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_PREPARE_ENTERING_DUNGEON >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_REMOVE_CHARACTER*
Arena::CreateMaybeMessage< ::game::SC_REMOVE_CHARACTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_REMOVE_CHARACTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN*
Arena::CreateMaybeMessage< ::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_RESPONSE_ENTER_DUNGEON_END*
Arena::CreateMaybeMessage< ::game::SC_RESPONSE_ENTER_DUNGEON_END >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_RESPONSE_ENTER_DUNGEON_END >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_SPAWN_CHARACTER*
Arena::CreateMaybeMessage< ::game::SC_SPAWN_CHARACTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_SPAWN_CHARACTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_START_AI_CALCULATE*
Arena::CreateMaybeMessage< ::game::SC_START_AI_CALCULATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_START_AI_CALCULATE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_STOP_AI_CALCULATE*
Arena::CreateMaybeMessage< ::game::SC_STOP_AI_CALCULATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_STOP_AI_CALCULATE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_CHAT*
Arena::CreateMaybeMessage< ::game::CS_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CHAT*
Arena::CreateMaybeMessage< ::game::SC_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_KEYINFO*
Arena::CreateMaybeMessage< ::game::CS_KEYINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_KEYINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MONSTER_ATTACK*
Arena::CreateMaybeMessage< ::game::CS_MONSTER_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MONSTER_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MONSTER_DIE*
Arena::CreateMaybeMessage< ::game::CS_MONSTER_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MONSTER_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_PLAYER_ATTACK*
Arena::CreateMaybeMessage< ::game::CS_PLAYER_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_PLAYER_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_PLAYER_DIE*
Arena::CreateMaybeMessage< ::game::CS_PLAYER_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_PLAYER_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_POSITION_SYNC*
Arena::CreateMaybeMessage< ::game::CS_POSITION_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_POSITION_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_KEYINFO*
Arena::CreateMaybeMessage< ::game::SC_KEYINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_KEYINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MONSTER_DAMAGED*
Arena::CreateMaybeMessage< ::game::SC_MONSTER_DAMAGED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MONSTER_DAMAGED >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MONSTER_DIE*
Arena::CreateMaybeMessage< ::game::SC_MONSTER_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MONSTER_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_PLAYER_DAMAGED*
Arena::CreateMaybeMessage< ::game::SC_PLAYER_DAMAGED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_PLAYER_DAMAGED >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_PLAYER_DIE*
Arena::CreateMaybeMessage< ::game::SC_PLAYER_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_PLAYER_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_POSITION_SYNC*
Arena::CreateMaybeMessage< ::game::SC_POSITION_SYNC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_POSITION_SYNC >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MONSTER_AI*
Arena::CreateMaybeMessage< ::game::CS_MONSTER_AI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MONSTER_AI >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_MONSTER_ROTATE*
Arena::CreateMaybeMessage< ::game::CS_MONSTER_ROTATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_MONSTER_ROTATE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MONSTER_AI*
Arena::CreateMaybeMessage< ::game::SC_MONSTER_AI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MONSTER_AI >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_MONSTER_ROTATE*
Arena::CreateMaybeMessage< ::game::SC_MONSTER_ROTATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_MONSTER_ROTATE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_CHECK_TIMEOUT*
Arena::CreateMaybeMessage< ::game::CS_CHECK_TIMEOUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_CHECK_TIMEOUT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_TEST_PACKET1*
Arena::CreateMaybeMessage< ::game::CS_TEST_PACKET1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_TEST_PACKET1 >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_TEST_PACKET2*
Arena::CreateMaybeMessage< ::game::CS_TEST_PACKET2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_TEST_PACKET2 >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_TEST_PACKET*
Arena::CreateMaybeMessage< ::game::SC_TEST_PACKET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_TEST_PACKET >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
