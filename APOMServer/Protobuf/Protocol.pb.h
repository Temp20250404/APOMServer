// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace game {
class CS_ACCEPT_PARTY;
struct CS_ACCEPT_PARTYDefaultTypeInternal;
extern CS_ACCEPT_PARTYDefaultTypeInternal _CS_ACCEPT_PARTY_default_instance_;
class CS_CANCEL_ENTERING_DUNGEON;
struct CS_CANCEL_ENTERING_DUNGEONDefaultTypeInternal;
extern CS_CANCEL_ENTERING_DUNGEONDefaultTypeInternal _CS_CANCEL_ENTERING_DUNGEON_default_instance_;
class CS_CHAT;
struct CS_CHATDefaultTypeInternal;
extern CS_CHATDefaultTypeInternal _CS_CHAT_default_instance_;
class CS_CHECK_TIMEOUT;
struct CS_CHECK_TIMEOUTDefaultTypeInternal;
extern CS_CHECK_TIMEOUTDefaultTypeInternal _CS_CHECK_TIMEOUT_default_instance_;
class CS_CREATE_MONSTER;
struct CS_CREATE_MONSTERDefaultTypeInternal;
extern CS_CREATE_MONSTERDefaultTypeInternal _CS_CREATE_MONSTER_default_instance_;
class CS_FIND_ID_REQUEST;
struct CS_FIND_ID_REQUESTDefaultTypeInternal;
extern CS_FIND_ID_REQUESTDefaultTypeInternal _CS_FIND_ID_REQUEST_default_instance_;
class CS_FIND_PW_REQUEST;
struct CS_FIND_PW_REQUESTDefaultTypeInternal;
extern CS_FIND_PW_REQUESTDefaultTypeInternal _CS_FIND_PW_REQUEST_default_instance_;
class CS_KEYINFO;
struct CS_KEYINFODefaultTypeInternal;
extern CS_KEYINFODefaultTypeInternal _CS_KEYINFO_default_instance_;
class CS_LOGIN_REQUEST;
struct CS_LOGIN_REQUESTDefaultTypeInternal;
extern CS_LOGIN_REQUESTDefaultTypeInternal _CS_LOGIN_REQUEST_default_instance_;
class CS_MAKE_PARTY;
struct CS_MAKE_PARTYDefaultTypeInternal;
extern CS_MAKE_PARTYDefaultTypeInternal _CS_MAKE_PARTY_default_instance_;
class CS_MONSTER_AI;
struct CS_MONSTER_AIDefaultTypeInternal;
extern CS_MONSTER_AIDefaultTypeInternal _CS_MONSTER_AI_default_instance_;
class CS_MONSTER_ATTACK;
struct CS_MONSTER_ATTACKDefaultTypeInternal;
extern CS_MONSTER_ATTACKDefaultTypeInternal _CS_MONSTER_ATTACK_default_instance_;
class CS_MONSTER_DIE;
struct CS_MONSTER_DIEDefaultTypeInternal;
extern CS_MONSTER_DIEDefaultTypeInternal _CS_MONSTER_DIE_default_instance_;
class CS_MONSTER_ROTATE;
struct CS_MONSTER_ROTATEDefaultTypeInternal;
extern CS_MONSTER_ROTATEDefaultTypeInternal _CS_MONSTER_ROTATE_default_instance_;
class CS_PLAYER_ATTACK;
struct CS_PLAYER_ATTACKDefaultTypeInternal;
extern CS_PLAYER_ATTACKDefaultTypeInternal _CS_PLAYER_ATTACK_default_instance_;
class CS_PLAYER_DIE;
struct CS_PLAYER_DIEDefaultTypeInternal;
extern CS_PLAYER_DIEDefaultTypeInternal _CS_PLAYER_DIE_default_instance_;
class CS_POSITION_SYNC;
struct CS_POSITION_SYNCDefaultTypeInternal;
extern CS_POSITION_SYNCDefaultTypeInternal _CS_POSITION_SYNC_default_instance_;
class CS_REGISTER_REQUEST;
struct CS_REGISTER_REQUESTDefaultTypeInternal;
extern CS_REGISTER_REQUESTDefaultTypeInternal _CS_REGISTER_REQUEST_default_instance_;
class CS_REQUEST_CHARACTER_INFO;
struct CS_REQUEST_CHARACTER_INFODefaultTypeInternal;
extern CS_REQUEST_CHARACTER_INFODefaultTypeInternal _CS_REQUEST_CHARACTER_INFO_default_instance_;
class CS_REQUEST_ENTER_DUNGEON;
struct CS_REQUEST_ENTER_DUNGEONDefaultTypeInternal;
extern CS_REQUEST_ENTER_DUNGEONDefaultTypeInternal _CS_REQUEST_ENTER_DUNGEON_default_instance_;
class CS_REQUEST_ITEM_INFO;
struct CS_REQUEST_ITEM_INFODefaultTypeInternal;
extern CS_REQUEST_ITEM_INFODefaultTypeInternal _CS_REQUEST_ITEM_INFO_default_instance_;
class CS_RESPONSE_ENTER_DUNGEON_END;
struct CS_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal;
extern CS_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal _CS_RESPONSE_ENTER_DUNGEON_END_default_instance_;
class CS_SIGNUP_REQUEST;
struct CS_SIGNUP_REQUESTDefaultTypeInternal;
extern CS_SIGNUP_REQUESTDefaultTypeInternal _CS_SIGNUP_REQUEST_default_instance_;
class CS_SPAWN_CHARACTER;
struct CS_SPAWN_CHARACTERDefaultTypeInternal;
extern CS_SPAWN_CHARACTERDefaultTypeInternal _CS_SPAWN_CHARACTER_default_instance_;
class CS_START_AI_CALCULATE;
struct CS_START_AI_CALCULATEDefaultTypeInternal;
extern CS_START_AI_CALCULATEDefaultTypeInternal _CS_START_AI_CALCULATE_default_instance_;
class CS_STOP_AI_CALCULATE;
struct CS_STOP_AI_CALCULATEDefaultTypeInternal;
extern CS_STOP_AI_CALCULATEDefaultTypeInternal _CS_STOP_AI_CALCULATE_default_instance_;
class CS_TEST_PACKET1;
struct CS_TEST_PACKET1DefaultTypeInternal;
extern CS_TEST_PACKET1DefaultTypeInternal _CS_TEST_PACKET1_default_instance_;
class CS_TEST_PACKET2;
struct CS_TEST_PACKET2DefaultTypeInternal;
extern CS_TEST_PACKET2DefaultTypeInternal _CS_TEST_PACKET2_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SC_ACCEPT_PARTY;
struct SC_ACCEPT_PARTYDefaultTypeInternal;
extern SC_ACCEPT_PARTYDefaultTypeInternal _SC_ACCEPT_PARTY_default_instance_;
class SC_CANCEL_ENTERING_DUNGEON;
struct SC_CANCEL_ENTERING_DUNGEONDefaultTypeInternal;
extern SC_CANCEL_ENTERING_DUNGEONDefaultTypeInternal _SC_CANCEL_ENTERING_DUNGEON_default_instance_;
class SC_CHAT;
struct SC_CHATDefaultTypeInternal;
extern SC_CHATDefaultTypeInternal _SC_CHAT_default_instance_;
class SC_CREATE_MONSTER;
struct SC_CREATE_MONSTERDefaultTypeInternal;
extern SC_CREATE_MONSTERDefaultTypeInternal _SC_CREATE_MONSTER_default_instance_;
class SC_FIND_ID_RESPONSE;
struct SC_FIND_ID_RESPONSEDefaultTypeInternal;
extern SC_FIND_ID_RESPONSEDefaultTypeInternal _SC_FIND_ID_RESPONSE_default_instance_;
class SC_FIND_PW_RESPONSE;
struct SC_FIND_PW_RESPONSEDefaultTypeInternal;
extern SC_FIND_PW_RESPONSEDefaultTypeInternal _SC_FIND_PW_RESPONSE_default_instance_;
class SC_KEYINFO;
struct SC_KEYINFODefaultTypeInternal;
extern SC_KEYINFODefaultTypeInternal _SC_KEYINFO_default_instance_;
class SC_LOGIN_RESPONSE;
struct SC_LOGIN_RESPONSEDefaultTypeInternal;
extern SC_LOGIN_RESPONSEDefaultTypeInternal _SC_LOGIN_RESPONSE_default_instance_;
class SC_MAKE_PARTY;
struct SC_MAKE_PARTYDefaultTypeInternal;
extern SC_MAKE_PARTYDefaultTypeInternal _SC_MAKE_PARTY_default_instance_;
class SC_MONSTER_AI;
struct SC_MONSTER_AIDefaultTypeInternal;
extern SC_MONSTER_AIDefaultTypeInternal _SC_MONSTER_AI_default_instance_;
class SC_MONSTER_DAMAGED;
struct SC_MONSTER_DAMAGEDDefaultTypeInternal;
extern SC_MONSTER_DAMAGEDDefaultTypeInternal _SC_MONSTER_DAMAGED_default_instance_;
class SC_MONSTER_DIE;
struct SC_MONSTER_DIEDefaultTypeInternal;
extern SC_MONSTER_DIEDefaultTypeInternal _SC_MONSTER_DIE_default_instance_;
class SC_MONSTER_ROTATE;
struct SC_MONSTER_ROTATEDefaultTypeInternal;
extern SC_MONSTER_ROTATEDefaultTypeInternal _SC_MONSTER_ROTATE_default_instance_;
class SC_PLAYER_DAMAGED;
struct SC_PLAYER_DAMAGEDDefaultTypeInternal;
extern SC_PLAYER_DAMAGEDDefaultTypeInternal _SC_PLAYER_DAMAGED_default_instance_;
class SC_PLAYER_DIE;
struct SC_PLAYER_DIEDefaultTypeInternal;
extern SC_PLAYER_DIEDefaultTypeInternal _SC_PLAYER_DIE_default_instance_;
class SC_POSITION_SYNC;
struct SC_POSITION_SYNCDefaultTypeInternal;
extern SC_POSITION_SYNCDefaultTypeInternal _SC_POSITION_SYNC_default_instance_;
class SC_PREPARE_ENTERING_DUNGEON;
struct SC_PREPARE_ENTERING_DUNGEONDefaultTypeInternal;
extern SC_PREPARE_ENTERING_DUNGEONDefaultTypeInternal _SC_PREPARE_ENTERING_DUNGEON_default_instance_;
class SC_REMOVE_CHARACTER;
struct SC_REMOVE_CHARACTERDefaultTypeInternal;
extern SC_REMOVE_CHARACTERDefaultTypeInternal _SC_REMOVE_CHARACTER_default_instance_;
class SC_REQUEST_ITEM_INFO;
struct SC_REQUEST_ITEM_INFODefaultTypeInternal;
extern SC_REQUEST_ITEM_INFODefaultTypeInternal _SC_REQUEST_ITEM_INFO_default_instance_;
class SC_RESPONSE_CHARACTER_INFO;
struct SC_RESPONSE_CHARACTER_INFODefaultTypeInternal;
extern SC_RESPONSE_CHARACTER_INFODefaultTypeInternal _SC_RESPONSE_CHARACTER_INFO_default_instance_;
class SC_RESPONSE_ENTER_DUNGEON_BEGIN;
struct SC_RESPONSE_ENTER_DUNGEON_BEGINDefaultTypeInternal;
extern SC_RESPONSE_ENTER_DUNGEON_BEGINDefaultTypeInternal _SC_RESPONSE_ENTER_DUNGEON_BEGIN_default_instance_;
class SC_RESPONSE_ENTER_DUNGEON_END;
struct SC_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal;
extern SC_RESPONSE_ENTER_DUNGEON_ENDDefaultTypeInternal _SC_RESPONSE_ENTER_DUNGEON_END_default_instance_;
class SC_SIGNUP_RESPONSE;
struct SC_SIGNUP_RESPONSEDefaultTypeInternal;
extern SC_SIGNUP_RESPONSEDefaultTypeInternal _SC_SIGNUP_RESPONSE_default_instance_;
class SC_SPAWN_CHARACTER;
struct SC_SPAWN_CHARACTERDefaultTypeInternal;
extern SC_SPAWN_CHARACTERDefaultTypeInternal _SC_SPAWN_CHARACTER_default_instance_;
class SC_START_AI_CALCULATE;
struct SC_START_AI_CALCULATEDefaultTypeInternal;
extern SC_START_AI_CALCULATEDefaultTypeInternal _SC_START_AI_CALCULATE_default_instance_;
class SC_STOP_AI_CALCULATE;
struct SC_STOP_AI_CALCULATEDefaultTypeInternal;
extern SC_STOP_AI_CALCULATEDefaultTypeInternal _SC_STOP_AI_CALCULATE_default_instance_;
class SC_TEST_PACKET;
struct SC_TEST_PACKETDefaultTypeInternal;
extern SC_TEST_PACKETDefaultTypeInternal _SC_TEST_PACKET_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::CS_ACCEPT_PARTY* Arena::CreateMaybeMessage<::game::CS_ACCEPT_PARTY>(Arena*);
template<> ::game::CS_CANCEL_ENTERING_DUNGEON* Arena::CreateMaybeMessage<::game::CS_CANCEL_ENTERING_DUNGEON>(Arena*);
template<> ::game::CS_CHAT* Arena::CreateMaybeMessage<::game::CS_CHAT>(Arena*);
template<> ::game::CS_CHECK_TIMEOUT* Arena::CreateMaybeMessage<::game::CS_CHECK_TIMEOUT>(Arena*);
template<> ::game::CS_CREATE_MONSTER* Arena::CreateMaybeMessage<::game::CS_CREATE_MONSTER>(Arena*);
template<> ::game::CS_FIND_ID_REQUEST* Arena::CreateMaybeMessage<::game::CS_FIND_ID_REQUEST>(Arena*);
template<> ::game::CS_FIND_PW_REQUEST* Arena::CreateMaybeMessage<::game::CS_FIND_PW_REQUEST>(Arena*);
template<> ::game::CS_KEYINFO* Arena::CreateMaybeMessage<::game::CS_KEYINFO>(Arena*);
template<> ::game::CS_LOGIN_REQUEST* Arena::CreateMaybeMessage<::game::CS_LOGIN_REQUEST>(Arena*);
template<> ::game::CS_MAKE_PARTY* Arena::CreateMaybeMessage<::game::CS_MAKE_PARTY>(Arena*);
template<> ::game::CS_MONSTER_AI* Arena::CreateMaybeMessage<::game::CS_MONSTER_AI>(Arena*);
template<> ::game::CS_MONSTER_ATTACK* Arena::CreateMaybeMessage<::game::CS_MONSTER_ATTACK>(Arena*);
template<> ::game::CS_MONSTER_DIE* Arena::CreateMaybeMessage<::game::CS_MONSTER_DIE>(Arena*);
template<> ::game::CS_MONSTER_ROTATE* Arena::CreateMaybeMessage<::game::CS_MONSTER_ROTATE>(Arena*);
template<> ::game::CS_PLAYER_ATTACK* Arena::CreateMaybeMessage<::game::CS_PLAYER_ATTACK>(Arena*);
template<> ::game::CS_PLAYER_DIE* Arena::CreateMaybeMessage<::game::CS_PLAYER_DIE>(Arena*);
template<> ::game::CS_POSITION_SYNC* Arena::CreateMaybeMessage<::game::CS_POSITION_SYNC>(Arena*);
template<> ::game::CS_REGISTER_REQUEST* Arena::CreateMaybeMessage<::game::CS_REGISTER_REQUEST>(Arena*);
template<> ::game::CS_REQUEST_CHARACTER_INFO* Arena::CreateMaybeMessage<::game::CS_REQUEST_CHARACTER_INFO>(Arena*);
template<> ::game::CS_REQUEST_ENTER_DUNGEON* Arena::CreateMaybeMessage<::game::CS_REQUEST_ENTER_DUNGEON>(Arena*);
template<> ::game::CS_REQUEST_ITEM_INFO* Arena::CreateMaybeMessage<::game::CS_REQUEST_ITEM_INFO>(Arena*);
template<> ::game::CS_RESPONSE_ENTER_DUNGEON_END* Arena::CreateMaybeMessage<::game::CS_RESPONSE_ENTER_DUNGEON_END>(Arena*);
template<> ::game::CS_SIGNUP_REQUEST* Arena::CreateMaybeMessage<::game::CS_SIGNUP_REQUEST>(Arena*);
template<> ::game::CS_SPAWN_CHARACTER* Arena::CreateMaybeMessage<::game::CS_SPAWN_CHARACTER>(Arena*);
template<> ::game::CS_START_AI_CALCULATE* Arena::CreateMaybeMessage<::game::CS_START_AI_CALCULATE>(Arena*);
template<> ::game::CS_STOP_AI_CALCULATE* Arena::CreateMaybeMessage<::game::CS_STOP_AI_CALCULATE>(Arena*);
template<> ::game::CS_TEST_PACKET1* Arena::CreateMaybeMessage<::game::CS_TEST_PACKET1>(Arena*);
template<> ::game::CS_TEST_PACKET2* Arena::CreateMaybeMessage<::game::CS_TEST_PACKET2>(Arena*);
template<> ::game::PlayerInfo* Arena::CreateMaybeMessage<::game::PlayerInfo>(Arena*);
template<> ::game::Position* Arena::CreateMaybeMessage<::game::Position>(Arena*);
template<> ::game::SC_ACCEPT_PARTY* Arena::CreateMaybeMessage<::game::SC_ACCEPT_PARTY>(Arena*);
template<> ::game::SC_CANCEL_ENTERING_DUNGEON* Arena::CreateMaybeMessage<::game::SC_CANCEL_ENTERING_DUNGEON>(Arena*);
template<> ::game::SC_CHAT* Arena::CreateMaybeMessage<::game::SC_CHAT>(Arena*);
template<> ::game::SC_CREATE_MONSTER* Arena::CreateMaybeMessage<::game::SC_CREATE_MONSTER>(Arena*);
template<> ::game::SC_FIND_ID_RESPONSE* Arena::CreateMaybeMessage<::game::SC_FIND_ID_RESPONSE>(Arena*);
template<> ::game::SC_FIND_PW_RESPONSE* Arena::CreateMaybeMessage<::game::SC_FIND_PW_RESPONSE>(Arena*);
template<> ::game::SC_KEYINFO* Arena::CreateMaybeMessage<::game::SC_KEYINFO>(Arena*);
template<> ::game::SC_LOGIN_RESPONSE* Arena::CreateMaybeMessage<::game::SC_LOGIN_RESPONSE>(Arena*);
template<> ::game::SC_MAKE_PARTY* Arena::CreateMaybeMessage<::game::SC_MAKE_PARTY>(Arena*);
template<> ::game::SC_MONSTER_AI* Arena::CreateMaybeMessage<::game::SC_MONSTER_AI>(Arena*);
template<> ::game::SC_MONSTER_DAMAGED* Arena::CreateMaybeMessage<::game::SC_MONSTER_DAMAGED>(Arena*);
template<> ::game::SC_MONSTER_DIE* Arena::CreateMaybeMessage<::game::SC_MONSTER_DIE>(Arena*);
template<> ::game::SC_MONSTER_ROTATE* Arena::CreateMaybeMessage<::game::SC_MONSTER_ROTATE>(Arena*);
template<> ::game::SC_PLAYER_DAMAGED* Arena::CreateMaybeMessage<::game::SC_PLAYER_DAMAGED>(Arena*);
template<> ::game::SC_PLAYER_DIE* Arena::CreateMaybeMessage<::game::SC_PLAYER_DIE>(Arena*);
template<> ::game::SC_POSITION_SYNC* Arena::CreateMaybeMessage<::game::SC_POSITION_SYNC>(Arena*);
template<> ::game::SC_PREPARE_ENTERING_DUNGEON* Arena::CreateMaybeMessage<::game::SC_PREPARE_ENTERING_DUNGEON>(Arena*);
template<> ::game::SC_REMOVE_CHARACTER* Arena::CreateMaybeMessage<::game::SC_REMOVE_CHARACTER>(Arena*);
template<> ::game::SC_REQUEST_ITEM_INFO* Arena::CreateMaybeMessage<::game::SC_REQUEST_ITEM_INFO>(Arena*);
template<> ::game::SC_RESPONSE_CHARACTER_INFO* Arena::CreateMaybeMessage<::game::SC_RESPONSE_CHARACTER_INFO>(Arena*);
template<> ::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN* Arena::CreateMaybeMessage<::game::SC_RESPONSE_ENTER_DUNGEON_BEGIN>(Arena*);
template<> ::game::SC_RESPONSE_ENTER_DUNGEON_END* Arena::CreateMaybeMessage<::game::SC_RESPONSE_ENTER_DUNGEON_END>(Arena*);
template<> ::game::SC_SIGNUP_RESPONSE* Arena::CreateMaybeMessage<::game::SC_SIGNUP_RESPONSE>(Arena*);
template<> ::game::SC_SPAWN_CHARACTER* Arena::CreateMaybeMessage<::game::SC_SPAWN_CHARACTER>(Arena*);
template<> ::game::SC_START_AI_CALCULATE* Arena::CreateMaybeMessage<::game::SC_START_AI_CALCULATE>(Arena*);
template<> ::game::SC_STOP_AI_CALCULATE* Arena::CreateMaybeMessage<::game::SC_STOP_AI_CALCULATE>(Arena*);
template<> ::game::SC_TEST_PACKET* Arena::CreateMaybeMessage<::game::SC_TEST_PACKET>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

enum PacketID : int {
  CS_AcceptParty = 0,
  CS_CancelEnteringDungeon = 1,
  CS_Chat = 2,
  CS_CheckTimeout = 3,
  CS_CreateMonster = 4,
  CS_FindIdRequest = 5,
  CS_FindPwRequest = 6,
  CS_Keyinfo = 7,
  CS_LoginRequest = 8,
  CS_MakeParty = 9,
  CS_MonsterAi = 10,
  CS_MonsterAttack = 11,
  CS_MonsterDie = 12,
  CS_MonsterRotate = 13,
  CS_PlayerAttack = 14,
  CS_PlayerDie = 15,
  CS_PositionSync = 16,
  CS_RegisterRequest = 17,
  CS_RequestCharacterInfo = 18,
  CS_RequestEnterDungeon = 19,
  CS_RequestItemInfo = 20,
  CS_ResponseEnterDungeonEnd = 21,
  CS_SignupRequest = 22,
  CS_SpawnCharacter = 23,
  CS_StartAiCalculate = 24,
  CS_StopAiCalculate = 25,
  CS_TestPacket1 = 26,
  CS_TestPacket2 = 27,
  SC_AcceptParty = 28,
  SC_CancelEnteringDungeon = 29,
  SC_Chat = 30,
  SC_CreateMonster = 31,
  SC_FindIdResponse = 32,
  SC_FindPwResponse = 33,
  SC_Keyinfo = 34,
  SC_LoginResponse = 35,
  SC_MakeParty = 36,
  SC_MonsterAi = 37,
  SC_MonsterDamaged = 38,
  SC_MonsterDie = 39,
  SC_MonsterRotate = 40,
  SC_PlayerDamaged = 41,
  SC_PlayerDie = 42,
  SC_PositionSync = 43,
  SC_PrepareEnteringDungeon = 44,
  SC_RemoveCharacter = 45,
  SC_RequestItemInfo = 46,
  SC_ResponseCharacterInfo = 47,
  SC_ResponseEnterDungeonBegin = 48,
  SC_ResponseEnterDungeonEnd = 49,
  SC_SignupResponse = 50,
  SC_SpawnCharacter = 51,
  SC_StartAiCalculate = 52,
  SC_StopAiCalculate = 53,
  SC_TestPacket = 54,
  PacketID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PacketID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PacketID_IsValid(int value);
constexpr PacketID PacketID_MIN = CS_AcceptParty;
constexpr PacketID PacketID_MAX = SC_TestPacket;
constexpr int PacketID_ARRAYSIZE = PacketID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketID_descriptor();
template<typename T>
inline const std::string& PacketID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketID_descriptor(), enum_t_value);
}
inline bool PacketID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketID>(
    PacketID_descriptor(), name, value);
}
// ===================================================================

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNicknameFieldNumber = 1,
    kPlayerJobFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // string playerNickname = 1;
  void clear_playernickname();
  const std::string& playernickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playernickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playernickname();
  PROTOBUF_NODISCARD std::string* release_playernickname();
  void set_allocated_playernickname(std::string* playernickname);
  private:
  const std::string& _internal_playernickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playernickname(const std::string& value);
  std::string* _internal_mutable_playernickname();
  public:

  // uint32 playerJob = 2;
  void clear_playerjob();
  uint32_t playerjob() const;
  void set_playerjob(uint32_t value);
  private:
  uint32_t _internal_playerjob() const;
  void _internal_set_playerjob(uint32_t value);
  public:

  // uint32 level = 3;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playernickname_;
    uint32_t playerjob_;
    uint32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // float posX = 1;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 2;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float posZ = 3;
  void clear_posz();
  float posz() const;
  void set_posz(float value);
  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float posx_;
    float posy_;
    float posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_FIND_ID_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_FIND_ID_REQUEST) */ {
 public:
  inline CS_FIND_ID_REQUEST() : CS_FIND_ID_REQUEST(nullptr) {}
  ~CS_FIND_ID_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR CS_FIND_ID_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_FIND_ID_REQUEST(const CS_FIND_ID_REQUEST& from);
  CS_FIND_ID_REQUEST(CS_FIND_ID_REQUEST&& from) noexcept
    : CS_FIND_ID_REQUEST() {
    *this = ::std::move(from);
  }

  inline CS_FIND_ID_REQUEST& operator=(const CS_FIND_ID_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_FIND_ID_REQUEST& operator=(CS_FIND_ID_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_FIND_ID_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_FIND_ID_REQUEST* internal_default_instance() {
    return reinterpret_cast<const CS_FIND_ID_REQUEST*>(
               &_CS_FIND_ID_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CS_FIND_ID_REQUEST& a, CS_FIND_ID_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_FIND_ID_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_FIND_ID_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_FIND_ID_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_FIND_ID_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_FIND_ID_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_FIND_ID_REQUEST& from) {
    CS_FIND_ID_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_FIND_ID_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_FIND_ID_REQUEST";
  }
  protected:
  explicit CS_FIND_ID_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_FIND_ID_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_FIND_PW_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_FIND_PW_REQUEST) */ {
 public:
  inline CS_FIND_PW_REQUEST() : CS_FIND_PW_REQUEST(nullptr) {}
  ~CS_FIND_PW_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR CS_FIND_PW_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_FIND_PW_REQUEST(const CS_FIND_PW_REQUEST& from);
  CS_FIND_PW_REQUEST(CS_FIND_PW_REQUEST&& from) noexcept
    : CS_FIND_PW_REQUEST() {
    *this = ::std::move(from);
  }

  inline CS_FIND_PW_REQUEST& operator=(const CS_FIND_PW_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_FIND_PW_REQUEST& operator=(CS_FIND_PW_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_FIND_PW_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_FIND_PW_REQUEST* internal_default_instance() {
    return reinterpret_cast<const CS_FIND_PW_REQUEST*>(
               &_CS_FIND_PW_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CS_FIND_PW_REQUEST& a, CS_FIND_PW_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_FIND_PW_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_FIND_PW_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_FIND_PW_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_FIND_PW_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_FIND_PW_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_FIND_PW_REQUEST& from) {
    CS_FIND_PW_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_FIND_PW_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_FIND_PW_REQUEST";
  }
  protected:
  explicit CS_FIND_PW_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_FIND_PW_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_LOGIN_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_LOGIN_REQUEST) */ {
 public:
  inline CS_LOGIN_REQUEST() : CS_LOGIN_REQUEST(nullptr) {}
  ~CS_LOGIN_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR CS_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_LOGIN_REQUEST(const CS_LOGIN_REQUEST& from);
  CS_LOGIN_REQUEST(CS_LOGIN_REQUEST&& from) noexcept
    : CS_LOGIN_REQUEST() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN_REQUEST& operator=(const CS_LOGIN_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN_REQUEST& operator=(CS_LOGIN_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN_REQUEST* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN_REQUEST*>(
               &_CS_LOGIN_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CS_LOGIN_REQUEST& a, CS_LOGIN_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_LOGIN_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_LOGIN_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_LOGIN_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_LOGIN_REQUEST& from) {
    CS_LOGIN_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_LOGIN_REQUEST";
  }
  protected:
  explicit CS_LOGIN_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_LOGIN_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_REQUEST_CHARACTER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_REQUEST_CHARACTER_INFO) */ {
 public:
  inline CS_REQUEST_CHARACTER_INFO() : CS_REQUEST_CHARACTER_INFO(nullptr) {}
  ~CS_REQUEST_CHARACTER_INFO() override;
  explicit PROTOBUF_CONSTEXPR CS_REQUEST_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REQUEST_CHARACTER_INFO(const CS_REQUEST_CHARACTER_INFO& from);
  CS_REQUEST_CHARACTER_INFO(CS_REQUEST_CHARACTER_INFO&& from) noexcept
    : CS_REQUEST_CHARACTER_INFO() {
    *this = ::std::move(from);
  }

  inline CS_REQUEST_CHARACTER_INFO& operator=(const CS_REQUEST_CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REQUEST_CHARACTER_INFO& operator=(CS_REQUEST_CHARACTER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REQUEST_CHARACTER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REQUEST_CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const CS_REQUEST_CHARACTER_INFO*>(
               &_CS_REQUEST_CHARACTER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CS_REQUEST_CHARACTER_INFO& a, CS_REQUEST_CHARACTER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REQUEST_CHARACTER_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REQUEST_CHARACTER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REQUEST_CHARACTER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REQUEST_CHARACTER_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REQUEST_CHARACTER_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REQUEST_CHARACTER_INFO& from) {
    CS_REQUEST_CHARACTER_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REQUEST_CHARACTER_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_REQUEST_CHARACTER_INFO";
  }
  protected:
  explicit CS_REQUEST_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_REQUEST_CHARACTER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_REQUEST_ITEM_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_REQUEST_ITEM_INFO) */ {
 public:
  inline CS_REQUEST_ITEM_INFO() : CS_REQUEST_ITEM_INFO(nullptr) {}
  ~CS_REQUEST_ITEM_INFO() override;
  explicit PROTOBUF_CONSTEXPR CS_REQUEST_ITEM_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REQUEST_ITEM_INFO(const CS_REQUEST_ITEM_INFO& from);
  CS_REQUEST_ITEM_INFO(CS_REQUEST_ITEM_INFO&& from) noexcept
    : CS_REQUEST_ITEM_INFO() {
    *this = ::std::move(from);
  }

  inline CS_REQUEST_ITEM_INFO& operator=(const CS_REQUEST_ITEM_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REQUEST_ITEM_INFO& operator=(CS_REQUEST_ITEM_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REQUEST_ITEM_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REQUEST_ITEM_INFO* internal_default_instance() {
    return reinterpret_cast<const CS_REQUEST_ITEM_INFO*>(
               &_CS_REQUEST_ITEM_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CS_REQUEST_ITEM_INFO& a, CS_REQUEST_ITEM_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REQUEST_ITEM_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REQUEST_ITEM_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REQUEST_ITEM_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REQUEST_ITEM_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REQUEST_ITEM_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REQUEST_ITEM_INFO& from) {
    CS_REQUEST_ITEM_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REQUEST_ITEM_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_REQUEST_ITEM_INFO";
  }
  protected:
  explicit CS_REQUEST_ITEM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_REQUEST_ITEM_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_SIGNUP_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_SIGNUP_REQUEST) */ {
 public:
  inline CS_SIGNUP_REQUEST() : CS_SIGNUP_REQUEST(nullptr) {}
  ~CS_SIGNUP_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR CS_SIGNUP_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_SIGNUP_REQUEST(const CS_SIGNUP_REQUEST& from);
  CS_SIGNUP_REQUEST(CS_SIGNUP_REQUEST&& from) noexcept
    : CS_SIGNUP_REQUEST() {
    *this = ::std::move(from);
  }

  inline CS_SIGNUP_REQUEST& operator=(const CS_SIGNUP_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SIGNUP_REQUEST& operator=(CS_SIGNUP_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_SIGNUP_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_SIGNUP_REQUEST* internal_default_instance() {
    return reinterpret_cast<const CS_SIGNUP_REQUEST*>(
               &_CS_SIGNUP_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CS_SIGNUP_REQUEST& a, CS_SIGNUP_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SIGNUP_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_SIGNUP_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_SIGNUP_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_SIGNUP_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_SIGNUP_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_SIGNUP_REQUEST& from) {
    CS_SIGNUP_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SIGNUP_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_SIGNUP_REQUEST";
  }
  protected:
  explicit CS_SIGNUP_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kPasswordFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_SIGNUP_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_FIND_ID_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_FIND_ID_RESPONSE) */ {
 public:
  inline SC_FIND_ID_RESPONSE() : SC_FIND_ID_RESPONSE(nullptr) {}
  ~SC_FIND_ID_RESPONSE() override;
  explicit PROTOBUF_CONSTEXPR SC_FIND_ID_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_FIND_ID_RESPONSE(const SC_FIND_ID_RESPONSE& from);
  SC_FIND_ID_RESPONSE(SC_FIND_ID_RESPONSE&& from) noexcept
    : SC_FIND_ID_RESPONSE() {
    *this = ::std::move(from);
  }

  inline SC_FIND_ID_RESPONSE& operator=(const SC_FIND_ID_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_FIND_ID_RESPONSE& operator=(SC_FIND_ID_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_FIND_ID_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_FIND_ID_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const SC_FIND_ID_RESPONSE*>(
               &_SC_FIND_ID_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SC_FIND_ID_RESPONSE& a, SC_FIND_ID_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_FIND_ID_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_FIND_ID_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_FIND_ID_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_FIND_ID_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_FIND_ID_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_FIND_ID_RESPONSE& from) {
    SC_FIND_ID_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_FIND_ID_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_FIND_ID_RESPONSE";
  }
  protected:
  explicit SC_FIND_ID_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_FIND_ID_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_FIND_PW_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_FIND_PW_RESPONSE) */ {
 public:
  inline SC_FIND_PW_RESPONSE() : SC_FIND_PW_RESPONSE(nullptr) {}
  ~SC_FIND_PW_RESPONSE() override;
  explicit PROTOBUF_CONSTEXPR SC_FIND_PW_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_FIND_PW_RESPONSE(const SC_FIND_PW_RESPONSE& from);
  SC_FIND_PW_RESPONSE(SC_FIND_PW_RESPONSE&& from) noexcept
    : SC_FIND_PW_RESPONSE() {
    *this = ::std::move(from);
  }

  inline SC_FIND_PW_RESPONSE& operator=(const SC_FIND_PW_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_FIND_PW_RESPONSE& operator=(SC_FIND_PW_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_FIND_PW_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_FIND_PW_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const SC_FIND_PW_RESPONSE*>(
               &_SC_FIND_PW_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SC_FIND_PW_RESPONSE& a, SC_FIND_PW_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_FIND_PW_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_FIND_PW_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_FIND_PW_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_FIND_PW_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_FIND_PW_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_FIND_PW_RESPONSE& from) {
    SC_FIND_PW_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_FIND_PW_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_FIND_PW_RESPONSE";
  }
  protected:
  explicit SC_FIND_PW_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPwFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_FIND_PW_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_LOGIN_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_LOGIN_RESPONSE) */ {
 public:
  inline SC_LOGIN_RESPONSE() : SC_LOGIN_RESPONSE(nullptr) {}
  ~SC_LOGIN_RESPONSE() override;
  explicit PROTOBUF_CONSTEXPR SC_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_LOGIN_RESPONSE(const SC_LOGIN_RESPONSE& from);
  SC_LOGIN_RESPONSE(SC_LOGIN_RESPONSE&& from) noexcept
    : SC_LOGIN_RESPONSE() {
    *this = ::std::move(from);
  }

  inline SC_LOGIN_RESPONSE& operator=(const SC_LOGIN_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOGIN_RESPONSE& operator=(SC_LOGIN_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_LOGIN_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_LOGIN_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const SC_LOGIN_RESPONSE*>(
               &_SC_LOGIN_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SC_LOGIN_RESPONSE& a, SC_LOGIN_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOGIN_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_LOGIN_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_LOGIN_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_LOGIN_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_LOGIN_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_LOGIN_RESPONSE& from) {
    SC_LOGIN_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOGIN_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_LOGIN_RESPONSE";
  }
  protected:
  explicit SC_LOGIN_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 errorCode = 2;
  void clear_errorcode();
  uint32_t errorcode() const;
  void set_errorcode(uint32_t value);
  private:
  uint32_t _internal_errorcode() const;
  void _internal_set_errorcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_LOGIN_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    uint32_t errorcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_REQUEST_ITEM_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_REQUEST_ITEM_INFO) */ {
 public:
  inline SC_REQUEST_ITEM_INFO() : SC_REQUEST_ITEM_INFO(nullptr) {}
  ~SC_REQUEST_ITEM_INFO() override;
  explicit PROTOBUF_CONSTEXPR SC_REQUEST_ITEM_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_REQUEST_ITEM_INFO(const SC_REQUEST_ITEM_INFO& from);
  SC_REQUEST_ITEM_INFO(SC_REQUEST_ITEM_INFO&& from) noexcept
    : SC_REQUEST_ITEM_INFO() {
    *this = ::std::move(from);
  }

  inline SC_REQUEST_ITEM_INFO& operator=(const SC_REQUEST_ITEM_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_REQUEST_ITEM_INFO& operator=(SC_REQUEST_ITEM_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_REQUEST_ITEM_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_REQUEST_ITEM_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_REQUEST_ITEM_INFO*>(
               &_SC_REQUEST_ITEM_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SC_REQUEST_ITEM_INFO& a, SC_REQUEST_ITEM_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_REQUEST_ITEM_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_REQUEST_ITEM_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_REQUEST_ITEM_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_REQUEST_ITEM_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_REQUEST_ITEM_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_REQUEST_ITEM_INFO& from) {
    SC_REQUEST_ITEM_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_REQUEST_ITEM_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_REQUEST_ITEM_INFO";
  }
  protected:
  explicit SC_REQUEST_ITEM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemInfoFieldNumber = 1,
  };
  // repeated uint32 itemInfo = 1;
  int iteminfo_size() const;
  private:
  int _internal_iteminfo_size() const;
  public:
  void clear_iteminfo();
  private:
  uint32_t _internal_iteminfo(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_iteminfo() const;
  void _internal_add_iteminfo(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_iteminfo();
  public:
  uint32_t iteminfo(int index) const;
  void set_iteminfo(int index, uint32_t value);
  void add_iteminfo(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      iteminfo() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_iteminfo();

  // @@protoc_insertion_point(class_scope:game.SC_REQUEST_ITEM_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > iteminfo_;
    mutable std::atomic<int> _iteminfo_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_RESPONSE_CHARACTER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_RESPONSE_CHARACTER_INFO) */ {
 public:
  inline SC_RESPONSE_CHARACTER_INFO() : SC_RESPONSE_CHARACTER_INFO(nullptr) {}
  ~SC_RESPONSE_CHARACTER_INFO() override;
  explicit PROTOBUF_CONSTEXPR SC_RESPONSE_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_RESPONSE_CHARACTER_INFO(const SC_RESPONSE_CHARACTER_INFO& from);
  SC_RESPONSE_CHARACTER_INFO(SC_RESPONSE_CHARACTER_INFO&& from) noexcept
    : SC_RESPONSE_CHARACTER_INFO() {
    *this = ::std::move(from);
  }

  inline SC_RESPONSE_CHARACTER_INFO& operator=(const SC_RESPONSE_CHARACTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_RESPONSE_CHARACTER_INFO& operator=(SC_RESPONSE_CHARACTER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_RESPONSE_CHARACTER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_RESPONSE_CHARACTER_INFO* internal_default_instance() {
    return reinterpret_cast<const SC_RESPONSE_CHARACTER_INFO*>(
               &_SC_RESPONSE_CHARACTER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SC_RESPONSE_CHARACTER_INFO& a, SC_RESPONSE_CHARACTER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_RESPONSE_CHARACTER_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_RESPONSE_CHARACTER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_RESPONSE_CHARACTER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_RESPONSE_CHARACTER_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_RESPONSE_CHARACTER_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_RESPONSE_CHARACTER_INFO& from) {
    SC_RESPONSE_CHARACTER_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_RESPONSE_CHARACTER_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_RESPONSE_CHARACTER_INFO";
  }
  protected:
  explicit SC_RESPONSE_CHARACTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
  };
  // .game.PlayerInfo playerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::game::PlayerInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::game::PlayerInfo* release_playerinfo();
  ::game::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::game::PlayerInfo* playerinfo);
  private:
  const ::game::PlayerInfo& _internal_playerinfo() const;
  ::game::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::game::PlayerInfo* playerinfo);
  ::game::PlayerInfo* unsafe_arena_release_playerinfo();

  // @@protoc_insertion_point(class_scope:game.SC_RESPONSE_CHARACTER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::PlayerInfo* playerinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_SIGNUP_RESPONSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_SIGNUP_RESPONSE) */ {
 public:
  inline SC_SIGNUP_RESPONSE() : SC_SIGNUP_RESPONSE(nullptr) {}
  ~SC_SIGNUP_RESPONSE() override;
  explicit PROTOBUF_CONSTEXPR SC_SIGNUP_RESPONSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_SIGNUP_RESPONSE(const SC_SIGNUP_RESPONSE& from);
  SC_SIGNUP_RESPONSE(SC_SIGNUP_RESPONSE&& from) noexcept
    : SC_SIGNUP_RESPONSE() {
    *this = ::std::move(from);
  }

  inline SC_SIGNUP_RESPONSE& operator=(const SC_SIGNUP_RESPONSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SIGNUP_RESPONSE& operator=(SC_SIGNUP_RESPONSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_SIGNUP_RESPONSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_SIGNUP_RESPONSE* internal_default_instance() {
    return reinterpret_cast<const SC_SIGNUP_RESPONSE*>(
               &_SC_SIGNUP_RESPONSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SC_SIGNUP_RESPONSE& a, SC_SIGNUP_RESPONSE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SIGNUP_RESPONSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SIGNUP_RESPONSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_SIGNUP_RESPONSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_SIGNUP_RESPONSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_SIGNUP_RESPONSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_SIGNUP_RESPONSE& from) {
    SC_SIGNUP_RESPONSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SIGNUP_RESPONSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_SIGNUP_RESPONSE";
  }
  protected:
  explicit SC_SIGNUP_RESPONSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 errorCode = 2;
  void clear_errorcode();
  uint32_t errorcode() const;
  void set_errorcode(uint32_t value);
  private:
  uint32_t _internal_errorcode() const;
  void _internal_set_errorcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_SIGNUP_RESPONSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    uint32_t errorcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_ACCEPT_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_ACCEPT_PARTY) */ {
 public:
  inline CS_ACCEPT_PARTY() : CS_ACCEPT_PARTY(nullptr) {}
  ~CS_ACCEPT_PARTY() override;
  explicit PROTOBUF_CONSTEXPR CS_ACCEPT_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_ACCEPT_PARTY(const CS_ACCEPT_PARTY& from);
  CS_ACCEPT_PARTY(CS_ACCEPT_PARTY&& from) noexcept
    : CS_ACCEPT_PARTY() {
    *this = ::std::move(from);
  }

  inline CS_ACCEPT_PARTY& operator=(const CS_ACCEPT_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ACCEPT_PARTY& operator=(CS_ACCEPT_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_ACCEPT_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_ACCEPT_PARTY* internal_default_instance() {
    return reinterpret_cast<const CS_ACCEPT_PARTY*>(
               &_CS_ACCEPT_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CS_ACCEPT_PARTY& a, CS_ACCEPT_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ACCEPT_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ACCEPT_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_ACCEPT_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_ACCEPT_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_ACCEPT_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_ACCEPT_PARTY& from) {
    CS_ACCEPT_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ACCEPT_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_ACCEPT_PARTY";
  }
  protected:
  explicit CS_ACCEPT_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromPlayerIDFieldNumber = 1,
    kToPlayerIDFieldNumber = 2,
  };
  // uint32 FromPlayerID = 1;
  void clear_fromplayerid();
  uint32_t fromplayerid() const;
  void set_fromplayerid(uint32_t value);
  private:
  uint32_t _internal_fromplayerid() const;
  void _internal_set_fromplayerid(uint32_t value);
  public:

  // uint32 ToPlayerID = 2;
  void clear_toplayerid();
  uint32_t toplayerid() const;
  void set_toplayerid(uint32_t value);
  private:
  uint32_t _internal_toplayerid() const;
  void _internal_set_toplayerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_ACCEPT_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fromplayerid_;
    uint32_t toplayerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_CANCEL_ENTERING_DUNGEON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_CANCEL_ENTERING_DUNGEON) */ {
 public:
  inline CS_CANCEL_ENTERING_DUNGEON() : CS_CANCEL_ENTERING_DUNGEON(nullptr) {}
  ~CS_CANCEL_ENTERING_DUNGEON() override;
  explicit PROTOBUF_CONSTEXPR CS_CANCEL_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_CANCEL_ENTERING_DUNGEON(const CS_CANCEL_ENTERING_DUNGEON& from);
  CS_CANCEL_ENTERING_DUNGEON(CS_CANCEL_ENTERING_DUNGEON&& from) noexcept
    : CS_CANCEL_ENTERING_DUNGEON() {
    *this = ::std::move(from);
  }

  inline CS_CANCEL_ENTERING_DUNGEON& operator=(const CS_CANCEL_ENTERING_DUNGEON& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CANCEL_ENTERING_DUNGEON& operator=(CS_CANCEL_ENTERING_DUNGEON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_CANCEL_ENTERING_DUNGEON& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_CANCEL_ENTERING_DUNGEON* internal_default_instance() {
    return reinterpret_cast<const CS_CANCEL_ENTERING_DUNGEON*>(
               &_CS_CANCEL_ENTERING_DUNGEON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CS_CANCEL_ENTERING_DUNGEON& a, CS_CANCEL_ENTERING_DUNGEON& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CANCEL_ENTERING_DUNGEON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_CANCEL_ENTERING_DUNGEON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_CANCEL_ENTERING_DUNGEON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_CANCEL_ENTERING_DUNGEON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_CANCEL_ENTERING_DUNGEON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_CANCEL_ENTERING_DUNGEON& from) {
    CS_CANCEL_ENTERING_DUNGEON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CANCEL_ENTERING_DUNGEON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_CANCEL_ENTERING_DUNGEON";
  }
  protected:
  explicit CS_CANCEL_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBCancelFieldNumber = 1,
  };
  // bool bCancel = 1;
  void clear_bcancel();
  bool bcancel() const;
  void set_bcancel(bool value);
  private:
  bool _internal_bcancel() const;
  void _internal_set_bcancel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_CANCEL_ENTERING_DUNGEON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bcancel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_CREATE_MONSTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_CREATE_MONSTER) */ {
 public:
  inline CS_CREATE_MONSTER() : CS_CREATE_MONSTER(nullptr) {}
  ~CS_CREATE_MONSTER() override;
  explicit PROTOBUF_CONSTEXPR CS_CREATE_MONSTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_CREATE_MONSTER(const CS_CREATE_MONSTER& from);
  CS_CREATE_MONSTER(CS_CREATE_MONSTER&& from) noexcept
    : CS_CREATE_MONSTER() {
    *this = ::std::move(from);
  }

  inline CS_CREATE_MONSTER& operator=(const CS_CREATE_MONSTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CREATE_MONSTER& operator=(CS_CREATE_MONSTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_CREATE_MONSTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_CREATE_MONSTER* internal_default_instance() {
    return reinterpret_cast<const CS_CREATE_MONSTER*>(
               &_CS_CREATE_MONSTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CS_CREATE_MONSTER& a, CS_CREATE_MONSTER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CREATE_MONSTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_CREATE_MONSTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_CREATE_MONSTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_CREATE_MONSTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_CREATE_MONSTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_CREATE_MONSTER& from) {
    CS_CREATE_MONSTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CREATE_MONSTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_CREATE_MONSTER";
  }
  protected:
  explicit CS_CREATE_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterPosFieldNumber = 2,
    kMonsterTypeFieldNumber = 1,
  };
  // .game.Position monsterPos = 2;
  bool has_monsterpos() const;
  private:
  bool _internal_has_monsterpos() const;
  public:
  void clear_monsterpos();
  const ::game::Position& monsterpos() const;
  PROTOBUF_NODISCARD ::game::Position* release_monsterpos();
  ::game::Position* mutable_monsterpos();
  void set_allocated_monsterpos(::game::Position* monsterpos);
  private:
  const ::game::Position& _internal_monsterpos() const;
  ::game::Position* _internal_mutable_monsterpos();
  public:
  void unsafe_arena_set_allocated_monsterpos(
      ::game::Position* monsterpos);
  ::game::Position* unsafe_arena_release_monsterpos();

  // uint32 monsterType = 1;
  void clear_monstertype();
  uint32_t monstertype() const;
  void set_monstertype(uint32_t value);
  private:
  uint32_t _internal_monstertype() const;
  void _internal_set_monstertype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_CREATE_MONSTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::Position* monsterpos_;
    uint32_t monstertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_MAKE_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_MAKE_PARTY) */ {
 public:
  inline CS_MAKE_PARTY() : CS_MAKE_PARTY(nullptr) {}
  ~CS_MAKE_PARTY() override;
  explicit PROTOBUF_CONSTEXPR CS_MAKE_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_MAKE_PARTY(const CS_MAKE_PARTY& from);
  CS_MAKE_PARTY(CS_MAKE_PARTY&& from) noexcept
    : CS_MAKE_PARTY() {
    *this = ::std::move(from);
  }

  inline CS_MAKE_PARTY& operator=(const CS_MAKE_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MAKE_PARTY& operator=(CS_MAKE_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MAKE_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MAKE_PARTY* internal_default_instance() {
    return reinterpret_cast<const CS_MAKE_PARTY*>(
               &_CS_MAKE_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CS_MAKE_PARTY& a, CS_MAKE_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MAKE_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MAKE_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MAKE_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MAKE_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_MAKE_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_MAKE_PARTY& from) {
    CS_MAKE_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MAKE_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_MAKE_PARTY";
  }
  protected:
  explicit CS_MAKE_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromPlayerIDFieldNumber = 1,
    kToPlayerIDFieldNumber = 2,
  };
  // uint32 FromPlayerID = 1;
  void clear_fromplayerid();
  uint32_t fromplayerid() const;
  void set_fromplayerid(uint32_t value);
  private:
  uint32_t _internal_fromplayerid() const;
  void _internal_set_fromplayerid(uint32_t value);
  public:

  // uint32 ToPlayerID = 2;
  void clear_toplayerid();
  uint32_t toplayerid() const;
  void set_toplayerid(uint32_t value);
  private:
  uint32_t _internal_toplayerid() const;
  void _internal_set_toplayerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_MAKE_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fromplayerid_;
    uint32_t toplayerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_REGISTER_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_REGISTER_REQUEST) */ {
 public:
  inline CS_REGISTER_REQUEST() : CS_REGISTER_REQUEST(nullptr) {}
  ~CS_REGISTER_REQUEST() override;
  explicit PROTOBUF_CONSTEXPR CS_REGISTER_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REGISTER_REQUEST(const CS_REGISTER_REQUEST& from);
  CS_REGISTER_REQUEST(CS_REGISTER_REQUEST&& from) noexcept
    : CS_REGISTER_REQUEST() {
    *this = ::std::move(from);
  }

  inline CS_REGISTER_REQUEST& operator=(const CS_REGISTER_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REGISTER_REQUEST& operator=(CS_REGISTER_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REGISTER_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REGISTER_REQUEST* internal_default_instance() {
    return reinterpret_cast<const CS_REGISTER_REQUEST*>(
               &_CS_REGISTER_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CS_REGISTER_REQUEST& a, CS_REGISTER_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REGISTER_REQUEST* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REGISTER_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REGISTER_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REGISTER_REQUEST>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REGISTER_REQUEST& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REGISTER_REQUEST& from) {
    CS_REGISTER_REQUEST::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REGISTER_REQUEST* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_REGISTER_REQUEST";
  }
  protected:
  explicit CS_REGISTER_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBRequestFieldNumber = 1,
  };
  // bool bRequest = 1;
  void clear_brequest();
  bool brequest() const;
  void set_brequest(bool value);
  private:
  bool _internal_brequest() const;
  void _internal_set_brequest(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_REGISTER_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool brequest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_REQUEST_ENTER_DUNGEON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_REQUEST_ENTER_DUNGEON) */ {
 public:
  inline CS_REQUEST_ENTER_DUNGEON() : CS_REQUEST_ENTER_DUNGEON(nullptr) {}
  ~CS_REQUEST_ENTER_DUNGEON() override;
  explicit PROTOBUF_CONSTEXPR CS_REQUEST_ENTER_DUNGEON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REQUEST_ENTER_DUNGEON(const CS_REQUEST_ENTER_DUNGEON& from);
  CS_REQUEST_ENTER_DUNGEON(CS_REQUEST_ENTER_DUNGEON&& from) noexcept
    : CS_REQUEST_ENTER_DUNGEON() {
    *this = ::std::move(from);
  }

  inline CS_REQUEST_ENTER_DUNGEON& operator=(const CS_REQUEST_ENTER_DUNGEON& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REQUEST_ENTER_DUNGEON& operator=(CS_REQUEST_ENTER_DUNGEON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REQUEST_ENTER_DUNGEON& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REQUEST_ENTER_DUNGEON* internal_default_instance() {
    return reinterpret_cast<const CS_REQUEST_ENTER_DUNGEON*>(
               &_CS_REQUEST_ENTER_DUNGEON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CS_REQUEST_ENTER_DUNGEON& a, CS_REQUEST_ENTER_DUNGEON& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REQUEST_ENTER_DUNGEON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REQUEST_ENTER_DUNGEON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REQUEST_ENTER_DUNGEON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REQUEST_ENTER_DUNGEON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REQUEST_ENTER_DUNGEON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REQUEST_ENTER_DUNGEON& from) {
    CS_REQUEST_ENTER_DUNGEON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REQUEST_ENTER_DUNGEON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_REQUEST_ENTER_DUNGEON";
  }
  protected:
  explicit CS_REQUEST_ENTER_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnterFieldNumber = 1,
  };
  // bool bEnter = 1;
  void clear_benter();
  bool benter() const;
  void set_benter(bool value);
  private:
  bool _internal_benter() const;
  void _internal_set_benter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_REQUEST_ENTER_DUNGEON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool benter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_RESPONSE_ENTER_DUNGEON_END final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_RESPONSE_ENTER_DUNGEON_END) */ {
 public:
  inline CS_RESPONSE_ENTER_DUNGEON_END() : CS_RESPONSE_ENTER_DUNGEON_END(nullptr) {}
  ~CS_RESPONSE_ENTER_DUNGEON_END() override;
  explicit PROTOBUF_CONSTEXPR CS_RESPONSE_ENTER_DUNGEON_END(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_RESPONSE_ENTER_DUNGEON_END(const CS_RESPONSE_ENTER_DUNGEON_END& from);
  CS_RESPONSE_ENTER_DUNGEON_END(CS_RESPONSE_ENTER_DUNGEON_END&& from) noexcept
    : CS_RESPONSE_ENTER_DUNGEON_END() {
    *this = ::std::move(from);
  }

  inline CS_RESPONSE_ENTER_DUNGEON_END& operator=(const CS_RESPONSE_ENTER_DUNGEON_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_RESPONSE_ENTER_DUNGEON_END& operator=(CS_RESPONSE_ENTER_DUNGEON_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_RESPONSE_ENTER_DUNGEON_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_RESPONSE_ENTER_DUNGEON_END* internal_default_instance() {
    return reinterpret_cast<const CS_RESPONSE_ENTER_DUNGEON_END*>(
               &_CS_RESPONSE_ENTER_DUNGEON_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CS_RESPONSE_ENTER_DUNGEON_END& a, CS_RESPONSE_ENTER_DUNGEON_END& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_RESPONSE_ENTER_DUNGEON_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_RESPONSE_ENTER_DUNGEON_END* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_RESPONSE_ENTER_DUNGEON_END* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_RESPONSE_ENTER_DUNGEON_END>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_RESPONSE_ENTER_DUNGEON_END& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_RESPONSE_ENTER_DUNGEON_END& from) {
    CS_RESPONSE_ENTER_DUNGEON_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_RESPONSE_ENTER_DUNGEON_END* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_RESPONSE_ENTER_DUNGEON_END";
  }
  protected:
  explicit CS_RESPONSE_ENTER_DUNGEON_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnterEndFieldNumber = 1,
  };
  // bool bEnterEnd = 1;
  void clear_benterend();
  bool benterend() const;
  void set_benterend(bool value);
  private:
  bool _internal_benterend() const;
  void _internal_set_benterend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_RESPONSE_ENTER_DUNGEON_END)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool benterend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_SPAWN_CHARACTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_SPAWN_CHARACTER) */ {
 public:
  inline CS_SPAWN_CHARACTER() : CS_SPAWN_CHARACTER(nullptr) {}
  ~CS_SPAWN_CHARACTER() override;
  explicit PROTOBUF_CONSTEXPR CS_SPAWN_CHARACTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_SPAWN_CHARACTER(const CS_SPAWN_CHARACTER& from);
  CS_SPAWN_CHARACTER(CS_SPAWN_CHARACTER&& from) noexcept
    : CS_SPAWN_CHARACTER() {
    *this = ::std::move(from);
  }

  inline CS_SPAWN_CHARACTER& operator=(const CS_SPAWN_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SPAWN_CHARACTER& operator=(CS_SPAWN_CHARACTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_SPAWN_CHARACTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_SPAWN_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const CS_SPAWN_CHARACTER*>(
               &_CS_SPAWN_CHARACTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CS_SPAWN_CHARACTER& a, CS_SPAWN_CHARACTER& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SPAWN_CHARACTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_SPAWN_CHARACTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_SPAWN_CHARACTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_SPAWN_CHARACTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_SPAWN_CHARACTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_SPAWN_CHARACTER& from) {
    CS_SPAWN_CHARACTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SPAWN_CHARACTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_SPAWN_CHARACTER";
  }
  protected:
  explicit CS_SPAWN_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerPosFieldNumber = 2,
    kPlayerInfoFieldNumber = 4,
    kPlayerIDFieldNumber = 1,
    kCameraYawFieldNumber = 3,
  };
  // .game.Position playerPos = 2;
  bool has_playerpos() const;
  private:
  bool _internal_has_playerpos() const;
  public:
  void clear_playerpos();
  const ::game::Position& playerpos() const;
  PROTOBUF_NODISCARD ::game::Position* release_playerpos();
  ::game::Position* mutable_playerpos();
  void set_allocated_playerpos(::game::Position* playerpos);
  private:
  const ::game::Position& _internal_playerpos() const;
  ::game::Position* _internal_mutable_playerpos();
  public:
  void unsafe_arena_set_allocated_playerpos(
      ::game::Position* playerpos);
  ::game::Position* unsafe_arena_release_playerpos();

  // .game.PlayerInfo playerInfo = 4;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::game::PlayerInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::game::PlayerInfo* release_playerinfo();
  ::game::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::game::PlayerInfo* playerinfo);
  private:
  const ::game::PlayerInfo& _internal_playerinfo() const;
  ::game::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::game::PlayerInfo* playerinfo);
  ::game::PlayerInfo* unsafe_arena_release_playerinfo();

  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // float cameraYaw = 3;
  void clear_camerayaw();
  float camerayaw() const;
  void set_camerayaw(float value);
  private:
  float _internal_camerayaw() const;
  void _internal_set_camerayaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_SPAWN_CHARACTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::Position* playerpos_;
    ::game::PlayerInfo* playerinfo_;
    uint32_t playerid_;
    float camerayaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_START_AI_CALCULATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_START_AI_CALCULATE) */ {
 public:
  inline CS_START_AI_CALCULATE() : CS_START_AI_CALCULATE(nullptr) {}
  ~CS_START_AI_CALCULATE() override;
  explicit PROTOBUF_CONSTEXPR CS_START_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_START_AI_CALCULATE(const CS_START_AI_CALCULATE& from);
  CS_START_AI_CALCULATE(CS_START_AI_CALCULATE&& from) noexcept
    : CS_START_AI_CALCULATE() {
    *this = ::std::move(from);
  }

  inline CS_START_AI_CALCULATE& operator=(const CS_START_AI_CALCULATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_START_AI_CALCULATE& operator=(CS_START_AI_CALCULATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_START_AI_CALCULATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_START_AI_CALCULATE* internal_default_instance() {
    return reinterpret_cast<const CS_START_AI_CALCULATE*>(
               &_CS_START_AI_CALCULATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CS_START_AI_CALCULATE& a, CS_START_AI_CALCULATE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_START_AI_CALCULATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_START_AI_CALCULATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_START_AI_CALCULATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_START_AI_CALCULATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_START_AI_CALCULATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_START_AI_CALCULATE& from) {
    CS_START_AI_CALCULATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_START_AI_CALCULATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_START_AI_CALCULATE";
  }
  protected:
  explicit CS_START_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBStartFieldNumber = 1,
  };
  // bool bStart = 1;
  void clear_bstart();
  bool bstart() const;
  void set_bstart(bool value);
  private:
  bool _internal_bstart() const;
  void _internal_set_bstart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_START_AI_CALCULATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bstart_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_STOP_AI_CALCULATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_STOP_AI_CALCULATE) */ {
 public:
  inline CS_STOP_AI_CALCULATE() : CS_STOP_AI_CALCULATE(nullptr) {}
  ~CS_STOP_AI_CALCULATE() override;
  explicit PROTOBUF_CONSTEXPR CS_STOP_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_STOP_AI_CALCULATE(const CS_STOP_AI_CALCULATE& from);
  CS_STOP_AI_CALCULATE(CS_STOP_AI_CALCULATE&& from) noexcept
    : CS_STOP_AI_CALCULATE() {
    *this = ::std::move(from);
  }

  inline CS_STOP_AI_CALCULATE& operator=(const CS_STOP_AI_CALCULATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_STOP_AI_CALCULATE& operator=(CS_STOP_AI_CALCULATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_STOP_AI_CALCULATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_STOP_AI_CALCULATE* internal_default_instance() {
    return reinterpret_cast<const CS_STOP_AI_CALCULATE*>(
               &_CS_STOP_AI_CALCULATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CS_STOP_AI_CALCULATE& a, CS_STOP_AI_CALCULATE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_STOP_AI_CALCULATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_STOP_AI_CALCULATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_STOP_AI_CALCULATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_STOP_AI_CALCULATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_STOP_AI_CALCULATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_STOP_AI_CALCULATE& from) {
    CS_STOP_AI_CALCULATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_STOP_AI_CALCULATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_STOP_AI_CALCULATE";
  }
  protected:
  explicit CS_STOP_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBStopFieldNumber = 1,
  };
  // bool bStop = 1;
  void clear_bstop();
  bool bstop() const;
  void set_bstop(bool value);
  private:
  bool _internal_bstop() const;
  void _internal_set_bstop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_STOP_AI_CALCULATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bstop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ACCEPT_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_ACCEPT_PARTY) */ {
 public:
  inline SC_ACCEPT_PARTY() : SC_ACCEPT_PARTY(nullptr) {}
  ~SC_ACCEPT_PARTY() override;
  explicit PROTOBUF_CONSTEXPR SC_ACCEPT_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ACCEPT_PARTY(const SC_ACCEPT_PARTY& from);
  SC_ACCEPT_PARTY(SC_ACCEPT_PARTY&& from) noexcept
    : SC_ACCEPT_PARTY() {
    *this = ::std::move(from);
  }

  inline SC_ACCEPT_PARTY& operator=(const SC_ACCEPT_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ACCEPT_PARTY& operator=(SC_ACCEPT_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ACCEPT_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ACCEPT_PARTY* internal_default_instance() {
    return reinterpret_cast<const SC_ACCEPT_PARTY*>(
               &_SC_ACCEPT_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SC_ACCEPT_PARTY& a, SC_ACCEPT_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ACCEPT_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ACCEPT_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_ACCEPT_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_ACCEPT_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_ACCEPT_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_ACCEPT_PARTY& from) {
    SC_ACCEPT_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ACCEPT_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_ACCEPT_PARTY";
  }
  protected:
  explicit SC_ACCEPT_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 3,
    kFromPlayerIDFieldNumber = 1,
    kToPlayerIDFieldNumber = 2,
  };
  // .game.PlayerInfo playerInfo = 3;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::game::PlayerInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::game::PlayerInfo* release_playerinfo();
  ::game::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::game::PlayerInfo* playerinfo);
  private:
  const ::game::PlayerInfo& _internal_playerinfo() const;
  ::game::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::game::PlayerInfo* playerinfo);
  ::game::PlayerInfo* unsafe_arena_release_playerinfo();

  // uint32 FromPlayerID = 1;
  void clear_fromplayerid();
  uint32_t fromplayerid() const;
  void set_fromplayerid(uint32_t value);
  private:
  uint32_t _internal_fromplayerid() const;
  void _internal_set_fromplayerid(uint32_t value);
  public:

  // uint32 ToPlayerID = 2;
  void clear_toplayerid();
  uint32_t toplayerid() const;
  void set_toplayerid(uint32_t value);
  private:
  uint32_t _internal_toplayerid() const;
  void _internal_set_toplayerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_ACCEPT_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::PlayerInfo* playerinfo_;
    uint32_t fromplayerid_;
    uint32_t toplayerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CANCEL_ENTERING_DUNGEON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CANCEL_ENTERING_DUNGEON) */ {
 public:
  inline SC_CANCEL_ENTERING_DUNGEON() : SC_CANCEL_ENTERING_DUNGEON(nullptr) {}
  ~SC_CANCEL_ENTERING_DUNGEON() override;
  explicit PROTOBUF_CONSTEXPR SC_CANCEL_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CANCEL_ENTERING_DUNGEON(const SC_CANCEL_ENTERING_DUNGEON& from);
  SC_CANCEL_ENTERING_DUNGEON(SC_CANCEL_ENTERING_DUNGEON&& from) noexcept
    : SC_CANCEL_ENTERING_DUNGEON() {
    *this = ::std::move(from);
  }

  inline SC_CANCEL_ENTERING_DUNGEON& operator=(const SC_CANCEL_ENTERING_DUNGEON& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CANCEL_ENTERING_DUNGEON& operator=(SC_CANCEL_ENTERING_DUNGEON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CANCEL_ENTERING_DUNGEON& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CANCEL_ENTERING_DUNGEON* internal_default_instance() {
    return reinterpret_cast<const SC_CANCEL_ENTERING_DUNGEON*>(
               &_SC_CANCEL_ENTERING_DUNGEON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SC_CANCEL_ENTERING_DUNGEON& a, SC_CANCEL_ENTERING_DUNGEON& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CANCEL_ENTERING_DUNGEON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CANCEL_ENTERING_DUNGEON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CANCEL_ENTERING_DUNGEON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CANCEL_ENTERING_DUNGEON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CANCEL_ENTERING_DUNGEON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CANCEL_ENTERING_DUNGEON& from) {
    SC_CANCEL_ENTERING_DUNGEON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CANCEL_ENTERING_DUNGEON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CANCEL_ENTERING_DUNGEON";
  }
  protected:
  explicit SC_CANCEL_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBCancelFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
  };
  // bool bCancel = 1;
  void clear_bcancel();
  bool bcancel() const;
  void set_bcancel(bool value);
  private:
  bool _internal_bcancel() const;
  void _internal_set_bcancel(bool value);
  public:

  // uint32 playerID = 2;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CANCEL_ENTERING_DUNGEON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bcancel_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CREATE_MONSTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CREATE_MONSTER) */ {
 public:
  inline SC_CREATE_MONSTER() : SC_CREATE_MONSTER(nullptr) {}
  ~SC_CREATE_MONSTER() override;
  explicit PROTOBUF_CONSTEXPR SC_CREATE_MONSTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CREATE_MONSTER(const SC_CREATE_MONSTER& from);
  SC_CREATE_MONSTER(SC_CREATE_MONSTER&& from) noexcept
    : SC_CREATE_MONSTER() {
    *this = ::std::move(from);
  }

  inline SC_CREATE_MONSTER& operator=(const SC_CREATE_MONSTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CREATE_MONSTER& operator=(SC_CREATE_MONSTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CREATE_MONSTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CREATE_MONSTER* internal_default_instance() {
    return reinterpret_cast<const SC_CREATE_MONSTER*>(
               &_SC_CREATE_MONSTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SC_CREATE_MONSTER& a, SC_CREATE_MONSTER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CREATE_MONSTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CREATE_MONSTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CREATE_MONSTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CREATE_MONSTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CREATE_MONSTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CREATE_MONSTER& from) {
    SC_CREATE_MONSTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CREATE_MONSTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CREATE_MONSTER";
  }
  protected:
  explicit SC_CREATE_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterPosFieldNumber = 3,
    kAiIDFieldNumber = 1,
    kMonsterTypeFieldNumber = 2,
  };
  // .game.Position monsterPos = 3;
  bool has_monsterpos() const;
  private:
  bool _internal_has_monsterpos() const;
  public:
  void clear_monsterpos();
  const ::game::Position& monsterpos() const;
  PROTOBUF_NODISCARD ::game::Position* release_monsterpos();
  ::game::Position* mutable_monsterpos();
  void set_allocated_monsterpos(::game::Position* monsterpos);
  private:
  const ::game::Position& _internal_monsterpos() const;
  ::game::Position* _internal_mutable_monsterpos();
  public:
  void unsafe_arena_set_allocated_monsterpos(
      ::game::Position* monsterpos);
  ::game::Position* unsafe_arena_release_monsterpos();

  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // uint32 monsterType = 2;
  void clear_monstertype();
  uint32_t monstertype() const;
  void set_monstertype(uint32_t value);
  private:
  uint32_t _internal_monstertype() const;
  void _internal_set_monstertype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CREATE_MONSTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::Position* monsterpos_;
    uint32_t aiid_;
    uint32_t monstertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_MAKE_PARTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_MAKE_PARTY) */ {
 public:
  inline SC_MAKE_PARTY() : SC_MAKE_PARTY(nullptr) {}
  ~SC_MAKE_PARTY() override;
  explicit PROTOBUF_CONSTEXPR SC_MAKE_PARTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_MAKE_PARTY(const SC_MAKE_PARTY& from);
  SC_MAKE_PARTY(SC_MAKE_PARTY&& from) noexcept
    : SC_MAKE_PARTY() {
    *this = ::std::move(from);
  }

  inline SC_MAKE_PARTY& operator=(const SC_MAKE_PARTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MAKE_PARTY& operator=(SC_MAKE_PARTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MAKE_PARTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MAKE_PARTY* internal_default_instance() {
    return reinterpret_cast<const SC_MAKE_PARTY*>(
               &_SC_MAKE_PARTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SC_MAKE_PARTY& a, SC_MAKE_PARTY& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MAKE_PARTY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MAKE_PARTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MAKE_PARTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MAKE_PARTY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_MAKE_PARTY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_MAKE_PARTY& from) {
    SC_MAKE_PARTY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MAKE_PARTY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_MAKE_PARTY";
  }
  protected:
  explicit SC_MAKE_PARTY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromPlayerIDFieldNumber = 1,
    kToPlayerIDFieldNumber = 2,
  };
  // uint32 FromPlayerID = 1;
  void clear_fromplayerid();
  uint32_t fromplayerid() const;
  void set_fromplayerid(uint32_t value);
  private:
  uint32_t _internal_fromplayerid() const;
  void _internal_set_fromplayerid(uint32_t value);
  public:

  // uint32 ToPlayerID = 2;
  void clear_toplayerid();
  uint32_t toplayerid() const;
  void set_toplayerid(uint32_t value);
  private:
  uint32_t _internal_toplayerid() const;
  void _internal_set_toplayerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_MAKE_PARTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t fromplayerid_;
    uint32_t toplayerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_PREPARE_ENTERING_DUNGEON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_PREPARE_ENTERING_DUNGEON) */ {
 public:
  inline SC_PREPARE_ENTERING_DUNGEON() : SC_PREPARE_ENTERING_DUNGEON(nullptr) {}
  ~SC_PREPARE_ENTERING_DUNGEON() override;
  explicit PROTOBUF_CONSTEXPR SC_PREPARE_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_PREPARE_ENTERING_DUNGEON(const SC_PREPARE_ENTERING_DUNGEON& from);
  SC_PREPARE_ENTERING_DUNGEON(SC_PREPARE_ENTERING_DUNGEON&& from) noexcept
    : SC_PREPARE_ENTERING_DUNGEON() {
    *this = ::std::move(from);
  }

  inline SC_PREPARE_ENTERING_DUNGEON& operator=(const SC_PREPARE_ENTERING_DUNGEON& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_PREPARE_ENTERING_DUNGEON& operator=(SC_PREPARE_ENTERING_DUNGEON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_PREPARE_ENTERING_DUNGEON& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_PREPARE_ENTERING_DUNGEON* internal_default_instance() {
    return reinterpret_cast<const SC_PREPARE_ENTERING_DUNGEON*>(
               &_SC_PREPARE_ENTERING_DUNGEON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SC_PREPARE_ENTERING_DUNGEON& a, SC_PREPARE_ENTERING_DUNGEON& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_PREPARE_ENTERING_DUNGEON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_PREPARE_ENTERING_DUNGEON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_PREPARE_ENTERING_DUNGEON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_PREPARE_ENTERING_DUNGEON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_PREPARE_ENTERING_DUNGEON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_PREPARE_ENTERING_DUNGEON& from) {
    SC_PREPARE_ENTERING_DUNGEON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_PREPARE_ENTERING_DUNGEON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_PREPARE_ENTERING_DUNGEON";
  }
  protected:
  explicit SC_PREPARE_ENTERING_DUNGEON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnterFieldNumber = 1,
  };
  // bool bEnter = 1;
  void clear_benter();
  bool benter() const;
  void set_benter(bool value);
  private:
  bool _internal_benter() const;
  void _internal_set_benter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_PREPARE_ENTERING_DUNGEON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool benter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_REMOVE_CHARACTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_REMOVE_CHARACTER) */ {
 public:
  inline SC_REMOVE_CHARACTER() : SC_REMOVE_CHARACTER(nullptr) {}
  ~SC_REMOVE_CHARACTER() override;
  explicit PROTOBUF_CONSTEXPR SC_REMOVE_CHARACTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_REMOVE_CHARACTER(const SC_REMOVE_CHARACTER& from);
  SC_REMOVE_CHARACTER(SC_REMOVE_CHARACTER&& from) noexcept
    : SC_REMOVE_CHARACTER() {
    *this = ::std::move(from);
  }

  inline SC_REMOVE_CHARACTER& operator=(const SC_REMOVE_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_REMOVE_CHARACTER& operator=(SC_REMOVE_CHARACTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_REMOVE_CHARACTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_REMOVE_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const SC_REMOVE_CHARACTER*>(
               &_SC_REMOVE_CHARACTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SC_REMOVE_CHARACTER& a, SC_REMOVE_CHARACTER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_REMOVE_CHARACTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_REMOVE_CHARACTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_REMOVE_CHARACTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_REMOVE_CHARACTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_REMOVE_CHARACTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_REMOVE_CHARACTER& from) {
    SC_REMOVE_CHARACTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_REMOVE_CHARACTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_REMOVE_CHARACTER";
  }
  protected:
  explicit SC_REMOVE_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_REMOVE_CHARACTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_RESPONSE_ENTER_DUNGEON_BEGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN) */ {
 public:
  inline SC_RESPONSE_ENTER_DUNGEON_BEGIN() : SC_RESPONSE_ENTER_DUNGEON_BEGIN(nullptr) {}
  ~SC_RESPONSE_ENTER_DUNGEON_BEGIN() override;
  explicit PROTOBUF_CONSTEXPR SC_RESPONSE_ENTER_DUNGEON_BEGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_RESPONSE_ENTER_DUNGEON_BEGIN(const SC_RESPONSE_ENTER_DUNGEON_BEGIN& from);
  SC_RESPONSE_ENTER_DUNGEON_BEGIN(SC_RESPONSE_ENTER_DUNGEON_BEGIN&& from) noexcept
    : SC_RESPONSE_ENTER_DUNGEON_BEGIN() {
    *this = ::std::move(from);
  }

  inline SC_RESPONSE_ENTER_DUNGEON_BEGIN& operator=(const SC_RESPONSE_ENTER_DUNGEON_BEGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_RESPONSE_ENTER_DUNGEON_BEGIN& operator=(SC_RESPONSE_ENTER_DUNGEON_BEGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_RESPONSE_ENTER_DUNGEON_BEGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_RESPONSE_ENTER_DUNGEON_BEGIN* internal_default_instance() {
    return reinterpret_cast<const SC_RESPONSE_ENTER_DUNGEON_BEGIN*>(
               &_SC_RESPONSE_ENTER_DUNGEON_BEGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SC_RESPONSE_ENTER_DUNGEON_BEGIN& a, SC_RESPONSE_ENTER_DUNGEON_BEGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_RESPONSE_ENTER_DUNGEON_BEGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_RESPONSE_ENTER_DUNGEON_BEGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_RESPONSE_ENTER_DUNGEON_BEGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_RESPONSE_ENTER_DUNGEON_BEGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_RESPONSE_ENTER_DUNGEON_BEGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_RESPONSE_ENTER_DUNGEON_BEGIN& from) {
    SC_RESPONSE_ENTER_DUNGEON_BEGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_RESPONSE_ENTER_DUNGEON_BEGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_RESPONSE_ENTER_DUNGEON_BEGIN";
  }
  protected:
  explicit SC_RESPONSE_ENTER_DUNGEON_BEGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnterBeginFieldNumber = 1,
  };
  // bool bEnterBegin = 1;
  void clear_benterbegin();
  bool benterbegin() const;
  void set_benterbegin(bool value);
  private:
  bool _internal_benterbegin() const;
  void _internal_set_benterbegin(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool benterbegin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_RESPONSE_ENTER_DUNGEON_END final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_RESPONSE_ENTER_DUNGEON_END) */ {
 public:
  inline SC_RESPONSE_ENTER_DUNGEON_END() : SC_RESPONSE_ENTER_DUNGEON_END(nullptr) {}
  ~SC_RESPONSE_ENTER_DUNGEON_END() override;
  explicit PROTOBUF_CONSTEXPR SC_RESPONSE_ENTER_DUNGEON_END(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_RESPONSE_ENTER_DUNGEON_END(const SC_RESPONSE_ENTER_DUNGEON_END& from);
  SC_RESPONSE_ENTER_DUNGEON_END(SC_RESPONSE_ENTER_DUNGEON_END&& from) noexcept
    : SC_RESPONSE_ENTER_DUNGEON_END() {
    *this = ::std::move(from);
  }

  inline SC_RESPONSE_ENTER_DUNGEON_END& operator=(const SC_RESPONSE_ENTER_DUNGEON_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_RESPONSE_ENTER_DUNGEON_END& operator=(SC_RESPONSE_ENTER_DUNGEON_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_RESPONSE_ENTER_DUNGEON_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_RESPONSE_ENTER_DUNGEON_END* internal_default_instance() {
    return reinterpret_cast<const SC_RESPONSE_ENTER_DUNGEON_END*>(
               &_SC_RESPONSE_ENTER_DUNGEON_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SC_RESPONSE_ENTER_DUNGEON_END& a, SC_RESPONSE_ENTER_DUNGEON_END& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_RESPONSE_ENTER_DUNGEON_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_RESPONSE_ENTER_DUNGEON_END* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_RESPONSE_ENTER_DUNGEON_END* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_RESPONSE_ENTER_DUNGEON_END>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_RESPONSE_ENTER_DUNGEON_END& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_RESPONSE_ENTER_DUNGEON_END& from) {
    SC_RESPONSE_ENTER_DUNGEON_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_RESPONSE_ENTER_DUNGEON_END* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_RESPONSE_ENTER_DUNGEON_END";
  }
  protected:
  explicit SC_RESPONSE_ENTER_DUNGEON_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnterEndFieldNumber = 1,
  };
  // bool bEnterEnd = 1;
  void clear_benterend();
  bool benterend() const;
  void set_benterend(bool value);
  private:
  bool _internal_benterend() const;
  void _internal_set_benterend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_RESPONSE_ENTER_DUNGEON_END)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool benterend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_SPAWN_CHARACTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_SPAWN_CHARACTER) */ {
 public:
  inline SC_SPAWN_CHARACTER() : SC_SPAWN_CHARACTER(nullptr) {}
  ~SC_SPAWN_CHARACTER() override;
  explicit PROTOBUF_CONSTEXPR SC_SPAWN_CHARACTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_SPAWN_CHARACTER(const SC_SPAWN_CHARACTER& from);
  SC_SPAWN_CHARACTER(SC_SPAWN_CHARACTER&& from) noexcept
    : SC_SPAWN_CHARACTER() {
    *this = ::std::move(from);
  }

  inline SC_SPAWN_CHARACTER& operator=(const SC_SPAWN_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SPAWN_CHARACTER& operator=(SC_SPAWN_CHARACTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_SPAWN_CHARACTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_SPAWN_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const SC_SPAWN_CHARACTER*>(
               &_SC_SPAWN_CHARACTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SC_SPAWN_CHARACTER& a, SC_SPAWN_CHARACTER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SPAWN_CHARACTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SPAWN_CHARACTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_SPAWN_CHARACTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_SPAWN_CHARACTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_SPAWN_CHARACTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_SPAWN_CHARACTER& from) {
    SC_SPAWN_CHARACTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SPAWN_CHARACTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_SPAWN_CHARACTER";
  }
  protected:
  explicit SC_SPAWN_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerPosFieldNumber = 2,
    kPlayerInfoFieldNumber = 4,
    kPlayerIDFieldNumber = 1,
    kCameraYawFieldNumber = 3,
  };
  // .game.Position playerPos = 2;
  bool has_playerpos() const;
  private:
  bool _internal_has_playerpos() const;
  public:
  void clear_playerpos();
  const ::game::Position& playerpos() const;
  PROTOBUF_NODISCARD ::game::Position* release_playerpos();
  ::game::Position* mutable_playerpos();
  void set_allocated_playerpos(::game::Position* playerpos);
  private:
  const ::game::Position& _internal_playerpos() const;
  ::game::Position* _internal_mutable_playerpos();
  public:
  void unsafe_arena_set_allocated_playerpos(
      ::game::Position* playerpos);
  ::game::Position* unsafe_arena_release_playerpos();

  // .game.PlayerInfo playerInfo = 4;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::game::PlayerInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::game::PlayerInfo* release_playerinfo();
  ::game::PlayerInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::game::PlayerInfo* playerinfo);
  private:
  const ::game::PlayerInfo& _internal_playerinfo() const;
  ::game::PlayerInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::game::PlayerInfo* playerinfo);
  ::game::PlayerInfo* unsafe_arena_release_playerinfo();

  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // float cameraYaw = 3;
  void clear_camerayaw();
  float camerayaw() const;
  void set_camerayaw(float value);
  private:
  float _internal_camerayaw() const;
  void _internal_set_camerayaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_SPAWN_CHARACTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::Position* playerpos_;
    ::game::PlayerInfo* playerinfo_;
    uint32_t playerid_;
    float camerayaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_START_AI_CALCULATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_START_AI_CALCULATE) */ {
 public:
  inline SC_START_AI_CALCULATE() : SC_START_AI_CALCULATE(nullptr) {}
  ~SC_START_AI_CALCULATE() override;
  explicit PROTOBUF_CONSTEXPR SC_START_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_START_AI_CALCULATE(const SC_START_AI_CALCULATE& from);
  SC_START_AI_CALCULATE(SC_START_AI_CALCULATE&& from) noexcept
    : SC_START_AI_CALCULATE() {
    *this = ::std::move(from);
  }

  inline SC_START_AI_CALCULATE& operator=(const SC_START_AI_CALCULATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_START_AI_CALCULATE& operator=(SC_START_AI_CALCULATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_START_AI_CALCULATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_START_AI_CALCULATE* internal_default_instance() {
    return reinterpret_cast<const SC_START_AI_CALCULATE*>(
               &_SC_START_AI_CALCULATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SC_START_AI_CALCULATE& a, SC_START_AI_CALCULATE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_START_AI_CALCULATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_START_AI_CALCULATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_START_AI_CALCULATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_START_AI_CALCULATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_START_AI_CALCULATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_START_AI_CALCULATE& from) {
    SC_START_AI_CALCULATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_START_AI_CALCULATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_START_AI_CALCULATE";
  }
  protected:
  explicit SC_START_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBStartFieldNumber = 1,
  };
  // bool bStart = 1;
  void clear_bstart();
  bool bstart() const;
  void set_bstart(bool value);
  private:
  bool _internal_bstart() const;
  void _internal_set_bstart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_START_AI_CALCULATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bstart_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_STOP_AI_CALCULATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_STOP_AI_CALCULATE) */ {
 public:
  inline SC_STOP_AI_CALCULATE() : SC_STOP_AI_CALCULATE(nullptr) {}
  ~SC_STOP_AI_CALCULATE() override;
  explicit PROTOBUF_CONSTEXPR SC_STOP_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_STOP_AI_CALCULATE(const SC_STOP_AI_CALCULATE& from);
  SC_STOP_AI_CALCULATE(SC_STOP_AI_CALCULATE&& from) noexcept
    : SC_STOP_AI_CALCULATE() {
    *this = ::std::move(from);
  }

  inline SC_STOP_AI_CALCULATE& operator=(const SC_STOP_AI_CALCULATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_STOP_AI_CALCULATE& operator=(SC_STOP_AI_CALCULATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_STOP_AI_CALCULATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_STOP_AI_CALCULATE* internal_default_instance() {
    return reinterpret_cast<const SC_STOP_AI_CALCULATE*>(
               &_SC_STOP_AI_CALCULATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SC_STOP_AI_CALCULATE& a, SC_STOP_AI_CALCULATE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_STOP_AI_CALCULATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_STOP_AI_CALCULATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_STOP_AI_CALCULATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_STOP_AI_CALCULATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_STOP_AI_CALCULATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_STOP_AI_CALCULATE& from) {
    SC_STOP_AI_CALCULATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_STOP_AI_CALCULATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_STOP_AI_CALCULATE";
  }
  protected:
  explicit SC_STOP_AI_CALCULATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBStopFieldNumber = 1,
  };
  // bool bStop = 1;
  void clear_bstop();
  bool bstop() const;
  void set_bstop(bool value);
  private:
  bool _internal_bstop() const;
  void _internal_set_bstop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_STOP_AI_CALCULATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bstop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_CHAT) */ {
 public:
  inline CS_CHAT() : CS_CHAT(nullptr) {}
  ~CS_CHAT() override;
  explicit PROTOBUF_CONSTEXPR CS_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_CHAT(const CS_CHAT& from);
  CS_CHAT(CS_CHAT&& from) noexcept
    : CS_CHAT() {
    *this = ::std::move(from);
  }

  inline CS_CHAT& operator=(const CS_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CHAT& operator=(CS_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_CHAT* internal_default_instance() {
    return reinterpret_cast<const CS_CHAT*>(
               &_CS_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CS_CHAT& a, CS_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_CHAT& from) {
    CS_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_CHAT";
  }
  protected:
  explicit CS_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTargetIDFieldNumber = 1,
    kChannelFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 targetID = 1;
  void clear_targetid();
  uint32_t targetid() const;
  void set_targetid(uint32_t value);
  private:
  uint32_t _internal_targetid() const;
  void _internal_set_targetid(uint32_t value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t targetid_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CHAT) */ {
 public:
  inline SC_CHAT() : SC_CHAT(nullptr) {}
  ~SC_CHAT() override;
  explicit PROTOBUF_CONSTEXPR SC_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CHAT(const SC_CHAT& from);
  SC_CHAT(SC_CHAT&& from) noexcept
    : SC_CHAT() {
    *this = ::std::move(from);
  }

  inline SC_CHAT& operator=(const SC_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHAT& operator=(SC_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHAT* internal_default_instance() {
    return reinterpret_cast<const SC_CHAT*>(
               &_SC_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SC_CHAT& a, SC_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CHAT& from) {
    SC_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CHAT";
  }
  protected:
  explicit SC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kPlayerIDFieldNumber = 1,
    kChannelFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t playerid_;
    uint32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_KEYINFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_KEYINFO) */ {
 public:
  inline CS_KEYINFO() : CS_KEYINFO(nullptr) {}
  ~CS_KEYINFO() override;
  explicit PROTOBUF_CONSTEXPR CS_KEYINFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_KEYINFO(const CS_KEYINFO& from);
  CS_KEYINFO(CS_KEYINFO&& from) noexcept
    : CS_KEYINFO() {
    *this = ::std::move(from);
  }

  inline CS_KEYINFO& operator=(const CS_KEYINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_KEYINFO& operator=(CS_KEYINFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_KEYINFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_KEYINFO* internal_default_instance() {
    return reinterpret_cast<const CS_KEYINFO*>(
               &_CS_KEYINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CS_KEYINFO& a, CS_KEYINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_KEYINFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_KEYINFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_KEYINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_KEYINFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_KEYINFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_KEYINFO& from) {
    CS_KEYINFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_KEYINFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_KEYINFO";
  }
  protected:
  explicit CS_KEYINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyInfoFieldNumber = 1,
    kCameraYawFieldNumber = 2,
  };
  // uint32 keyInfo = 1;
  void clear_keyinfo();
  uint32_t keyinfo() const;
  void set_keyinfo(uint32_t value);
  private:
  uint32_t _internal_keyinfo() const;
  void _internal_set_keyinfo(uint32_t value);
  public:

  // float cameraYaw = 2;
  void clear_camerayaw();
  float camerayaw() const;
  void set_camerayaw(float value);
  private:
  float _internal_camerayaw() const;
  void _internal_set_camerayaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_KEYINFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t keyinfo_;
    float camerayaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_MONSTER_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_MONSTER_ATTACK) */ {
 public:
  inline CS_MONSTER_ATTACK() : CS_MONSTER_ATTACK(nullptr) {}
  ~CS_MONSTER_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR CS_MONSTER_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_MONSTER_ATTACK(const CS_MONSTER_ATTACK& from);
  CS_MONSTER_ATTACK(CS_MONSTER_ATTACK&& from) noexcept
    : CS_MONSTER_ATTACK() {
    *this = ::std::move(from);
  }

  inline CS_MONSTER_ATTACK& operator=(const CS_MONSTER_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MONSTER_ATTACK& operator=(CS_MONSTER_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MONSTER_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MONSTER_ATTACK* internal_default_instance() {
    return reinterpret_cast<const CS_MONSTER_ATTACK*>(
               &_CS_MONSTER_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CS_MONSTER_ATTACK& a, CS_MONSTER_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MONSTER_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MONSTER_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MONSTER_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MONSTER_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_MONSTER_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_MONSTER_ATTACK& from) {
    CS_MONSTER_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MONSTER_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_MONSTER_ATTACK";
  }
  protected:
  explicit CS_MONSTER_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 damage = 2;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_MONSTER_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_MONSTER_DIE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_MONSTER_DIE) */ {
 public:
  inline CS_MONSTER_DIE() : CS_MONSTER_DIE(nullptr) {}
  ~CS_MONSTER_DIE() override;
  explicit PROTOBUF_CONSTEXPR CS_MONSTER_DIE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_MONSTER_DIE(const CS_MONSTER_DIE& from);
  CS_MONSTER_DIE(CS_MONSTER_DIE&& from) noexcept
    : CS_MONSTER_DIE() {
    *this = ::std::move(from);
  }

  inline CS_MONSTER_DIE& operator=(const CS_MONSTER_DIE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MONSTER_DIE& operator=(CS_MONSTER_DIE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MONSTER_DIE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MONSTER_DIE* internal_default_instance() {
    return reinterpret_cast<const CS_MONSTER_DIE*>(
               &_CS_MONSTER_DIE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CS_MONSTER_DIE& a, CS_MONSTER_DIE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MONSTER_DIE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MONSTER_DIE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MONSTER_DIE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MONSTER_DIE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_MONSTER_DIE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_MONSTER_DIE& from) {
    CS_MONSTER_DIE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MONSTER_DIE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_MONSTER_DIE";
  }
  protected:
  explicit CS_MONSTER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiIDFieldNumber = 1,
  };
  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_MONSTER_DIE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t aiid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_PLAYER_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_PLAYER_ATTACK) */ {
 public:
  inline CS_PLAYER_ATTACK() : CS_PLAYER_ATTACK(nullptr) {}
  ~CS_PLAYER_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR CS_PLAYER_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_PLAYER_ATTACK(const CS_PLAYER_ATTACK& from);
  CS_PLAYER_ATTACK(CS_PLAYER_ATTACK&& from) noexcept
    : CS_PLAYER_ATTACK() {
    *this = ::std::move(from);
  }

  inline CS_PLAYER_ATTACK& operator=(const CS_PLAYER_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_PLAYER_ATTACK& operator=(CS_PLAYER_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_PLAYER_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_PLAYER_ATTACK* internal_default_instance() {
    return reinterpret_cast<const CS_PLAYER_ATTACK*>(
               &_CS_PLAYER_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CS_PLAYER_ATTACK& a, CS_PLAYER_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_PLAYER_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_PLAYER_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_PLAYER_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_PLAYER_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_PLAYER_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_PLAYER_ATTACK& from) {
    CS_PLAYER_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_PLAYER_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_PLAYER_ATTACK";
  }
  protected:
  explicit CS_PLAYER_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiIDFieldNumber = 1,
    kAttackDamageFieldNumber = 2,
  };
  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // uint32 attackDamage = 2;
  void clear_attackdamage();
  uint32_t attackdamage() const;
  void set_attackdamage(uint32_t value);
  private:
  uint32_t _internal_attackdamage() const;
  void _internal_set_attackdamage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_PLAYER_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t aiid_;
    uint32_t attackdamage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_PLAYER_DIE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_PLAYER_DIE) */ {
 public:
  inline CS_PLAYER_DIE() : CS_PLAYER_DIE(nullptr) {}
  ~CS_PLAYER_DIE() override;
  explicit PROTOBUF_CONSTEXPR CS_PLAYER_DIE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_PLAYER_DIE(const CS_PLAYER_DIE& from);
  CS_PLAYER_DIE(CS_PLAYER_DIE&& from) noexcept
    : CS_PLAYER_DIE() {
    *this = ::std::move(from);
  }

  inline CS_PLAYER_DIE& operator=(const CS_PLAYER_DIE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_PLAYER_DIE& operator=(CS_PLAYER_DIE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_PLAYER_DIE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_PLAYER_DIE* internal_default_instance() {
    return reinterpret_cast<const CS_PLAYER_DIE*>(
               &_CS_PLAYER_DIE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CS_PLAYER_DIE& a, CS_PLAYER_DIE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_PLAYER_DIE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_PLAYER_DIE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_PLAYER_DIE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_PLAYER_DIE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_PLAYER_DIE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_PLAYER_DIE& from) {
    CS_PLAYER_DIE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_PLAYER_DIE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_PLAYER_DIE";
  }
  protected:
  explicit CS_PLAYER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_PLAYER_DIE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_POSITION_SYNC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_POSITION_SYNC) */ {
 public:
  inline CS_POSITION_SYNC() : CS_POSITION_SYNC(nullptr) {}
  ~CS_POSITION_SYNC() override;
  explicit PROTOBUF_CONSTEXPR CS_POSITION_SYNC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_POSITION_SYNC(const CS_POSITION_SYNC& from);
  CS_POSITION_SYNC(CS_POSITION_SYNC&& from) noexcept
    : CS_POSITION_SYNC() {
    *this = ::std::move(from);
  }

  inline CS_POSITION_SYNC& operator=(const CS_POSITION_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_POSITION_SYNC& operator=(CS_POSITION_SYNC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_POSITION_SYNC& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_POSITION_SYNC* internal_default_instance() {
    return reinterpret_cast<const CS_POSITION_SYNC*>(
               &_CS_POSITION_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CS_POSITION_SYNC& a, CS_POSITION_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_POSITION_SYNC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_POSITION_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_POSITION_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_POSITION_SYNC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_POSITION_SYNC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_POSITION_SYNC& from) {
    CS_POSITION_SYNC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_POSITION_SYNC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_POSITION_SYNC";
  }
  protected:
  explicit CS_POSITION_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kCameraYawFieldNumber = 3,
  };
  // float posX = 1;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 2;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float cameraYaw = 3;
  void clear_camerayaw();
  float camerayaw() const;
  void set_camerayaw(float value);
  private:
  float _internal_camerayaw() const;
  void _internal_set_camerayaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_POSITION_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float posx_;
    float posy_;
    float camerayaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_KEYINFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_KEYINFO) */ {
 public:
  inline SC_KEYINFO() : SC_KEYINFO(nullptr) {}
  ~SC_KEYINFO() override;
  explicit PROTOBUF_CONSTEXPR SC_KEYINFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_KEYINFO(const SC_KEYINFO& from);
  SC_KEYINFO(SC_KEYINFO&& from) noexcept
    : SC_KEYINFO() {
    *this = ::std::move(from);
  }

  inline SC_KEYINFO& operator=(const SC_KEYINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_KEYINFO& operator=(SC_KEYINFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_KEYINFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_KEYINFO* internal_default_instance() {
    return reinterpret_cast<const SC_KEYINFO*>(
               &_SC_KEYINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SC_KEYINFO& a, SC_KEYINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_KEYINFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_KEYINFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_KEYINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_KEYINFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_KEYINFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_KEYINFO& from) {
    SC_KEYINFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_KEYINFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_KEYINFO";
  }
  protected:
  explicit SC_KEYINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
    kKeyInfoFieldNumber = 2,
    kCameraYawFieldNumber = 3,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 keyInfo = 2;
  void clear_keyinfo();
  uint32_t keyinfo() const;
  void set_keyinfo(uint32_t value);
  private:
  uint32_t _internal_keyinfo() const;
  void _internal_set_keyinfo(uint32_t value);
  public:

  // float cameraYaw = 3;
  void clear_camerayaw();
  float camerayaw() const;
  void set_camerayaw(float value);
  private:
  float _internal_camerayaw() const;
  void _internal_set_camerayaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_KEYINFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t keyinfo_;
    float camerayaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_MONSTER_DAMAGED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_MONSTER_DAMAGED) */ {
 public:
  inline SC_MONSTER_DAMAGED() : SC_MONSTER_DAMAGED(nullptr) {}
  ~SC_MONSTER_DAMAGED() override;
  explicit PROTOBUF_CONSTEXPR SC_MONSTER_DAMAGED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_MONSTER_DAMAGED(const SC_MONSTER_DAMAGED& from);
  SC_MONSTER_DAMAGED(SC_MONSTER_DAMAGED&& from) noexcept
    : SC_MONSTER_DAMAGED() {
    *this = ::std::move(from);
  }

  inline SC_MONSTER_DAMAGED& operator=(const SC_MONSTER_DAMAGED& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MONSTER_DAMAGED& operator=(SC_MONSTER_DAMAGED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MONSTER_DAMAGED& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MONSTER_DAMAGED* internal_default_instance() {
    return reinterpret_cast<const SC_MONSTER_DAMAGED*>(
               &_SC_MONSTER_DAMAGED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SC_MONSTER_DAMAGED& a, SC_MONSTER_DAMAGED& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MONSTER_DAMAGED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MONSTER_DAMAGED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MONSTER_DAMAGED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MONSTER_DAMAGED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_MONSTER_DAMAGED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_MONSTER_DAMAGED& from) {
    SC_MONSTER_DAMAGED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MONSTER_DAMAGED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_MONSTER_DAMAGED";
  }
  protected:
  explicit SC_MONSTER_DAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiIDFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // uint32 damage = 2;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_MONSTER_DAMAGED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t aiid_;
    uint32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_MONSTER_DIE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_MONSTER_DIE) */ {
 public:
  inline SC_MONSTER_DIE() : SC_MONSTER_DIE(nullptr) {}
  ~SC_MONSTER_DIE() override;
  explicit PROTOBUF_CONSTEXPR SC_MONSTER_DIE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_MONSTER_DIE(const SC_MONSTER_DIE& from);
  SC_MONSTER_DIE(SC_MONSTER_DIE&& from) noexcept
    : SC_MONSTER_DIE() {
    *this = ::std::move(from);
  }

  inline SC_MONSTER_DIE& operator=(const SC_MONSTER_DIE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MONSTER_DIE& operator=(SC_MONSTER_DIE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MONSTER_DIE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MONSTER_DIE* internal_default_instance() {
    return reinterpret_cast<const SC_MONSTER_DIE*>(
               &_SC_MONSTER_DIE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SC_MONSTER_DIE& a, SC_MONSTER_DIE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MONSTER_DIE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MONSTER_DIE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MONSTER_DIE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MONSTER_DIE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_MONSTER_DIE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_MONSTER_DIE& from) {
    SC_MONSTER_DIE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MONSTER_DIE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_MONSTER_DIE";
  }
  protected:
  explicit SC_MONSTER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiIDFieldNumber = 1,
  };
  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_MONSTER_DIE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t aiid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_PLAYER_DAMAGED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_PLAYER_DAMAGED) */ {
 public:
  inline SC_PLAYER_DAMAGED() : SC_PLAYER_DAMAGED(nullptr) {}
  ~SC_PLAYER_DAMAGED() override;
  explicit PROTOBUF_CONSTEXPR SC_PLAYER_DAMAGED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_PLAYER_DAMAGED(const SC_PLAYER_DAMAGED& from);
  SC_PLAYER_DAMAGED(SC_PLAYER_DAMAGED&& from) noexcept
    : SC_PLAYER_DAMAGED() {
    *this = ::std::move(from);
  }

  inline SC_PLAYER_DAMAGED& operator=(const SC_PLAYER_DAMAGED& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_PLAYER_DAMAGED& operator=(SC_PLAYER_DAMAGED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_PLAYER_DAMAGED& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_PLAYER_DAMAGED* internal_default_instance() {
    return reinterpret_cast<const SC_PLAYER_DAMAGED*>(
               &_SC_PLAYER_DAMAGED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SC_PLAYER_DAMAGED& a, SC_PLAYER_DAMAGED& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_PLAYER_DAMAGED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_PLAYER_DAMAGED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_PLAYER_DAMAGED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_PLAYER_DAMAGED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_PLAYER_DAMAGED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_PLAYER_DAMAGED& from) {
    SC_PLAYER_DAMAGED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_PLAYER_DAMAGED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_PLAYER_DAMAGED";
  }
  protected:
  explicit SC_PLAYER_DAMAGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 damage = 2;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_PLAYER_DAMAGED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_PLAYER_DIE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_PLAYER_DIE) */ {
 public:
  inline SC_PLAYER_DIE() : SC_PLAYER_DIE(nullptr) {}
  ~SC_PLAYER_DIE() override;
  explicit PROTOBUF_CONSTEXPR SC_PLAYER_DIE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_PLAYER_DIE(const SC_PLAYER_DIE& from);
  SC_PLAYER_DIE(SC_PLAYER_DIE&& from) noexcept
    : SC_PLAYER_DIE() {
    *this = ::std::move(from);
  }

  inline SC_PLAYER_DIE& operator=(const SC_PLAYER_DIE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_PLAYER_DIE& operator=(SC_PLAYER_DIE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_PLAYER_DIE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_PLAYER_DIE* internal_default_instance() {
    return reinterpret_cast<const SC_PLAYER_DIE*>(
               &_SC_PLAYER_DIE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SC_PLAYER_DIE& a, SC_PLAYER_DIE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_PLAYER_DIE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_PLAYER_DIE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_PLAYER_DIE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_PLAYER_DIE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_PLAYER_DIE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_PLAYER_DIE& from) {
    SC_PLAYER_DIE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_PLAYER_DIE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_PLAYER_DIE";
  }
  protected:
  explicit SC_PLAYER_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_PLAYER_DIE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_POSITION_SYNC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_POSITION_SYNC) */ {
 public:
  inline SC_POSITION_SYNC() : SC_POSITION_SYNC(nullptr) {}
  ~SC_POSITION_SYNC() override;
  explicit PROTOBUF_CONSTEXPR SC_POSITION_SYNC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_POSITION_SYNC(const SC_POSITION_SYNC& from);
  SC_POSITION_SYNC(SC_POSITION_SYNC&& from) noexcept
    : SC_POSITION_SYNC() {
    *this = ::std::move(from);
  }

  inline SC_POSITION_SYNC& operator=(const SC_POSITION_SYNC& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_POSITION_SYNC& operator=(SC_POSITION_SYNC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_POSITION_SYNC& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_POSITION_SYNC* internal_default_instance() {
    return reinterpret_cast<const SC_POSITION_SYNC*>(
               &_SC_POSITION_SYNC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(SC_POSITION_SYNC& a, SC_POSITION_SYNC& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_POSITION_SYNC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_POSITION_SYNC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_POSITION_SYNC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_POSITION_SYNC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_POSITION_SYNC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_POSITION_SYNC& from) {
    SC_POSITION_SYNC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_POSITION_SYNC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_POSITION_SYNC";
  }
  protected:
  explicit SC_POSITION_SYNC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIDFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kCameraYawFieldNumber = 4,
  };
  // uint32 playerID = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // float posX = 2;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 3;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // float cameraYaw = 4;
  void clear_camerayaw();
  float camerayaw() const;
  void set_camerayaw(float value);
  private:
  float _internal_camerayaw() const;
  void _internal_set_camerayaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_POSITION_SYNC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    float posx_;
    float posy_;
    float camerayaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_MONSTER_AI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_MONSTER_AI) */ {
 public:
  inline CS_MONSTER_AI() : CS_MONSTER_AI(nullptr) {}
  ~CS_MONSTER_AI() override;
  explicit PROTOBUF_CONSTEXPR CS_MONSTER_AI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_MONSTER_AI(const CS_MONSTER_AI& from);
  CS_MONSTER_AI(CS_MONSTER_AI&& from) noexcept
    : CS_MONSTER_AI() {
    *this = ::std::move(from);
  }

  inline CS_MONSTER_AI& operator=(const CS_MONSTER_AI& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MONSTER_AI& operator=(CS_MONSTER_AI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MONSTER_AI& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MONSTER_AI* internal_default_instance() {
    return reinterpret_cast<const CS_MONSTER_AI*>(
               &_CS_MONSTER_AI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CS_MONSTER_AI& a, CS_MONSTER_AI& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MONSTER_AI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MONSTER_AI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MONSTER_AI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MONSTER_AI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_MONSTER_AI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_MONSTER_AI& from) {
    CS_MONSTER_AI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MONSTER_AI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_MONSTER_AI";
  }
  protected:
  explicit CS_MONSTER_AI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetMovementPosFieldNumber = 4,
    kBossPosFieldNumber = 5,
    kAiIDFieldNumber = 1,
    kCurrentHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kBossStateFieldNumber = 6,
    kCurSpeedFieldNumber = 7,
  };
  // .game.Position targetMovementPos = 4;
  bool has_targetmovementpos() const;
  private:
  bool _internal_has_targetmovementpos() const;
  public:
  void clear_targetmovementpos();
  const ::game::Position& targetmovementpos() const;
  PROTOBUF_NODISCARD ::game::Position* release_targetmovementpos();
  ::game::Position* mutable_targetmovementpos();
  void set_allocated_targetmovementpos(::game::Position* targetmovementpos);
  private:
  const ::game::Position& _internal_targetmovementpos() const;
  ::game::Position* _internal_mutable_targetmovementpos();
  public:
  void unsafe_arena_set_allocated_targetmovementpos(
      ::game::Position* targetmovementpos);
  ::game::Position* unsafe_arena_release_targetmovementpos();

  // .game.Position bossPos = 5;
  bool has_bosspos() const;
  private:
  bool _internal_has_bosspos() const;
  public:
  void clear_bosspos();
  const ::game::Position& bosspos() const;
  PROTOBUF_NODISCARD ::game::Position* release_bosspos();
  ::game::Position* mutable_bosspos();
  void set_allocated_bosspos(::game::Position* bosspos);
  private:
  const ::game::Position& _internal_bosspos() const;
  ::game::Position* _internal_mutable_bosspos();
  public:
  void unsafe_arena_set_allocated_bosspos(
      ::game::Position* bosspos);
  ::game::Position* unsafe_arena_release_bosspos();

  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // uint32 currentHp = 2;
  void clear_currenthp();
  uint32_t currenthp() const;
  void set_currenthp(uint32_t value);
  private:
  uint32_t _internal_currenthp() const;
  void _internal_set_currenthp(uint32_t value);
  public:

  // uint32 maxHp = 3;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 bossState = 6;
  void clear_bossstate();
  uint32_t bossstate() const;
  void set_bossstate(uint32_t value);
  private:
  uint32_t _internal_bossstate() const;
  void _internal_set_bossstate(uint32_t value);
  public:

  // float curSpeed = 7;
  void clear_curspeed();
  float curspeed() const;
  void set_curspeed(float value);
  private:
  float _internal_curspeed() const;
  void _internal_set_curspeed(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_MONSTER_AI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::Position* targetmovementpos_;
    ::game::Position* bosspos_;
    uint32_t aiid_;
    uint32_t currenthp_;
    uint32_t maxhp_;
    uint32_t bossstate_;
    float curspeed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_MONSTER_ROTATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_MONSTER_ROTATE) */ {
 public:
  inline CS_MONSTER_ROTATE() : CS_MONSTER_ROTATE(nullptr) {}
  ~CS_MONSTER_ROTATE() override;
  explicit PROTOBUF_CONSTEXPR CS_MONSTER_ROTATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_MONSTER_ROTATE(const CS_MONSTER_ROTATE& from);
  CS_MONSTER_ROTATE(CS_MONSTER_ROTATE&& from) noexcept
    : CS_MONSTER_ROTATE() {
    *this = ::std::move(from);
  }

  inline CS_MONSTER_ROTATE& operator=(const CS_MONSTER_ROTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MONSTER_ROTATE& operator=(CS_MONSTER_ROTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MONSTER_ROTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MONSTER_ROTATE* internal_default_instance() {
    return reinterpret_cast<const CS_MONSTER_ROTATE*>(
               &_CS_MONSTER_ROTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CS_MONSTER_ROTATE& a, CS_MONSTER_ROTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MONSTER_ROTATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MONSTER_ROTATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MONSTER_ROTATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MONSTER_ROTATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_MONSTER_ROTATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_MONSTER_ROTATE& from) {
    CS_MONSTER_ROTATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MONSTER_ROTATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_MONSTER_ROTATE";
  }
  protected:
  explicit CS_MONSTER_ROTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiIDFieldNumber = 1,
    kRotateYFieldNumber = 2,
  };
  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // float rotateY = 2;
  void clear_rotatey();
  float rotatey() const;
  void set_rotatey(float value);
  private:
  float _internal_rotatey() const;
  void _internal_set_rotatey(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_MONSTER_ROTATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t aiid_;
    float rotatey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_MONSTER_AI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_MONSTER_AI) */ {
 public:
  inline SC_MONSTER_AI() : SC_MONSTER_AI(nullptr) {}
  ~SC_MONSTER_AI() override;
  explicit PROTOBUF_CONSTEXPR SC_MONSTER_AI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_MONSTER_AI(const SC_MONSTER_AI& from);
  SC_MONSTER_AI(SC_MONSTER_AI&& from) noexcept
    : SC_MONSTER_AI() {
    *this = ::std::move(from);
  }

  inline SC_MONSTER_AI& operator=(const SC_MONSTER_AI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MONSTER_AI& operator=(SC_MONSTER_AI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MONSTER_AI& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MONSTER_AI* internal_default_instance() {
    return reinterpret_cast<const SC_MONSTER_AI*>(
               &_SC_MONSTER_AI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SC_MONSTER_AI& a, SC_MONSTER_AI& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MONSTER_AI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MONSTER_AI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MONSTER_AI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MONSTER_AI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_MONSTER_AI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_MONSTER_AI& from) {
    SC_MONSTER_AI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MONSTER_AI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_MONSTER_AI";
  }
  protected:
  explicit SC_MONSTER_AI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetMovementPosFieldNumber = 4,
    kBossPosFieldNumber = 5,
    kAiIDFieldNumber = 1,
    kCurrentHpFieldNumber = 2,
    kMaxHpFieldNumber = 3,
    kBossStateFieldNumber = 6,
    kCurSpeedFieldNumber = 7,
  };
  // .game.Position targetMovementPos = 4;
  bool has_targetmovementpos() const;
  private:
  bool _internal_has_targetmovementpos() const;
  public:
  void clear_targetmovementpos();
  const ::game::Position& targetmovementpos() const;
  PROTOBUF_NODISCARD ::game::Position* release_targetmovementpos();
  ::game::Position* mutable_targetmovementpos();
  void set_allocated_targetmovementpos(::game::Position* targetmovementpos);
  private:
  const ::game::Position& _internal_targetmovementpos() const;
  ::game::Position* _internal_mutable_targetmovementpos();
  public:
  void unsafe_arena_set_allocated_targetmovementpos(
      ::game::Position* targetmovementpos);
  ::game::Position* unsafe_arena_release_targetmovementpos();

  // .game.Position bossPos = 5;
  bool has_bosspos() const;
  private:
  bool _internal_has_bosspos() const;
  public:
  void clear_bosspos();
  const ::game::Position& bosspos() const;
  PROTOBUF_NODISCARD ::game::Position* release_bosspos();
  ::game::Position* mutable_bosspos();
  void set_allocated_bosspos(::game::Position* bosspos);
  private:
  const ::game::Position& _internal_bosspos() const;
  ::game::Position* _internal_mutable_bosspos();
  public:
  void unsafe_arena_set_allocated_bosspos(
      ::game::Position* bosspos);
  ::game::Position* unsafe_arena_release_bosspos();

  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // uint32 currentHp = 2;
  void clear_currenthp();
  uint32_t currenthp() const;
  void set_currenthp(uint32_t value);
  private:
  uint32_t _internal_currenthp() const;
  void _internal_set_currenthp(uint32_t value);
  public:

  // uint32 maxHp = 3;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 bossState = 6;
  void clear_bossstate();
  uint32_t bossstate() const;
  void set_bossstate(uint32_t value);
  private:
  uint32_t _internal_bossstate() const;
  void _internal_set_bossstate(uint32_t value);
  public:

  // float curSpeed = 7;
  void clear_curspeed();
  float curspeed() const;
  void set_curspeed(float value);
  private:
  float _internal_curspeed() const;
  void _internal_set_curspeed(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_MONSTER_AI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::Position* targetmovementpos_;
    ::game::Position* bosspos_;
    uint32_t aiid_;
    uint32_t currenthp_;
    uint32_t maxhp_;
    uint32_t bossstate_;
    float curspeed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_MONSTER_ROTATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_MONSTER_ROTATE) */ {
 public:
  inline SC_MONSTER_ROTATE() : SC_MONSTER_ROTATE(nullptr) {}
  ~SC_MONSTER_ROTATE() override;
  explicit PROTOBUF_CONSTEXPR SC_MONSTER_ROTATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_MONSTER_ROTATE(const SC_MONSTER_ROTATE& from);
  SC_MONSTER_ROTATE(SC_MONSTER_ROTATE&& from) noexcept
    : SC_MONSTER_ROTATE() {
    *this = ::std::move(from);
  }

  inline SC_MONSTER_ROTATE& operator=(const SC_MONSTER_ROTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_MONSTER_ROTATE& operator=(SC_MONSTER_ROTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_MONSTER_ROTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_MONSTER_ROTATE* internal_default_instance() {
    return reinterpret_cast<const SC_MONSTER_ROTATE*>(
               &_SC_MONSTER_ROTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SC_MONSTER_ROTATE& a, SC_MONSTER_ROTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_MONSTER_ROTATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_MONSTER_ROTATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_MONSTER_ROTATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_MONSTER_ROTATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_MONSTER_ROTATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_MONSTER_ROTATE& from) {
    SC_MONSTER_ROTATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_MONSTER_ROTATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_MONSTER_ROTATE";
  }
  protected:
  explicit SC_MONSTER_ROTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAiIDFieldNumber = 1,
    kRotateYFieldNumber = 2,
  };
  // uint32 aiID = 1;
  void clear_aiid();
  uint32_t aiid() const;
  void set_aiid(uint32_t value);
  private:
  uint32_t _internal_aiid() const;
  void _internal_set_aiid(uint32_t value);
  public:

  // float rotateY = 2;
  void clear_rotatey();
  float rotatey() const;
  void set_rotatey(float value);
  private:
  float _internal_rotatey() const;
  void _internal_set_rotatey(float value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_MONSTER_ROTATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t aiid_;
    float rotatey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_CHECK_TIMEOUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_CHECK_TIMEOUT) */ {
 public:
  inline CS_CHECK_TIMEOUT() : CS_CHECK_TIMEOUT(nullptr) {}
  ~CS_CHECK_TIMEOUT() override;
  explicit PROTOBUF_CONSTEXPR CS_CHECK_TIMEOUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_CHECK_TIMEOUT(const CS_CHECK_TIMEOUT& from);
  CS_CHECK_TIMEOUT(CS_CHECK_TIMEOUT&& from) noexcept
    : CS_CHECK_TIMEOUT() {
    *this = ::std::move(from);
  }

  inline CS_CHECK_TIMEOUT& operator=(const CS_CHECK_TIMEOUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CHECK_TIMEOUT& operator=(CS_CHECK_TIMEOUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_CHECK_TIMEOUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_CHECK_TIMEOUT* internal_default_instance() {
    return reinterpret_cast<const CS_CHECK_TIMEOUT*>(
               &_CS_CHECK_TIMEOUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CS_CHECK_TIMEOUT& a, CS_CHECK_TIMEOUT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CHECK_TIMEOUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_CHECK_TIMEOUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_CHECK_TIMEOUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_CHECK_TIMEOUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_CHECK_TIMEOUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_CHECK_TIMEOUT& from) {
    CS_CHECK_TIMEOUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CHECK_TIMEOUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_CHECK_TIMEOUT";
  }
  protected:
  explicit CS_CHECK_TIMEOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBCheckFieldNumber = 1,
  };
  // bool bCheck = 1;
  void clear_bcheck();
  bool bcheck() const;
  void set_bcheck(bool value);
  private:
  bool _internal_bcheck() const;
  void _internal_set_bcheck(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_CHECK_TIMEOUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool bcheck_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_TEST_PACKET1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_TEST_PACKET1) */ {
 public:
  inline CS_TEST_PACKET1() : CS_TEST_PACKET1(nullptr) {}
  ~CS_TEST_PACKET1() override;
  explicit PROTOBUF_CONSTEXPR CS_TEST_PACKET1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_TEST_PACKET1(const CS_TEST_PACKET1& from);
  CS_TEST_PACKET1(CS_TEST_PACKET1&& from) noexcept
    : CS_TEST_PACKET1() {
    *this = ::std::move(from);
  }

  inline CS_TEST_PACKET1& operator=(const CS_TEST_PACKET1& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEST_PACKET1& operator=(CS_TEST_PACKET1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_TEST_PACKET1& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_TEST_PACKET1* internal_default_instance() {
    return reinterpret_cast<const CS_TEST_PACKET1*>(
               &_CS_TEST_PACKET1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CS_TEST_PACKET1& a, CS_TEST_PACKET1& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEST_PACKET1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_TEST_PACKET1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_TEST_PACKET1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_TEST_PACKET1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_TEST_PACKET1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_TEST_PACKET1& from) {
    CS_TEST_PACKET1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEST_PACKET1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_TEST_PACKET1";
  }
  protected:
  explicit CS_TEST_PACKET1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempDataFieldNumber = 1,
  };
  // repeated uint32 tempData = 1;
  int tempdata_size() const;
  private:
  int _internal_tempdata_size() const;
  public:
  void clear_tempdata();
  private:
  uint32_t _internal_tempdata(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tempdata() const;
  void _internal_add_tempdata(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tempdata();
  public:
  uint32_t tempdata(int index) const;
  void set_tempdata(int index, uint32_t value);
  void add_tempdata(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tempdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tempdata();

  // @@protoc_insertion_point(class_scope:game.CS_TEST_PACKET1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tempdata_;
    mutable std::atomic<int> _tempdata_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_TEST_PACKET2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_TEST_PACKET2) */ {
 public:
  inline CS_TEST_PACKET2() : CS_TEST_PACKET2(nullptr) {}
  ~CS_TEST_PACKET2() override;
  explicit PROTOBUF_CONSTEXPR CS_TEST_PACKET2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_TEST_PACKET2(const CS_TEST_PACKET2& from);
  CS_TEST_PACKET2(CS_TEST_PACKET2&& from) noexcept
    : CS_TEST_PACKET2() {
    *this = ::std::move(from);
  }

  inline CS_TEST_PACKET2& operator=(const CS_TEST_PACKET2& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_TEST_PACKET2& operator=(CS_TEST_PACKET2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_TEST_PACKET2& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_TEST_PACKET2* internal_default_instance() {
    return reinterpret_cast<const CS_TEST_PACKET2*>(
               &_CS_TEST_PACKET2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CS_TEST_PACKET2& a, CS_TEST_PACKET2& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_TEST_PACKET2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_TEST_PACKET2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_TEST_PACKET2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_TEST_PACKET2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_TEST_PACKET2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_TEST_PACKET2& from) {
    CS_TEST_PACKET2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_TEST_PACKET2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_TEST_PACKET2";
  }
  protected:
  explicit CS_TEST_PACKET2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempDataFieldNumber = 1,
  };
  // repeated .game.PlayerInfo tempData = 1;
  int tempdata_size() const;
  private:
  int _internal_tempdata_size() const;
  public:
  void clear_tempdata();
  ::game::PlayerInfo* mutable_tempdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >*
      mutable_tempdata();
  private:
  const ::game::PlayerInfo& _internal_tempdata(int index) const;
  ::game::PlayerInfo* _internal_add_tempdata();
  public:
  const ::game::PlayerInfo& tempdata(int index) const;
  ::game::PlayerInfo* add_tempdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >&
      tempdata() const;

  // @@protoc_insertion_point(class_scope:game.CS_TEST_PACKET2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo > tempdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_TEST_PACKET final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_TEST_PACKET) */ {
 public:
  inline SC_TEST_PACKET() : SC_TEST_PACKET(nullptr) {}
  ~SC_TEST_PACKET() override;
  explicit PROTOBUF_CONSTEXPR SC_TEST_PACKET(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_TEST_PACKET(const SC_TEST_PACKET& from);
  SC_TEST_PACKET(SC_TEST_PACKET&& from) noexcept
    : SC_TEST_PACKET() {
    *this = ::std::move(from);
  }

  inline SC_TEST_PACKET& operator=(const SC_TEST_PACKET& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_TEST_PACKET& operator=(SC_TEST_PACKET&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_TEST_PACKET& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_TEST_PACKET* internal_default_instance() {
    return reinterpret_cast<const SC_TEST_PACKET*>(
               &_SC_TEST_PACKET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SC_TEST_PACKET& a, SC_TEST_PACKET& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_TEST_PACKET* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_TEST_PACKET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_TEST_PACKET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_TEST_PACKET>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_TEST_PACKET& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_TEST_PACKET& from) {
    SC_TEST_PACKET::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_TEST_PACKET* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_TEST_PACKET";
  }
  protected:
  explicit SC_TEST_PACKET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempDataFieldNumber = 1,
  };
  // repeated .game.PlayerInfo tempData = 1;
  int tempdata_size() const;
  private:
  int _internal_tempdata_size() const;
  public:
  void clear_tempdata();
  ::game::PlayerInfo* mutable_tempdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >*
      mutable_tempdata();
  private:
  const ::game::PlayerInfo& _internal_tempdata(int index) const;
  ::game::PlayerInfo* _internal_add_tempdata();
  public:
  const ::game::PlayerInfo& tempdata(int index) const;
  ::game::PlayerInfo* add_tempdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >&
      tempdata() const;

  // @@protoc_insertion_point(class_scope:game.SC_TEST_PACKET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo > tempdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerInfo

// string playerNickname = 1;
inline void PlayerInfo::clear_playernickname() {
  _impl_.playernickname_.ClearToEmpty();
}
inline const std::string& PlayerInfo::playernickname() const {
  // @@protoc_insertion_point(field_get:game.PlayerInfo.playerNickname)
  return _internal_playernickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_playernickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playernickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.PlayerInfo.playerNickname)
}
inline std::string* PlayerInfo::mutable_playernickname() {
  std::string* _s = _internal_mutable_playernickname();
  // @@protoc_insertion_point(field_mutable:game.PlayerInfo.playerNickname)
  return _s;
}
inline const std::string& PlayerInfo::_internal_playernickname() const {
  return _impl_.playernickname_.Get();
}
inline void PlayerInfo::_internal_set_playernickname(const std::string& value) {
  
  _impl_.playernickname_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_playernickname() {
  
  return _impl_.playernickname_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_playernickname() {
  // @@protoc_insertion_point(field_release:game.PlayerInfo.playerNickname)
  return _impl_.playernickname_.Release();
}
inline void PlayerInfo::set_allocated_playernickname(std::string* playernickname) {
  if (playernickname != nullptr) {
    
  } else {
    
  }
  _impl_.playernickname_.SetAllocated(playernickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playernickname_.IsDefault()) {
    _impl_.playernickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.PlayerInfo.playerNickname)
}

// uint32 playerJob = 2;
inline void PlayerInfo::clear_playerjob() {
  _impl_.playerjob_ = 0u;
}
inline uint32_t PlayerInfo::_internal_playerjob() const {
  return _impl_.playerjob_;
}
inline uint32_t PlayerInfo::playerjob() const {
  // @@protoc_insertion_point(field_get:game.PlayerInfo.playerJob)
  return _internal_playerjob();
}
inline void PlayerInfo::_internal_set_playerjob(uint32_t value) {
  
  _impl_.playerjob_ = value;
}
inline void PlayerInfo::set_playerjob(uint32_t value) {
  _internal_set_playerjob(value);
  // @@protoc_insertion_point(field_set:game.PlayerInfo.playerJob)
}

// uint32 level = 3;
inline void PlayerInfo::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t PlayerInfo::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:game.PlayerInfo.level)
  return _internal_level();
}
inline void PlayerInfo::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void PlayerInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:game.PlayerInfo.level)
}

// -------------------------------------------------------------------

// Position

// float posX = 1;
inline void Position::clear_posx() {
  _impl_.posx_ = 0;
}
inline float Position::_internal_posx() const {
  return _impl_.posx_;
}
inline float Position::posx() const {
  // @@protoc_insertion_point(field_get:game.Position.posX)
  return _internal_posx();
}
inline void Position::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void Position::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.Position.posX)
}

// float posY = 2;
inline void Position::clear_posy() {
  _impl_.posy_ = 0;
}
inline float Position::_internal_posy() const {
  return _impl_.posy_;
}
inline float Position::posy() const {
  // @@protoc_insertion_point(field_get:game.Position.posY)
  return _internal_posy();
}
inline void Position::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void Position::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.Position.posY)
}

// float posZ = 3;
inline void Position::clear_posz() {
  _impl_.posz_ = 0;
}
inline float Position::_internal_posz() const {
  return _impl_.posz_;
}
inline float Position::posz() const {
  // @@protoc_insertion_point(field_get:game.Position.posZ)
  return _internal_posz();
}
inline void Position::_internal_set_posz(float value) {
  
  _impl_.posz_ = value;
}
inline void Position::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.Position.posZ)
}

// -------------------------------------------------------------------

// CS_FIND_ID_REQUEST

// string email = 1;
inline void CS_FIND_ID_REQUEST::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& CS_FIND_ID_REQUEST::email() const {
  // @@protoc_insertion_point(field_get:game.CS_FIND_ID_REQUEST.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_FIND_ID_REQUEST::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_FIND_ID_REQUEST.email)
}
inline std::string* CS_FIND_ID_REQUEST::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:game.CS_FIND_ID_REQUEST.email)
  return _s;
}
inline const std::string& CS_FIND_ID_REQUEST::_internal_email() const {
  return _impl_.email_.Get();
}
inline void CS_FIND_ID_REQUEST::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_FIND_ID_REQUEST::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_FIND_ID_REQUEST::release_email() {
  // @@protoc_insertion_point(field_release:game.CS_FIND_ID_REQUEST.email)
  return _impl_.email_.Release();
}
inline void CS_FIND_ID_REQUEST::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_FIND_ID_REQUEST.email)
}

// -------------------------------------------------------------------

// CS_FIND_PW_REQUEST

// string id = 1;
inline void CS_FIND_PW_REQUEST::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CS_FIND_PW_REQUEST::id() const {
  // @@protoc_insertion_point(field_get:game.CS_FIND_PW_REQUEST.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_FIND_PW_REQUEST::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_FIND_PW_REQUEST.id)
}
inline std::string* CS_FIND_PW_REQUEST::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.CS_FIND_PW_REQUEST.id)
  return _s;
}
inline const std::string& CS_FIND_PW_REQUEST::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CS_FIND_PW_REQUEST::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_FIND_PW_REQUEST::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_FIND_PW_REQUEST::release_id() {
  // @@protoc_insertion_point(field_release:game.CS_FIND_PW_REQUEST.id)
  return _impl_.id_.Release();
}
inline void CS_FIND_PW_REQUEST::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_FIND_PW_REQUEST.id)
}

// string email = 2;
inline void CS_FIND_PW_REQUEST::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& CS_FIND_PW_REQUEST::email() const {
  // @@protoc_insertion_point(field_get:game.CS_FIND_PW_REQUEST.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_FIND_PW_REQUEST::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_FIND_PW_REQUEST.email)
}
inline std::string* CS_FIND_PW_REQUEST::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:game.CS_FIND_PW_REQUEST.email)
  return _s;
}
inline const std::string& CS_FIND_PW_REQUEST::_internal_email() const {
  return _impl_.email_.Get();
}
inline void CS_FIND_PW_REQUEST::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_FIND_PW_REQUEST::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_FIND_PW_REQUEST::release_email() {
  // @@protoc_insertion_point(field_release:game.CS_FIND_PW_REQUEST.email)
  return _impl_.email_.Release();
}
inline void CS_FIND_PW_REQUEST::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_FIND_PW_REQUEST.email)
}

// -------------------------------------------------------------------

// CS_LOGIN_REQUEST

// string id = 1;
inline void CS_LOGIN_REQUEST::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CS_LOGIN_REQUEST::id() const {
  // @@protoc_insertion_point(field_get:game.CS_LOGIN_REQUEST.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_LOGIN_REQUEST::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_LOGIN_REQUEST.id)
}
inline std::string* CS_LOGIN_REQUEST::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.CS_LOGIN_REQUEST.id)
  return _s;
}
inline const std::string& CS_LOGIN_REQUEST::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CS_LOGIN_REQUEST::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQUEST::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQUEST::release_id() {
  // @@protoc_insertion_point(field_release:game.CS_LOGIN_REQUEST.id)
  return _impl_.id_.Release();
}
inline void CS_LOGIN_REQUEST::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_LOGIN_REQUEST.id)
}

// string password = 2;
inline void CS_LOGIN_REQUEST::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_LOGIN_REQUEST::password() const {
  // @@protoc_insertion_point(field_get:game.CS_LOGIN_REQUEST.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_LOGIN_REQUEST::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_LOGIN_REQUEST.password)
}
inline std::string* CS_LOGIN_REQUEST::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:game.CS_LOGIN_REQUEST.password)
  return _s;
}
inline const std::string& CS_LOGIN_REQUEST::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CS_LOGIN_REQUEST::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQUEST::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_LOGIN_REQUEST::release_password() {
  // @@protoc_insertion_point(field_release:game.CS_LOGIN_REQUEST.password)
  return _impl_.password_.Release();
}
inline void CS_LOGIN_REQUEST::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_LOGIN_REQUEST.password)
}

// -------------------------------------------------------------------

// CS_REQUEST_CHARACTER_INFO

// string id = 1;
inline void CS_REQUEST_CHARACTER_INFO::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CS_REQUEST_CHARACTER_INFO::id() const {
  // @@protoc_insertion_point(field_get:game.CS_REQUEST_CHARACTER_INFO.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_REQUEST_CHARACTER_INFO::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_REQUEST_CHARACTER_INFO.id)
}
inline std::string* CS_REQUEST_CHARACTER_INFO::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.CS_REQUEST_CHARACTER_INFO.id)
  return _s;
}
inline const std::string& CS_REQUEST_CHARACTER_INFO::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CS_REQUEST_CHARACTER_INFO::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_REQUEST_CHARACTER_INFO::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_REQUEST_CHARACTER_INFO::release_id() {
  // @@protoc_insertion_point(field_release:game.CS_REQUEST_CHARACTER_INFO.id)
  return _impl_.id_.Release();
}
inline void CS_REQUEST_CHARACTER_INFO::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_REQUEST_CHARACTER_INFO.id)
}

// -------------------------------------------------------------------

// CS_REQUEST_ITEM_INFO

// string id = 1;
inline void CS_REQUEST_ITEM_INFO::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CS_REQUEST_ITEM_INFO::id() const {
  // @@protoc_insertion_point(field_get:game.CS_REQUEST_ITEM_INFO.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_REQUEST_ITEM_INFO::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_REQUEST_ITEM_INFO.id)
}
inline std::string* CS_REQUEST_ITEM_INFO::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.CS_REQUEST_ITEM_INFO.id)
  return _s;
}
inline const std::string& CS_REQUEST_ITEM_INFO::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CS_REQUEST_ITEM_INFO::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_REQUEST_ITEM_INFO::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_REQUEST_ITEM_INFO::release_id() {
  // @@protoc_insertion_point(field_release:game.CS_REQUEST_ITEM_INFO.id)
  return _impl_.id_.Release();
}
inline void CS_REQUEST_ITEM_INFO::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_REQUEST_ITEM_INFO.id)
}

// -------------------------------------------------------------------

// CS_SIGNUP_REQUEST

// string id = 1;
inline void CS_SIGNUP_REQUEST::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CS_SIGNUP_REQUEST::id() const {
  // @@protoc_insertion_point(field_get:game.CS_SIGNUP_REQUEST.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_SIGNUP_REQUEST::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_SIGNUP_REQUEST.id)
}
inline std::string* CS_SIGNUP_REQUEST::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.CS_SIGNUP_REQUEST.id)
  return _s;
}
inline const std::string& CS_SIGNUP_REQUEST::_internal_id() const {
  return _impl_.id_.Get();
}
inline void CS_SIGNUP_REQUEST::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_SIGNUP_REQUEST::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_SIGNUP_REQUEST::release_id() {
  // @@protoc_insertion_point(field_release:game.CS_SIGNUP_REQUEST.id)
  return _impl_.id_.Release();
}
inline void CS_SIGNUP_REQUEST::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_SIGNUP_REQUEST.id)
}

// string email = 2;
inline void CS_SIGNUP_REQUEST::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& CS_SIGNUP_REQUEST::email() const {
  // @@protoc_insertion_point(field_get:game.CS_SIGNUP_REQUEST.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_SIGNUP_REQUEST::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_SIGNUP_REQUEST.email)
}
inline std::string* CS_SIGNUP_REQUEST::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:game.CS_SIGNUP_REQUEST.email)
  return _s;
}
inline const std::string& CS_SIGNUP_REQUEST::_internal_email() const {
  return _impl_.email_.Get();
}
inline void CS_SIGNUP_REQUEST::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_SIGNUP_REQUEST::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_SIGNUP_REQUEST::release_email() {
  // @@protoc_insertion_point(field_release:game.CS_SIGNUP_REQUEST.email)
  return _impl_.email_.Release();
}
inline void CS_SIGNUP_REQUEST::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_SIGNUP_REQUEST.email)
}

// string password = 3;
inline void CS_SIGNUP_REQUEST::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CS_SIGNUP_REQUEST::password() const {
  // @@protoc_insertion_point(field_get:game.CS_SIGNUP_REQUEST.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_SIGNUP_REQUEST::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_SIGNUP_REQUEST.password)
}
inline std::string* CS_SIGNUP_REQUEST::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:game.CS_SIGNUP_REQUEST.password)
  return _s;
}
inline const std::string& CS_SIGNUP_REQUEST::_internal_password() const {
  return _impl_.password_.Get();
}
inline void CS_SIGNUP_REQUEST::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_SIGNUP_REQUEST::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_SIGNUP_REQUEST::release_password() {
  // @@protoc_insertion_point(field_release:game.CS_SIGNUP_REQUEST.password)
  return _impl_.password_.Release();
}
inline void CS_SIGNUP_REQUEST::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_SIGNUP_REQUEST.password)
}

// -------------------------------------------------------------------

// SC_FIND_ID_RESPONSE

// bool success = 1;
inline void SC_FIND_ID_RESPONSE::clear_success() {
  _impl_.success_ = false;
}
inline bool SC_FIND_ID_RESPONSE::_internal_success() const {
  return _impl_.success_;
}
inline bool SC_FIND_ID_RESPONSE::success() const {
  // @@protoc_insertion_point(field_get:game.SC_FIND_ID_RESPONSE.success)
  return _internal_success();
}
inline void SC_FIND_ID_RESPONSE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SC_FIND_ID_RESPONSE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:game.SC_FIND_ID_RESPONSE.success)
}

// string id = 2;
inline void SC_FIND_ID_RESPONSE::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SC_FIND_ID_RESPONSE::id() const {
  // @@protoc_insertion_point(field_get:game.SC_FIND_ID_RESPONSE.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_FIND_ID_RESPONSE::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.SC_FIND_ID_RESPONSE.id)
}
inline std::string* SC_FIND_ID_RESPONSE::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.SC_FIND_ID_RESPONSE.id)
  return _s;
}
inline const std::string& SC_FIND_ID_RESPONSE::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SC_FIND_ID_RESPONSE::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_FIND_ID_RESPONSE::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_FIND_ID_RESPONSE::release_id() {
  // @@protoc_insertion_point(field_release:game.SC_FIND_ID_RESPONSE.id)
  return _impl_.id_.Release();
}
inline void SC_FIND_ID_RESPONSE::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.SC_FIND_ID_RESPONSE.id)
}

// -------------------------------------------------------------------

// SC_FIND_PW_RESPONSE

// bool success = 1;
inline void SC_FIND_PW_RESPONSE::clear_success() {
  _impl_.success_ = false;
}
inline bool SC_FIND_PW_RESPONSE::_internal_success() const {
  return _impl_.success_;
}
inline bool SC_FIND_PW_RESPONSE::success() const {
  // @@protoc_insertion_point(field_get:game.SC_FIND_PW_RESPONSE.success)
  return _internal_success();
}
inline void SC_FIND_PW_RESPONSE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SC_FIND_PW_RESPONSE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:game.SC_FIND_PW_RESPONSE.success)
}

// string pw = 2;
inline void SC_FIND_PW_RESPONSE::clear_pw() {
  _impl_.pw_.ClearToEmpty();
}
inline const std::string& SC_FIND_PW_RESPONSE::pw() const {
  // @@protoc_insertion_point(field_get:game.SC_FIND_PW_RESPONSE.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_FIND_PW_RESPONSE::set_pw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.SC_FIND_PW_RESPONSE.pw)
}
inline std::string* SC_FIND_PW_RESPONSE::mutable_pw() {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:game.SC_FIND_PW_RESPONSE.pw)
  return _s;
}
inline const std::string& SC_FIND_PW_RESPONSE::_internal_pw() const {
  return _impl_.pw_.Get();
}
inline void SC_FIND_PW_RESPONSE::_internal_set_pw(const std::string& value) {
  
  _impl_.pw_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_FIND_PW_RESPONSE::_internal_mutable_pw() {
  
  return _impl_.pw_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_FIND_PW_RESPONSE::release_pw() {
  // @@protoc_insertion_point(field_release:game.SC_FIND_PW_RESPONSE.pw)
  return _impl_.pw_.Release();
}
inline void SC_FIND_PW_RESPONSE::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  _impl_.pw_.SetAllocated(pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pw_.IsDefault()) {
    _impl_.pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.SC_FIND_PW_RESPONSE.pw)
}

// -------------------------------------------------------------------

// SC_LOGIN_RESPONSE

// bool success = 1;
inline void SC_LOGIN_RESPONSE::clear_success() {
  _impl_.success_ = false;
}
inline bool SC_LOGIN_RESPONSE::_internal_success() const {
  return _impl_.success_;
}
inline bool SC_LOGIN_RESPONSE::success() const {
  // @@protoc_insertion_point(field_get:game.SC_LOGIN_RESPONSE.success)
  return _internal_success();
}
inline void SC_LOGIN_RESPONSE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SC_LOGIN_RESPONSE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:game.SC_LOGIN_RESPONSE.success)
}

// uint32 errorCode = 2;
inline void SC_LOGIN_RESPONSE::clear_errorcode() {
  _impl_.errorcode_ = 0u;
}
inline uint32_t SC_LOGIN_RESPONSE::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline uint32_t SC_LOGIN_RESPONSE::errorcode() const {
  // @@protoc_insertion_point(field_get:game.SC_LOGIN_RESPONSE.errorCode)
  return _internal_errorcode();
}
inline void SC_LOGIN_RESPONSE::_internal_set_errorcode(uint32_t value) {
  
  _impl_.errorcode_ = value;
}
inline void SC_LOGIN_RESPONSE::set_errorcode(uint32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:game.SC_LOGIN_RESPONSE.errorCode)
}

// -------------------------------------------------------------------

// SC_REQUEST_ITEM_INFO

// repeated uint32 itemInfo = 1;
inline int SC_REQUEST_ITEM_INFO::_internal_iteminfo_size() const {
  return _impl_.iteminfo_.size();
}
inline int SC_REQUEST_ITEM_INFO::iteminfo_size() const {
  return _internal_iteminfo_size();
}
inline void SC_REQUEST_ITEM_INFO::clear_iteminfo() {
  _impl_.iteminfo_.Clear();
}
inline uint32_t SC_REQUEST_ITEM_INFO::_internal_iteminfo(int index) const {
  return _impl_.iteminfo_.Get(index);
}
inline uint32_t SC_REQUEST_ITEM_INFO::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:game.SC_REQUEST_ITEM_INFO.itemInfo)
  return _internal_iteminfo(index);
}
inline void SC_REQUEST_ITEM_INFO::set_iteminfo(int index, uint32_t value) {
  _impl_.iteminfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:game.SC_REQUEST_ITEM_INFO.itemInfo)
}
inline void SC_REQUEST_ITEM_INFO::_internal_add_iteminfo(uint32_t value) {
  _impl_.iteminfo_.Add(value);
}
inline void SC_REQUEST_ITEM_INFO::add_iteminfo(uint32_t value) {
  _internal_add_iteminfo(value);
  // @@protoc_insertion_point(field_add:game.SC_REQUEST_ITEM_INFO.itemInfo)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SC_REQUEST_ITEM_INFO::_internal_iteminfo() const {
  return _impl_.iteminfo_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SC_REQUEST_ITEM_INFO::iteminfo() const {
  // @@protoc_insertion_point(field_list:game.SC_REQUEST_ITEM_INFO.itemInfo)
  return _internal_iteminfo();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SC_REQUEST_ITEM_INFO::_internal_mutable_iteminfo() {
  return &_impl_.iteminfo_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SC_REQUEST_ITEM_INFO::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:game.SC_REQUEST_ITEM_INFO.itemInfo)
  return _internal_mutable_iteminfo();
}

// -------------------------------------------------------------------

// SC_RESPONSE_CHARACTER_INFO

// .game.PlayerInfo playerInfo = 1;
inline bool SC_RESPONSE_CHARACTER_INFO::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool SC_RESPONSE_CHARACTER_INFO::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void SC_RESPONSE_CHARACTER_INFO::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::game::PlayerInfo& SC_RESPONSE_CHARACTER_INFO::_internal_playerinfo() const {
  const ::game::PlayerInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::PlayerInfo&>(
      ::game::_PlayerInfo_default_instance_);
}
inline const ::game::PlayerInfo& SC_RESPONSE_CHARACTER_INFO::playerinfo() const {
  // @@protoc_insertion_point(field_get:game.SC_RESPONSE_CHARACTER_INFO.playerInfo)
  return _internal_playerinfo();
}
inline void SC_RESPONSE_CHARACTER_INFO::unsafe_arena_set_allocated_playerinfo(
    ::game::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_RESPONSE_CHARACTER_INFO.playerInfo)
}
inline ::game::PlayerInfo* SC_RESPONSE_CHARACTER_INFO::release_playerinfo() {
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::PlayerInfo* SC_RESPONSE_CHARACTER_INFO::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:game.SC_RESPONSE_CHARACTER_INFO.playerInfo)
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::game::PlayerInfo* SC_RESPONSE_CHARACTER_INFO::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::PlayerInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::game::PlayerInfo* SC_RESPONSE_CHARACTER_INFO::mutable_playerinfo() {
  ::game::PlayerInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:game.SC_RESPONSE_CHARACTER_INFO.playerInfo)
  return _msg;
}
inline void SC_RESPONSE_CHARACTER_INFO::set_allocated_playerinfo(::game::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:game.SC_RESPONSE_CHARACTER_INFO.playerInfo)
}

// -------------------------------------------------------------------

// SC_SIGNUP_RESPONSE

// bool success = 1;
inline void SC_SIGNUP_RESPONSE::clear_success() {
  _impl_.success_ = false;
}
inline bool SC_SIGNUP_RESPONSE::_internal_success() const {
  return _impl_.success_;
}
inline bool SC_SIGNUP_RESPONSE::success() const {
  // @@protoc_insertion_point(field_get:game.SC_SIGNUP_RESPONSE.success)
  return _internal_success();
}
inline void SC_SIGNUP_RESPONSE::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void SC_SIGNUP_RESPONSE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:game.SC_SIGNUP_RESPONSE.success)
}

// uint32 errorCode = 2;
inline void SC_SIGNUP_RESPONSE::clear_errorcode() {
  _impl_.errorcode_ = 0u;
}
inline uint32_t SC_SIGNUP_RESPONSE::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline uint32_t SC_SIGNUP_RESPONSE::errorcode() const {
  // @@protoc_insertion_point(field_get:game.SC_SIGNUP_RESPONSE.errorCode)
  return _internal_errorcode();
}
inline void SC_SIGNUP_RESPONSE::_internal_set_errorcode(uint32_t value) {
  
  _impl_.errorcode_ = value;
}
inline void SC_SIGNUP_RESPONSE::set_errorcode(uint32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:game.SC_SIGNUP_RESPONSE.errorCode)
}

// -------------------------------------------------------------------

// CS_ACCEPT_PARTY

// uint32 FromPlayerID = 1;
inline void CS_ACCEPT_PARTY::clear_fromplayerid() {
  _impl_.fromplayerid_ = 0u;
}
inline uint32_t CS_ACCEPT_PARTY::_internal_fromplayerid() const {
  return _impl_.fromplayerid_;
}
inline uint32_t CS_ACCEPT_PARTY::fromplayerid() const {
  // @@protoc_insertion_point(field_get:game.CS_ACCEPT_PARTY.FromPlayerID)
  return _internal_fromplayerid();
}
inline void CS_ACCEPT_PARTY::_internal_set_fromplayerid(uint32_t value) {
  
  _impl_.fromplayerid_ = value;
}
inline void CS_ACCEPT_PARTY::set_fromplayerid(uint32_t value) {
  _internal_set_fromplayerid(value);
  // @@protoc_insertion_point(field_set:game.CS_ACCEPT_PARTY.FromPlayerID)
}

// uint32 ToPlayerID = 2;
inline void CS_ACCEPT_PARTY::clear_toplayerid() {
  _impl_.toplayerid_ = 0u;
}
inline uint32_t CS_ACCEPT_PARTY::_internal_toplayerid() const {
  return _impl_.toplayerid_;
}
inline uint32_t CS_ACCEPT_PARTY::toplayerid() const {
  // @@protoc_insertion_point(field_get:game.CS_ACCEPT_PARTY.ToPlayerID)
  return _internal_toplayerid();
}
inline void CS_ACCEPT_PARTY::_internal_set_toplayerid(uint32_t value) {
  
  _impl_.toplayerid_ = value;
}
inline void CS_ACCEPT_PARTY::set_toplayerid(uint32_t value) {
  _internal_set_toplayerid(value);
  // @@protoc_insertion_point(field_set:game.CS_ACCEPT_PARTY.ToPlayerID)
}

// -------------------------------------------------------------------

// CS_CANCEL_ENTERING_DUNGEON

// bool bCancel = 1;
inline void CS_CANCEL_ENTERING_DUNGEON::clear_bcancel() {
  _impl_.bcancel_ = false;
}
inline bool CS_CANCEL_ENTERING_DUNGEON::_internal_bcancel() const {
  return _impl_.bcancel_;
}
inline bool CS_CANCEL_ENTERING_DUNGEON::bcancel() const {
  // @@protoc_insertion_point(field_get:game.CS_CANCEL_ENTERING_DUNGEON.bCancel)
  return _internal_bcancel();
}
inline void CS_CANCEL_ENTERING_DUNGEON::_internal_set_bcancel(bool value) {
  
  _impl_.bcancel_ = value;
}
inline void CS_CANCEL_ENTERING_DUNGEON::set_bcancel(bool value) {
  _internal_set_bcancel(value);
  // @@protoc_insertion_point(field_set:game.CS_CANCEL_ENTERING_DUNGEON.bCancel)
}

// -------------------------------------------------------------------

// CS_CREATE_MONSTER

// uint32 monsterType = 1;
inline void CS_CREATE_MONSTER::clear_monstertype() {
  _impl_.monstertype_ = 0u;
}
inline uint32_t CS_CREATE_MONSTER::_internal_monstertype() const {
  return _impl_.monstertype_;
}
inline uint32_t CS_CREATE_MONSTER::monstertype() const {
  // @@protoc_insertion_point(field_get:game.CS_CREATE_MONSTER.monsterType)
  return _internal_monstertype();
}
inline void CS_CREATE_MONSTER::_internal_set_monstertype(uint32_t value) {
  
  _impl_.monstertype_ = value;
}
inline void CS_CREATE_MONSTER::set_monstertype(uint32_t value) {
  _internal_set_monstertype(value);
  // @@protoc_insertion_point(field_set:game.CS_CREATE_MONSTER.monsterType)
}

// .game.Position monsterPos = 2;
inline bool CS_CREATE_MONSTER::_internal_has_monsterpos() const {
  return this != internal_default_instance() && _impl_.monsterpos_ != nullptr;
}
inline bool CS_CREATE_MONSTER::has_monsterpos() const {
  return _internal_has_monsterpos();
}
inline void CS_CREATE_MONSTER::clear_monsterpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.monsterpos_ != nullptr) {
    delete _impl_.monsterpos_;
  }
  _impl_.monsterpos_ = nullptr;
}
inline const ::game::Position& CS_CREATE_MONSTER::_internal_monsterpos() const {
  const ::game::Position* p = _impl_.monsterpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& CS_CREATE_MONSTER::monsterpos() const {
  // @@protoc_insertion_point(field_get:game.CS_CREATE_MONSTER.monsterPos)
  return _internal_monsterpos();
}
inline void CS_CREATE_MONSTER::unsafe_arena_set_allocated_monsterpos(
    ::game::Position* monsterpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monsterpos_);
  }
  _impl_.monsterpos_ = monsterpos;
  if (monsterpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.CS_CREATE_MONSTER.monsterPos)
}
inline ::game::Position* CS_CREATE_MONSTER::release_monsterpos() {
  
  ::game::Position* temp = _impl_.monsterpos_;
  _impl_.monsterpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* CS_CREATE_MONSTER::unsafe_arena_release_monsterpos() {
  // @@protoc_insertion_point(field_release:game.CS_CREATE_MONSTER.monsterPos)
  
  ::game::Position* temp = _impl_.monsterpos_;
  _impl_.monsterpos_ = nullptr;
  return temp;
}
inline ::game::Position* CS_CREATE_MONSTER::_internal_mutable_monsterpos() {
  
  if (_impl_.monsterpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.monsterpos_ = p;
  }
  return _impl_.monsterpos_;
}
inline ::game::Position* CS_CREATE_MONSTER::mutable_monsterpos() {
  ::game::Position* _msg = _internal_mutable_monsterpos();
  // @@protoc_insertion_point(field_mutable:game.CS_CREATE_MONSTER.monsterPos)
  return _msg;
}
inline void CS_CREATE_MONSTER::set_allocated_monsterpos(::game::Position* monsterpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.monsterpos_;
  }
  if (monsterpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monsterpos);
    if (message_arena != submessage_arena) {
      monsterpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monsterpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monsterpos_ = monsterpos;
  // @@protoc_insertion_point(field_set_allocated:game.CS_CREATE_MONSTER.monsterPos)
}

// -------------------------------------------------------------------

// CS_MAKE_PARTY

// uint32 FromPlayerID = 1;
inline void CS_MAKE_PARTY::clear_fromplayerid() {
  _impl_.fromplayerid_ = 0u;
}
inline uint32_t CS_MAKE_PARTY::_internal_fromplayerid() const {
  return _impl_.fromplayerid_;
}
inline uint32_t CS_MAKE_PARTY::fromplayerid() const {
  // @@protoc_insertion_point(field_get:game.CS_MAKE_PARTY.FromPlayerID)
  return _internal_fromplayerid();
}
inline void CS_MAKE_PARTY::_internal_set_fromplayerid(uint32_t value) {
  
  _impl_.fromplayerid_ = value;
}
inline void CS_MAKE_PARTY::set_fromplayerid(uint32_t value) {
  _internal_set_fromplayerid(value);
  // @@protoc_insertion_point(field_set:game.CS_MAKE_PARTY.FromPlayerID)
}

// uint32 ToPlayerID = 2;
inline void CS_MAKE_PARTY::clear_toplayerid() {
  _impl_.toplayerid_ = 0u;
}
inline uint32_t CS_MAKE_PARTY::_internal_toplayerid() const {
  return _impl_.toplayerid_;
}
inline uint32_t CS_MAKE_PARTY::toplayerid() const {
  // @@protoc_insertion_point(field_get:game.CS_MAKE_PARTY.ToPlayerID)
  return _internal_toplayerid();
}
inline void CS_MAKE_PARTY::_internal_set_toplayerid(uint32_t value) {
  
  _impl_.toplayerid_ = value;
}
inline void CS_MAKE_PARTY::set_toplayerid(uint32_t value) {
  _internal_set_toplayerid(value);
  // @@protoc_insertion_point(field_set:game.CS_MAKE_PARTY.ToPlayerID)
}

// -------------------------------------------------------------------

// CS_REGISTER_REQUEST

// bool bRequest = 1;
inline void CS_REGISTER_REQUEST::clear_brequest() {
  _impl_.brequest_ = false;
}
inline bool CS_REGISTER_REQUEST::_internal_brequest() const {
  return _impl_.brequest_;
}
inline bool CS_REGISTER_REQUEST::brequest() const {
  // @@protoc_insertion_point(field_get:game.CS_REGISTER_REQUEST.bRequest)
  return _internal_brequest();
}
inline void CS_REGISTER_REQUEST::_internal_set_brequest(bool value) {
  
  _impl_.brequest_ = value;
}
inline void CS_REGISTER_REQUEST::set_brequest(bool value) {
  _internal_set_brequest(value);
  // @@protoc_insertion_point(field_set:game.CS_REGISTER_REQUEST.bRequest)
}

// -------------------------------------------------------------------

// CS_REQUEST_ENTER_DUNGEON

// bool bEnter = 1;
inline void CS_REQUEST_ENTER_DUNGEON::clear_benter() {
  _impl_.benter_ = false;
}
inline bool CS_REQUEST_ENTER_DUNGEON::_internal_benter() const {
  return _impl_.benter_;
}
inline bool CS_REQUEST_ENTER_DUNGEON::benter() const {
  // @@protoc_insertion_point(field_get:game.CS_REQUEST_ENTER_DUNGEON.bEnter)
  return _internal_benter();
}
inline void CS_REQUEST_ENTER_DUNGEON::_internal_set_benter(bool value) {
  
  _impl_.benter_ = value;
}
inline void CS_REQUEST_ENTER_DUNGEON::set_benter(bool value) {
  _internal_set_benter(value);
  // @@protoc_insertion_point(field_set:game.CS_REQUEST_ENTER_DUNGEON.bEnter)
}

// -------------------------------------------------------------------

// CS_RESPONSE_ENTER_DUNGEON_END

// bool bEnterEnd = 1;
inline void CS_RESPONSE_ENTER_DUNGEON_END::clear_benterend() {
  _impl_.benterend_ = false;
}
inline bool CS_RESPONSE_ENTER_DUNGEON_END::_internal_benterend() const {
  return _impl_.benterend_;
}
inline bool CS_RESPONSE_ENTER_DUNGEON_END::benterend() const {
  // @@protoc_insertion_point(field_get:game.CS_RESPONSE_ENTER_DUNGEON_END.bEnterEnd)
  return _internal_benterend();
}
inline void CS_RESPONSE_ENTER_DUNGEON_END::_internal_set_benterend(bool value) {
  
  _impl_.benterend_ = value;
}
inline void CS_RESPONSE_ENTER_DUNGEON_END::set_benterend(bool value) {
  _internal_set_benterend(value);
  // @@protoc_insertion_point(field_set:game.CS_RESPONSE_ENTER_DUNGEON_END.bEnterEnd)
}

// -------------------------------------------------------------------

// CS_SPAWN_CHARACTER

// uint32 playerID = 1;
inline void CS_SPAWN_CHARACTER::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t CS_SPAWN_CHARACTER::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t CS_SPAWN_CHARACTER::playerid() const {
  // @@protoc_insertion_point(field_get:game.CS_SPAWN_CHARACTER.playerID)
  return _internal_playerid();
}
inline void CS_SPAWN_CHARACTER::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void CS_SPAWN_CHARACTER::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.CS_SPAWN_CHARACTER.playerID)
}

// .game.Position playerPos = 2;
inline bool CS_SPAWN_CHARACTER::_internal_has_playerpos() const {
  return this != internal_default_instance() && _impl_.playerpos_ != nullptr;
}
inline bool CS_SPAWN_CHARACTER::has_playerpos() const {
  return _internal_has_playerpos();
}
inline void CS_SPAWN_CHARACTER::clear_playerpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerpos_ != nullptr) {
    delete _impl_.playerpos_;
  }
  _impl_.playerpos_ = nullptr;
}
inline const ::game::Position& CS_SPAWN_CHARACTER::_internal_playerpos() const {
  const ::game::Position* p = _impl_.playerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& CS_SPAWN_CHARACTER::playerpos() const {
  // @@protoc_insertion_point(field_get:game.CS_SPAWN_CHARACTER.playerPos)
  return _internal_playerpos();
}
inline void CS_SPAWN_CHARACTER::unsafe_arena_set_allocated_playerpos(
    ::game::Position* playerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerpos_);
  }
  _impl_.playerpos_ = playerpos;
  if (playerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.CS_SPAWN_CHARACTER.playerPos)
}
inline ::game::Position* CS_SPAWN_CHARACTER::release_playerpos() {
  
  ::game::Position* temp = _impl_.playerpos_;
  _impl_.playerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* CS_SPAWN_CHARACTER::unsafe_arena_release_playerpos() {
  // @@protoc_insertion_point(field_release:game.CS_SPAWN_CHARACTER.playerPos)
  
  ::game::Position* temp = _impl_.playerpos_;
  _impl_.playerpos_ = nullptr;
  return temp;
}
inline ::game::Position* CS_SPAWN_CHARACTER::_internal_mutable_playerpos() {
  
  if (_impl_.playerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.playerpos_ = p;
  }
  return _impl_.playerpos_;
}
inline ::game::Position* CS_SPAWN_CHARACTER::mutable_playerpos() {
  ::game::Position* _msg = _internal_mutable_playerpos();
  // @@protoc_insertion_point(field_mutable:game.CS_SPAWN_CHARACTER.playerPos)
  return _msg;
}
inline void CS_SPAWN_CHARACTER::set_allocated_playerpos(::game::Position* playerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerpos_;
  }
  if (playerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerpos);
    if (message_arena != submessage_arena) {
      playerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerpos_ = playerpos;
  // @@protoc_insertion_point(field_set_allocated:game.CS_SPAWN_CHARACTER.playerPos)
}

// float cameraYaw = 3;
inline void CS_SPAWN_CHARACTER::clear_camerayaw() {
  _impl_.camerayaw_ = 0;
}
inline float CS_SPAWN_CHARACTER::_internal_camerayaw() const {
  return _impl_.camerayaw_;
}
inline float CS_SPAWN_CHARACTER::camerayaw() const {
  // @@protoc_insertion_point(field_get:game.CS_SPAWN_CHARACTER.cameraYaw)
  return _internal_camerayaw();
}
inline void CS_SPAWN_CHARACTER::_internal_set_camerayaw(float value) {
  
  _impl_.camerayaw_ = value;
}
inline void CS_SPAWN_CHARACTER::set_camerayaw(float value) {
  _internal_set_camerayaw(value);
  // @@protoc_insertion_point(field_set:game.CS_SPAWN_CHARACTER.cameraYaw)
}

// .game.PlayerInfo playerInfo = 4;
inline bool CS_SPAWN_CHARACTER::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool CS_SPAWN_CHARACTER::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void CS_SPAWN_CHARACTER::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::game::PlayerInfo& CS_SPAWN_CHARACTER::_internal_playerinfo() const {
  const ::game::PlayerInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::PlayerInfo&>(
      ::game::_PlayerInfo_default_instance_);
}
inline const ::game::PlayerInfo& CS_SPAWN_CHARACTER::playerinfo() const {
  // @@protoc_insertion_point(field_get:game.CS_SPAWN_CHARACTER.playerInfo)
  return _internal_playerinfo();
}
inline void CS_SPAWN_CHARACTER::unsafe_arena_set_allocated_playerinfo(
    ::game::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.CS_SPAWN_CHARACTER.playerInfo)
}
inline ::game::PlayerInfo* CS_SPAWN_CHARACTER::release_playerinfo() {
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::PlayerInfo* CS_SPAWN_CHARACTER::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:game.CS_SPAWN_CHARACTER.playerInfo)
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::game::PlayerInfo* CS_SPAWN_CHARACTER::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::PlayerInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::game::PlayerInfo* CS_SPAWN_CHARACTER::mutable_playerinfo() {
  ::game::PlayerInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:game.CS_SPAWN_CHARACTER.playerInfo)
  return _msg;
}
inline void CS_SPAWN_CHARACTER::set_allocated_playerinfo(::game::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:game.CS_SPAWN_CHARACTER.playerInfo)
}

// -------------------------------------------------------------------

// CS_START_AI_CALCULATE

// bool bStart = 1;
inline void CS_START_AI_CALCULATE::clear_bstart() {
  _impl_.bstart_ = false;
}
inline bool CS_START_AI_CALCULATE::_internal_bstart() const {
  return _impl_.bstart_;
}
inline bool CS_START_AI_CALCULATE::bstart() const {
  // @@protoc_insertion_point(field_get:game.CS_START_AI_CALCULATE.bStart)
  return _internal_bstart();
}
inline void CS_START_AI_CALCULATE::_internal_set_bstart(bool value) {
  
  _impl_.bstart_ = value;
}
inline void CS_START_AI_CALCULATE::set_bstart(bool value) {
  _internal_set_bstart(value);
  // @@protoc_insertion_point(field_set:game.CS_START_AI_CALCULATE.bStart)
}

// -------------------------------------------------------------------

// CS_STOP_AI_CALCULATE

// bool bStop = 1;
inline void CS_STOP_AI_CALCULATE::clear_bstop() {
  _impl_.bstop_ = false;
}
inline bool CS_STOP_AI_CALCULATE::_internal_bstop() const {
  return _impl_.bstop_;
}
inline bool CS_STOP_AI_CALCULATE::bstop() const {
  // @@protoc_insertion_point(field_get:game.CS_STOP_AI_CALCULATE.bStop)
  return _internal_bstop();
}
inline void CS_STOP_AI_CALCULATE::_internal_set_bstop(bool value) {
  
  _impl_.bstop_ = value;
}
inline void CS_STOP_AI_CALCULATE::set_bstop(bool value) {
  _internal_set_bstop(value);
  // @@protoc_insertion_point(field_set:game.CS_STOP_AI_CALCULATE.bStop)
}

// -------------------------------------------------------------------

// SC_ACCEPT_PARTY

// uint32 FromPlayerID = 1;
inline void SC_ACCEPT_PARTY::clear_fromplayerid() {
  _impl_.fromplayerid_ = 0u;
}
inline uint32_t SC_ACCEPT_PARTY::_internal_fromplayerid() const {
  return _impl_.fromplayerid_;
}
inline uint32_t SC_ACCEPT_PARTY::fromplayerid() const {
  // @@protoc_insertion_point(field_get:game.SC_ACCEPT_PARTY.FromPlayerID)
  return _internal_fromplayerid();
}
inline void SC_ACCEPT_PARTY::_internal_set_fromplayerid(uint32_t value) {
  
  _impl_.fromplayerid_ = value;
}
inline void SC_ACCEPT_PARTY::set_fromplayerid(uint32_t value) {
  _internal_set_fromplayerid(value);
  // @@protoc_insertion_point(field_set:game.SC_ACCEPT_PARTY.FromPlayerID)
}

// uint32 ToPlayerID = 2;
inline void SC_ACCEPT_PARTY::clear_toplayerid() {
  _impl_.toplayerid_ = 0u;
}
inline uint32_t SC_ACCEPT_PARTY::_internal_toplayerid() const {
  return _impl_.toplayerid_;
}
inline uint32_t SC_ACCEPT_PARTY::toplayerid() const {
  // @@protoc_insertion_point(field_get:game.SC_ACCEPT_PARTY.ToPlayerID)
  return _internal_toplayerid();
}
inline void SC_ACCEPT_PARTY::_internal_set_toplayerid(uint32_t value) {
  
  _impl_.toplayerid_ = value;
}
inline void SC_ACCEPT_PARTY::set_toplayerid(uint32_t value) {
  _internal_set_toplayerid(value);
  // @@protoc_insertion_point(field_set:game.SC_ACCEPT_PARTY.ToPlayerID)
}

// .game.PlayerInfo playerInfo = 3;
inline bool SC_ACCEPT_PARTY::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool SC_ACCEPT_PARTY::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void SC_ACCEPT_PARTY::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::game::PlayerInfo& SC_ACCEPT_PARTY::_internal_playerinfo() const {
  const ::game::PlayerInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::PlayerInfo&>(
      ::game::_PlayerInfo_default_instance_);
}
inline const ::game::PlayerInfo& SC_ACCEPT_PARTY::playerinfo() const {
  // @@protoc_insertion_point(field_get:game.SC_ACCEPT_PARTY.playerInfo)
  return _internal_playerinfo();
}
inline void SC_ACCEPT_PARTY::unsafe_arena_set_allocated_playerinfo(
    ::game::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_ACCEPT_PARTY.playerInfo)
}
inline ::game::PlayerInfo* SC_ACCEPT_PARTY::release_playerinfo() {
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::PlayerInfo* SC_ACCEPT_PARTY::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:game.SC_ACCEPT_PARTY.playerInfo)
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::game::PlayerInfo* SC_ACCEPT_PARTY::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::PlayerInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::game::PlayerInfo* SC_ACCEPT_PARTY::mutable_playerinfo() {
  ::game::PlayerInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:game.SC_ACCEPT_PARTY.playerInfo)
  return _msg;
}
inline void SC_ACCEPT_PARTY::set_allocated_playerinfo(::game::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:game.SC_ACCEPT_PARTY.playerInfo)
}

// -------------------------------------------------------------------

// SC_CANCEL_ENTERING_DUNGEON

// bool bCancel = 1;
inline void SC_CANCEL_ENTERING_DUNGEON::clear_bcancel() {
  _impl_.bcancel_ = false;
}
inline bool SC_CANCEL_ENTERING_DUNGEON::_internal_bcancel() const {
  return _impl_.bcancel_;
}
inline bool SC_CANCEL_ENTERING_DUNGEON::bcancel() const {
  // @@protoc_insertion_point(field_get:game.SC_CANCEL_ENTERING_DUNGEON.bCancel)
  return _internal_bcancel();
}
inline void SC_CANCEL_ENTERING_DUNGEON::_internal_set_bcancel(bool value) {
  
  _impl_.bcancel_ = value;
}
inline void SC_CANCEL_ENTERING_DUNGEON::set_bcancel(bool value) {
  _internal_set_bcancel(value);
  // @@protoc_insertion_point(field_set:game.SC_CANCEL_ENTERING_DUNGEON.bCancel)
}

// uint32 playerID = 2;
inline void SC_CANCEL_ENTERING_DUNGEON::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_CANCEL_ENTERING_DUNGEON::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_CANCEL_ENTERING_DUNGEON::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_CANCEL_ENTERING_DUNGEON.playerID)
  return _internal_playerid();
}
inline void SC_CANCEL_ENTERING_DUNGEON::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_CANCEL_ENTERING_DUNGEON::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_CANCEL_ENTERING_DUNGEON.playerID)
}

// -------------------------------------------------------------------

// SC_CREATE_MONSTER

// uint32 aiID = 1;
inline void SC_CREATE_MONSTER::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t SC_CREATE_MONSTER::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t SC_CREATE_MONSTER::aiid() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MONSTER.aiID)
  return _internal_aiid();
}
inline void SC_CREATE_MONSTER::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void SC_CREATE_MONSTER::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_MONSTER.aiID)
}

// uint32 monsterType = 2;
inline void SC_CREATE_MONSTER::clear_monstertype() {
  _impl_.monstertype_ = 0u;
}
inline uint32_t SC_CREATE_MONSTER::_internal_monstertype() const {
  return _impl_.monstertype_;
}
inline uint32_t SC_CREATE_MONSTER::monstertype() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MONSTER.monsterType)
  return _internal_monstertype();
}
inline void SC_CREATE_MONSTER::_internal_set_monstertype(uint32_t value) {
  
  _impl_.monstertype_ = value;
}
inline void SC_CREATE_MONSTER::set_monstertype(uint32_t value) {
  _internal_set_monstertype(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_MONSTER.monsterType)
}

// .game.Position monsterPos = 3;
inline bool SC_CREATE_MONSTER::_internal_has_monsterpos() const {
  return this != internal_default_instance() && _impl_.monsterpos_ != nullptr;
}
inline bool SC_CREATE_MONSTER::has_monsterpos() const {
  return _internal_has_monsterpos();
}
inline void SC_CREATE_MONSTER::clear_monsterpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.monsterpos_ != nullptr) {
    delete _impl_.monsterpos_;
  }
  _impl_.monsterpos_ = nullptr;
}
inline const ::game::Position& SC_CREATE_MONSTER::_internal_monsterpos() const {
  const ::game::Position* p = _impl_.monsterpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& SC_CREATE_MONSTER::monsterpos() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MONSTER.monsterPos)
  return _internal_monsterpos();
}
inline void SC_CREATE_MONSTER::unsafe_arena_set_allocated_monsterpos(
    ::game::Position* monsterpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monsterpos_);
  }
  _impl_.monsterpos_ = monsterpos;
  if (monsterpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_CREATE_MONSTER.monsterPos)
}
inline ::game::Position* SC_CREATE_MONSTER::release_monsterpos() {
  
  ::game::Position* temp = _impl_.monsterpos_;
  _impl_.monsterpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* SC_CREATE_MONSTER::unsafe_arena_release_monsterpos() {
  // @@protoc_insertion_point(field_release:game.SC_CREATE_MONSTER.monsterPos)
  
  ::game::Position* temp = _impl_.monsterpos_;
  _impl_.monsterpos_ = nullptr;
  return temp;
}
inline ::game::Position* SC_CREATE_MONSTER::_internal_mutable_monsterpos() {
  
  if (_impl_.monsterpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.monsterpos_ = p;
  }
  return _impl_.monsterpos_;
}
inline ::game::Position* SC_CREATE_MONSTER::mutable_monsterpos() {
  ::game::Position* _msg = _internal_mutable_monsterpos();
  // @@protoc_insertion_point(field_mutable:game.SC_CREATE_MONSTER.monsterPos)
  return _msg;
}
inline void SC_CREATE_MONSTER::set_allocated_monsterpos(::game::Position* monsterpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.monsterpos_;
  }
  if (monsterpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monsterpos);
    if (message_arena != submessage_arena) {
      monsterpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monsterpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monsterpos_ = monsterpos;
  // @@protoc_insertion_point(field_set_allocated:game.SC_CREATE_MONSTER.monsterPos)
}

// -------------------------------------------------------------------

// SC_MAKE_PARTY

// uint32 FromPlayerID = 1;
inline void SC_MAKE_PARTY::clear_fromplayerid() {
  _impl_.fromplayerid_ = 0u;
}
inline uint32_t SC_MAKE_PARTY::_internal_fromplayerid() const {
  return _impl_.fromplayerid_;
}
inline uint32_t SC_MAKE_PARTY::fromplayerid() const {
  // @@protoc_insertion_point(field_get:game.SC_MAKE_PARTY.FromPlayerID)
  return _internal_fromplayerid();
}
inline void SC_MAKE_PARTY::_internal_set_fromplayerid(uint32_t value) {
  
  _impl_.fromplayerid_ = value;
}
inline void SC_MAKE_PARTY::set_fromplayerid(uint32_t value) {
  _internal_set_fromplayerid(value);
  // @@protoc_insertion_point(field_set:game.SC_MAKE_PARTY.FromPlayerID)
}

// uint32 ToPlayerID = 2;
inline void SC_MAKE_PARTY::clear_toplayerid() {
  _impl_.toplayerid_ = 0u;
}
inline uint32_t SC_MAKE_PARTY::_internal_toplayerid() const {
  return _impl_.toplayerid_;
}
inline uint32_t SC_MAKE_PARTY::toplayerid() const {
  // @@protoc_insertion_point(field_get:game.SC_MAKE_PARTY.ToPlayerID)
  return _internal_toplayerid();
}
inline void SC_MAKE_PARTY::_internal_set_toplayerid(uint32_t value) {
  
  _impl_.toplayerid_ = value;
}
inline void SC_MAKE_PARTY::set_toplayerid(uint32_t value) {
  _internal_set_toplayerid(value);
  // @@protoc_insertion_point(field_set:game.SC_MAKE_PARTY.ToPlayerID)
}

// -------------------------------------------------------------------

// SC_PREPARE_ENTERING_DUNGEON

// bool bEnter = 1;
inline void SC_PREPARE_ENTERING_DUNGEON::clear_benter() {
  _impl_.benter_ = false;
}
inline bool SC_PREPARE_ENTERING_DUNGEON::_internal_benter() const {
  return _impl_.benter_;
}
inline bool SC_PREPARE_ENTERING_DUNGEON::benter() const {
  // @@protoc_insertion_point(field_get:game.SC_PREPARE_ENTERING_DUNGEON.bEnter)
  return _internal_benter();
}
inline void SC_PREPARE_ENTERING_DUNGEON::_internal_set_benter(bool value) {
  
  _impl_.benter_ = value;
}
inline void SC_PREPARE_ENTERING_DUNGEON::set_benter(bool value) {
  _internal_set_benter(value);
  // @@protoc_insertion_point(field_set:game.SC_PREPARE_ENTERING_DUNGEON.bEnter)
}

// -------------------------------------------------------------------

// SC_REMOVE_CHARACTER

// uint32 playerID = 1;
inline void SC_REMOVE_CHARACTER::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_REMOVE_CHARACTER::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_REMOVE_CHARACTER::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_REMOVE_CHARACTER.playerID)
  return _internal_playerid();
}
inline void SC_REMOVE_CHARACTER::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_REMOVE_CHARACTER::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_REMOVE_CHARACTER.playerID)
}

// -------------------------------------------------------------------

// SC_RESPONSE_ENTER_DUNGEON_BEGIN

// bool bEnterBegin = 1;
inline void SC_RESPONSE_ENTER_DUNGEON_BEGIN::clear_benterbegin() {
  _impl_.benterbegin_ = false;
}
inline bool SC_RESPONSE_ENTER_DUNGEON_BEGIN::_internal_benterbegin() const {
  return _impl_.benterbegin_;
}
inline bool SC_RESPONSE_ENTER_DUNGEON_BEGIN::benterbegin() const {
  // @@protoc_insertion_point(field_get:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN.bEnterBegin)
  return _internal_benterbegin();
}
inline void SC_RESPONSE_ENTER_DUNGEON_BEGIN::_internal_set_benterbegin(bool value) {
  
  _impl_.benterbegin_ = value;
}
inline void SC_RESPONSE_ENTER_DUNGEON_BEGIN::set_benterbegin(bool value) {
  _internal_set_benterbegin(value);
  // @@protoc_insertion_point(field_set:game.SC_RESPONSE_ENTER_DUNGEON_BEGIN.bEnterBegin)
}

// -------------------------------------------------------------------

// SC_RESPONSE_ENTER_DUNGEON_END

// bool bEnterEnd = 1;
inline void SC_RESPONSE_ENTER_DUNGEON_END::clear_benterend() {
  _impl_.benterend_ = false;
}
inline bool SC_RESPONSE_ENTER_DUNGEON_END::_internal_benterend() const {
  return _impl_.benterend_;
}
inline bool SC_RESPONSE_ENTER_DUNGEON_END::benterend() const {
  // @@protoc_insertion_point(field_get:game.SC_RESPONSE_ENTER_DUNGEON_END.bEnterEnd)
  return _internal_benterend();
}
inline void SC_RESPONSE_ENTER_DUNGEON_END::_internal_set_benterend(bool value) {
  
  _impl_.benterend_ = value;
}
inline void SC_RESPONSE_ENTER_DUNGEON_END::set_benterend(bool value) {
  _internal_set_benterend(value);
  // @@protoc_insertion_point(field_set:game.SC_RESPONSE_ENTER_DUNGEON_END.bEnterEnd)
}

// -------------------------------------------------------------------

// SC_SPAWN_CHARACTER

// uint32 playerID = 1;
inline void SC_SPAWN_CHARACTER::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_SPAWN_CHARACTER::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_SPAWN_CHARACTER::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_SPAWN_CHARACTER.playerID)
  return _internal_playerid();
}
inline void SC_SPAWN_CHARACTER::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_SPAWN_CHARACTER::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_SPAWN_CHARACTER.playerID)
}

// .game.Position playerPos = 2;
inline bool SC_SPAWN_CHARACTER::_internal_has_playerpos() const {
  return this != internal_default_instance() && _impl_.playerpos_ != nullptr;
}
inline bool SC_SPAWN_CHARACTER::has_playerpos() const {
  return _internal_has_playerpos();
}
inline void SC_SPAWN_CHARACTER::clear_playerpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerpos_ != nullptr) {
    delete _impl_.playerpos_;
  }
  _impl_.playerpos_ = nullptr;
}
inline const ::game::Position& SC_SPAWN_CHARACTER::_internal_playerpos() const {
  const ::game::Position* p = _impl_.playerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& SC_SPAWN_CHARACTER::playerpos() const {
  // @@protoc_insertion_point(field_get:game.SC_SPAWN_CHARACTER.playerPos)
  return _internal_playerpos();
}
inline void SC_SPAWN_CHARACTER::unsafe_arena_set_allocated_playerpos(
    ::game::Position* playerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerpos_);
  }
  _impl_.playerpos_ = playerpos;
  if (playerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_SPAWN_CHARACTER.playerPos)
}
inline ::game::Position* SC_SPAWN_CHARACTER::release_playerpos() {
  
  ::game::Position* temp = _impl_.playerpos_;
  _impl_.playerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* SC_SPAWN_CHARACTER::unsafe_arena_release_playerpos() {
  // @@protoc_insertion_point(field_release:game.SC_SPAWN_CHARACTER.playerPos)
  
  ::game::Position* temp = _impl_.playerpos_;
  _impl_.playerpos_ = nullptr;
  return temp;
}
inline ::game::Position* SC_SPAWN_CHARACTER::_internal_mutable_playerpos() {
  
  if (_impl_.playerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.playerpos_ = p;
  }
  return _impl_.playerpos_;
}
inline ::game::Position* SC_SPAWN_CHARACTER::mutable_playerpos() {
  ::game::Position* _msg = _internal_mutable_playerpos();
  // @@protoc_insertion_point(field_mutable:game.SC_SPAWN_CHARACTER.playerPos)
  return _msg;
}
inline void SC_SPAWN_CHARACTER::set_allocated_playerpos(::game::Position* playerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerpos_;
  }
  if (playerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerpos);
    if (message_arena != submessage_arena) {
      playerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerpos_ = playerpos;
  // @@protoc_insertion_point(field_set_allocated:game.SC_SPAWN_CHARACTER.playerPos)
}

// float cameraYaw = 3;
inline void SC_SPAWN_CHARACTER::clear_camerayaw() {
  _impl_.camerayaw_ = 0;
}
inline float SC_SPAWN_CHARACTER::_internal_camerayaw() const {
  return _impl_.camerayaw_;
}
inline float SC_SPAWN_CHARACTER::camerayaw() const {
  // @@protoc_insertion_point(field_get:game.SC_SPAWN_CHARACTER.cameraYaw)
  return _internal_camerayaw();
}
inline void SC_SPAWN_CHARACTER::_internal_set_camerayaw(float value) {
  
  _impl_.camerayaw_ = value;
}
inline void SC_SPAWN_CHARACTER::set_camerayaw(float value) {
  _internal_set_camerayaw(value);
  // @@protoc_insertion_point(field_set:game.SC_SPAWN_CHARACTER.cameraYaw)
}

// .game.PlayerInfo playerInfo = 4;
inline bool SC_SPAWN_CHARACTER::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool SC_SPAWN_CHARACTER::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void SC_SPAWN_CHARACTER::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::game::PlayerInfo& SC_SPAWN_CHARACTER::_internal_playerinfo() const {
  const ::game::PlayerInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::PlayerInfo&>(
      ::game::_PlayerInfo_default_instance_);
}
inline const ::game::PlayerInfo& SC_SPAWN_CHARACTER::playerinfo() const {
  // @@protoc_insertion_point(field_get:game.SC_SPAWN_CHARACTER.playerInfo)
  return _internal_playerinfo();
}
inline void SC_SPAWN_CHARACTER::unsafe_arena_set_allocated_playerinfo(
    ::game::PlayerInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_SPAWN_CHARACTER.playerInfo)
}
inline ::game::PlayerInfo* SC_SPAWN_CHARACTER::release_playerinfo() {
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::PlayerInfo* SC_SPAWN_CHARACTER::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:game.SC_SPAWN_CHARACTER.playerInfo)
  
  ::game::PlayerInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::game::PlayerInfo* SC_SPAWN_CHARACTER::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::PlayerInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::game::PlayerInfo* SC_SPAWN_CHARACTER::mutable_playerinfo() {
  ::game::PlayerInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:game.SC_SPAWN_CHARACTER.playerInfo)
  return _msg;
}
inline void SC_SPAWN_CHARACTER::set_allocated_playerinfo(::game::PlayerInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:game.SC_SPAWN_CHARACTER.playerInfo)
}

// -------------------------------------------------------------------

// SC_START_AI_CALCULATE

// bool bStart = 1;
inline void SC_START_AI_CALCULATE::clear_bstart() {
  _impl_.bstart_ = false;
}
inline bool SC_START_AI_CALCULATE::_internal_bstart() const {
  return _impl_.bstart_;
}
inline bool SC_START_AI_CALCULATE::bstart() const {
  // @@protoc_insertion_point(field_get:game.SC_START_AI_CALCULATE.bStart)
  return _internal_bstart();
}
inline void SC_START_AI_CALCULATE::_internal_set_bstart(bool value) {
  
  _impl_.bstart_ = value;
}
inline void SC_START_AI_CALCULATE::set_bstart(bool value) {
  _internal_set_bstart(value);
  // @@protoc_insertion_point(field_set:game.SC_START_AI_CALCULATE.bStart)
}

// -------------------------------------------------------------------

// SC_STOP_AI_CALCULATE

// bool bStop = 1;
inline void SC_STOP_AI_CALCULATE::clear_bstop() {
  _impl_.bstop_ = false;
}
inline bool SC_STOP_AI_CALCULATE::_internal_bstop() const {
  return _impl_.bstop_;
}
inline bool SC_STOP_AI_CALCULATE::bstop() const {
  // @@protoc_insertion_point(field_get:game.SC_STOP_AI_CALCULATE.bStop)
  return _internal_bstop();
}
inline void SC_STOP_AI_CALCULATE::_internal_set_bstop(bool value) {
  
  _impl_.bstop_ = value;
}
inline void SC_STOP_AI_CALCULATE::set_bstop(bool value) {
  _internal_set_bstop(value);
  // @@protoc_insertion_point(field_set:game.SC_STOP_AI_CALCULATE.bStop)
}

// -------------------------------------------------------------------

// CS_CHAT

// uint32 targetID = 1;
inline void CS_CHAT::clear_targetid() {
  _impl_.targetid_ = 0u;
}
inline uint32_t CS_CHAT::_internal_targetid() const {
  return _impl_.targetid_;
}
inline uint32_t CS_CHAT::targetid() const {
  // @@protoc_insertion_point(field_get:game.CS_CHAT.targetID)
  return _internal_targetid();
}
inline void CS_CHAT::_internal_set_targetid(uint32_t value) {
  
  _impl_.targetid_ = value;
}
inline void CS_CHAT::set_targetid(uint32_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:game.CS_CHAT.targetID)
}

// string message = 2;
inline void CS_CHAT::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CS_CHAT::message() const {
  // @@protoc_insertion_point(field_get:game.CS_CHAT.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_CHAT::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_CHAT.message)
}
inline std::string* CS_CHAT::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:game.CS_CHAT.message)
  return _s;
}
inline const std::string& CS_CHAT::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CS_CHAT::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_CHAT::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_CHAT::release_message() {
  // @@protoc_insertion_point(field_release:game.CS_CHAT.message)
  return _impl_.message_.Release();
}
inline void CS_CHAT::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_CHAT.message)
}

// uint32 channel = 3;
inline void CS_CHAT::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t CS_CHAT::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t CS_CHAT::channel() const {
  // @@protoc_insertion_point(field_get:game.CS_CHAT.channel)
  return _internal_channel();
}
inline void CS_CHAT::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void CS_CHAT::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:game.CS_CHAT.channel)
}

// -------------------------------------------------------------------

// SC_CHAT

// uint32 playerID = 1;
inline void SC_CHAT::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_CHAT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_CHAT.playerID)
  return _internal_playerid();
}
inline void SC_CHAT::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_CHAT::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_CHAT.playerID)
}

// string message = 2;
inline void SC_CHAT::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SC_CHAT::message() const {
  // @@protoc_insertion_point(field_get:game.SC_CHAT.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_CHAT::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.SC_CHAT.message)
}
inline std::string* SC_CHAT::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:game.SC_CHAT.message)
  return _s;
}
inline const std::string& SC_CHAT::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SC_CHAT::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_CHAT::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_CHAT::release_message() {
  // @@protoc_insertion_point(field_release:game.SC_CHAT.message)
  return _impl_.message_.Release();
}
inline void SC_CHAT::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.SC_CHAT.message)
}

// uint32 channel = 3;
inline void SC_CHAT::clear_channel() {
  _impl_.channel_ = 0u;
}
inline uint32_t SC_CHAT::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t SC_CHAT::channel() const {
  // @@protoc_insertion_point(field_get:game.SC_CHAT.channel)
  return _internal_channel();
}
inline void SC_CHAT::_internal_set_channel(uint32_t value) {
  
  _impl_.channel_ = value;
}
inline void SC_CHAT::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:game.SC_CHAT.channel)
}

// -------------------------------------------------------------------

// CS_KEYINFO

// uint32 keyInfo = 1;
inline void CS_KEYINFO::clear_keyinfo() {
  _impl_.keyinfo_ = 0u;
}
inline uint32_t CS_KEYINFO::_internal_keyinfo() const {
  return _impl_.keyinfo_;
}
inline uint32_t CS_KEYINFO::keyinfo() const {
  // @@protoc_insertion_point(field_get:game.CS_KEYINFO.keyInfo)
  return _internal_keyinfo();
}
inline void CS_KEYINFO::_internal_set_keyinfo(uint32_t value) {
  
  _impl_.keyinfo_ = value;
}
inline void CS_KEYINFO::set_keyinfo(uint32_t value) {
  _internal_set_keyinfo(value);
  // @@protoc_insertion_point(field_set:game.CS_KEYINFO.keyInfo)
}

// float cameraYaw = 2;
inline void CS_KEYINFO::clear_camerayaw() {
  _impl_.camerayaw_ = 0;
}
inline float CS_KEYINFO::_internal_camerayaw() const {
  return _impl_.camerayaw_;
}
inline float CS_KEYINFO::camerayaw() const {
  // @@protoc_insertion_point(field_get:game.CS_KEYINFO.cameraYaw)
  return _internal_camerayaw();
}
inline void CS_KEYINFO::_internal_set_camerayaw(float value) {
  
  _impl_.camerayaw_ = value;
}
inline void CS_KEYINFO::set_camerayaw(float value) {
  _internal_set_camerayaw(value);
  // @@protoc_insertion_point(field_set:game.CS_KEYINFO.cameraYaw)
}

// -------------------------------------------------------------------

// CS_MONSTER_ATTACK

// uint32 playerID = 1;
inline void CS_MONSTER_ATTACK::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t CS_MONSTER_ATTACK::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t CS_MONSTER_ATTACK::playerid() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_ATTACK.playerID)
  return _internal_playerid();
}
inline void CS_MONSTER_ATTACK::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void CS_MONSTER_ATTACK::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_ATTACK.playerID)
}

// uint32 damage = 2;
inline void CS_MONSTER_ATTACK::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t CS_MONSTER_ATTACK::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t CS_MONSTER_ATTACK::damage() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_ATTACK.damage)
  return _internal_damage();
}
inline void CS_MONSTER_ATTACK::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void CS_MONSTER_ATTACK::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_ATTACK.damage)
}

// -------------------------------------------------------------------

// CS_MONSTER_DIE

// uint32 aiID = 1;
inline void CS_MONSTER_DIE::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t CS_MONSTER_DIE::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t CS_MONSTER_DIE::aiid() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_DIE.aiID)
  return _internal_aiid();
}
inline void CS_MONSTER_DIE::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void CS_MONSTER_DIE::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_DIE.aiID)
}

// -------------------------------------------------------------------

// CS_PLAYER_ATTACK

// uint32 aiID = 1;
inline void CS_PLAYER_ATTACK::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t CS_PLAYER_ATTACK::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t CS_PLAYER_ATTACK::aiid() const {
  // @@protoc_insertion_point(field_get:game.CS_PLAYER_ATTACK.aiID)
  return _internal_aiid();
}
inline void CS_PLAYER_ATTACK::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void CS_PLAYER_ATTACK::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.CS_PLAYER_ATTACK.aiID)
}

// uint32 attackDamage = 2;
inline void CS_PLAYER_ATTACK::clear_attackdamage() {
  _impl_.attackdamage_ = 0u;
}
inline uint32_t CS_PLAYER_ATTACK::_internal_attackdamage() const {
  return _impl_.attackdamage_;
}
inline uint32_t CS_PLAYER_ATTACK::attackdamage() const {
  // @@protoc_insertion_point(field_get:game.CS_PLAYER_ATTACK.attackDamage)
  return _internal_attackdamage();
}
inline void CS_PLAYER_ATTACK::_internal_set_attackdamage(uint32_t value) {
  
  _impl_.attackdamage_ = value;
}
inline void CS_PLAYER_ATTACK::set_attackdamage(uint32_t value) {
  _internal_set_attackdamage(value);
  // @@protoc_insertion_point(field_set:game.CS_PLAYER_ATTACK.attackDamage)
}

// -------------------------------------------------------------------

// CS_PLAYER_DIE

// uint32 playerID = 1;
inline void CS_PLAYER_DIE::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t CS_PLAYER_DIE::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t CS_PLAYER_DIE::playerid() const {
  // @@protoc_insertion_point(field_get:game.CS_PLAYER_DIE.playerID)
  return _internal_playerid();
}
inline void CS_PLAYER_DIE::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void CS_PLAYER_DIE::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.CS_PLAYER_DIE.playerID)
}

// -------------------------------------------------------------------

// CS_POSITION_SYNC

// float posX = 1;
inline void CS_POSITION_SYNC::clear_posx() {
  _impl_.posx_ = 0;
}
inline float CS_POSITION_SYNC::_internal_posx() const {
  return _impl_.posx_;
}
inline float CS_POSITION_SYNC::posx() const {
  // @@protoc_insertion_point(field_get:game.CS_POSITION_SYNC.posX)
  return _internal_posx();
}
inline void CS_POSITION_SYNC::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void CS_POSITION_SYNC::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.CS_POSITION_SYNC.posX)
}

// float posY = 2;
inline void CS_POSITION_SYNC::clear_posy() {
  _impl_.posy_ = 0;
}
inline float CS_POSITION_SYNC::_internal_posy() const {
  return _impl_.posy_;
}
inline float CS_POSITION_SYNC::posy() const {
  // @@protoc_insertion_point(field_get:game.CS_POSITION_SYNC.posY)
  return _internal_posy();
}
inline void CS_POSITION_SYNC::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void CS_POSITION_SYNC::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.CS_POSITION_SYNC.posY)
}

// float cameraYaw = 3;
inline void CS_POSITION_SYNC::clear_camerayaw() {
  _impl_.camerayaw_ = 0;
}
inline float CS_POSITION_SYNC::_internal_camerayaw() const {
  return _impl_.camerayaw_;
}
inline float CS_POSITION_SYNC::camerayaw() const {
  // @@protoc_insertion_point(field_get:game.CS_POSITION_SYNC.cameraYaw)
  return _internal_camerayaw();
}
inline void CS_POSITION_SYNC::_internal_set_camerayaw(float value) {
  
  _impl_.camerayaw_ = value;
}
inline void CS_POSITION_SYNC::set_camerayaw(float value) {
  _internal_set_camerayaw(value);
  // @@protoc_insertion_point(field_set:game.CS_POSITION_SYNC.cameraYaw)
}

// -------------------------------------------------------------------

// SC_KEYINFO

// uint32 playerID = 1;
inline void SC_KEYINFO::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_KEYINFO::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_KEYINFO::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_KEYINFO.playerID)
  return _internal_playerid();
}
inline void SC_KEYINFO::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_KEYINFO::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_KEYINFO.playerID)
}

// uint32 keyInfo = 2;
inline void SC_KEYINFO::clear_keyinfo() {
  _impl_.keyinfo_ = 0u;
}
inline uint32_t SC_KEYINFO::_internal_keyinfo() const {
  return _impl_.keyinfo_;
}
inline uint32_t SC_KEYINFO::keyinfo() const {
  // @@protoc_insertion_point(field_get:game.SC_KEYINFO.keyInfo)
  return _internal_keyinfo();
}
inline void SC_KEYINFO::_internal_set_keyinfo(uint32_t value) {
  
  _impl_.keyinfo_ = value;
}
inline void SC_KEYINFO::set_keyinfo(uint32_t value) {
  _internal_set_keyinfo(value);
  // @@protoc_insertion_point(field_set:game.SC_KEYINFO.keyInfo)
}

// float cameraYaw = 3;
inline void SC_KEYINFO::clear_camerayaw() {
  _impl_.camerayaw_ = 0;
}
inline float SC_KEYINFO::_internal_camerayaw() const {
  return _impl_.camerayaw_;
}
inline float SC_KEYINFO::camerayaw() const {
  // @@protoc_insertion_point(field_get:game.SC_KEYINFO.cameraYaw)
  return _internal_camerayaw();
}
inline void SC_KEYINFO::_internal_set_camerayaw(float value) {
  
  _impl_.camerayaw_ = value;
}
inline void SC_KEYINFO::set_camerayaw(float value) {
  _internal_set_camerayaw(value);
  // @@protoc_insertion_point(field_set:game.SC_KEYINFO.cameraYaw)
}

// -------------------------------------------------------------------

// SC_MONSTER_DAMAGED

// uint32 aiID = 1;
inline void SC_MONSTER_DAMAGED::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t SC_MONSTER_DAMAGED::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t SC_MONSTER_DAMAGED::aiid() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_DAMAGED.aiID)
  return _internal_aiid();
}
inline void SC_MONSTER_DAMAGED::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void SC_MONSTER_DAMAGED::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_DAMAGED.aiID)
}

// uint32 damage = 2;
inline void SC_MONSTER_DAMAGED::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t SC_MONSTER_DAMAGED::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t SC_MONSTER_DAMAGED::damage() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_DAMAGED.damage)
  return _internal_damage();
}
inline void SC_MONSTER_DAMAGED::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void SC_MONSTER_DAMAGED::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_DAMAGED.damage)
}

// -------------------------------------------------------------------

// SC_MONSTER_DIE

// uint32 aiID = 1;
inline void SC_MONSTER_DIE::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t SC_MONSTER_DIE::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t SC_MONSTER_DIE::aiid() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_DIE.aiID)
  return _internal_aiid();
}
inline void SC_MONSTER_DIE::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void SC_MONSTER_DIE::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_DIE.aiID)
}

// -------------------------------------------------------------------

// SC_PLAYER_DAMAGED

// uint32 playerID = 1;
inline void SC_PLAYER_DAMAGED::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_PLAYER_DAMAGED::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_PLAYER_DAMAGED::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_PLAYER_DAMAGED.playerID)
  return _internal_playerid();
}
inline void SC_PLAYER_DAMAGED::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_PLAYER_DAMAGED::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_PLAYER_DAMAGED.playerID)
}

// uint32 damage = 2;
inline void SC_PLAYER_DAMAGED::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t SC_PLAYER_DAMAGED::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t SC_PLAYER_DAMAGED::damage() const {
  // @@protoc_insertion_point(field_get:game.SC_PLAYER_DAMAGED.damage)
  return _internal_damage();
}
inline void SC_PLAYER_DAMAGED::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void SC_PLAYER_DAMAGED::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:game.SC_PLAYER_DAMAGED.damage)
}

// -------------------------------------------------------------------

// SC_PLAYER_DIE

// uint32 playerID = 1;
inline void SC_PLAYER_DIE::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_PLAYER_DIE::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_PLAYER_DIE::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_PLAYER_DIE.playerID)
  return _internal_playerid();
}
inline void SC_PLAYER_DIE::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_PLAYER_DIE::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_PLAYER_DIE.playerID)
}

// -------------------------------------------------------------------

// SC_POSITION_SYNC

// uint32 playerID = 1;
inline void SC_POSITION_SYNC::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_POSITION_SYNC::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_POSITION_SYNC::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_POSITION_SYNC.playerID)
  return _internal_playerid();
}
inline void SC_POSITION_SYNC::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_POSITION_SYNC::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_POSITION_SYNC.playerID)
}

// float posX = 2;
inline void SC_POSITION_SYNC::clear_posx() {
  _impl_.posx_ = 0;
}
inline float SC_POSITION_SYNC::_internal_posx() const {
  return _impl_.posx_;
}
inline float SC_POSITION_SYNC::posx() const {
  // @@protoc_insertion_point(field_get:game.SC_POSITION_SYNC.posX)
  return _internal_posx();
}
inline void SC_POSITION_SYNC::_internal_set_posx(float value) {
  
  _impl_.posx_ = value;
}
inline void SC_POSITION_SYNC::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.SC_POSITION_SYNC.posX)
}

// float posY = 3;
inline void SC_POSITION_SYNC::clear_posy() {
  _impl_.posy_ = 0;
}
inline float SC_POSITION_SYNC::_internal_posy() const {
  return _impl_.posy_;
}
inline float SC_POSITION_SYNC::posy() const {
  // @@protoc_insertion_point(field_get:game.SC_POSITION_SYNC.posY)
  return _internal_posy();
}
inline void SC_POSITION_SYNC::_internal_set_posy(float value) {
  
  _impl_.posy_ = value;
}
inline void SC_POSITION_SYNC::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.SC_POSITION_SYNC.posY)
}

// float cameraYaw = 4;
inline void SC_POSITION_SYNC::clear_camerayaw() {
  _impl_.camerayaw_ = 0;
}
inline float SC_POSITION_SYNC::_internal_camerayaw() const {
  return _impl_.camerayaw_;
}
inline float SC_POSITION_SYNC::camerayaw() const {
  // @@protoc_insertion_point(field_get:game.SC_POSITION_SYNC.cameraYaw)
  return _internal_camerayaw();
}
inline void SC_POSITION_SYNC::_internal_set_camerayaw(float value) {
  
  _impl_.camerayaw_ = value;
}
inline void SC_POSITION_SYNC::set_camerayaw(float value) {
  _internal_set_camerayaw(value);
  // @@protoc_insertion_point(field_set:game.SC_POSITION_SYNC.cameraYaw)
}

// -------------------------------------------------------------------

// CS_MONSTER_AI

// uint32 aiID = 1;
inline void CS_MONSTER_AI::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t CS_MONSTER_AI::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t CS_MONSTER_AI::aiid() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.aiID)
  return _internal_aiid();
}
inline void CS_MONSTER_AI::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void CS_MONSTER_AI::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_AI.aiID)
}

// uint32 currentHp = 2;
inline void CS_MONSTER_AI::clear_currenthp() {
  _impl_.currenthp_ = 0u;
}
inline uint32_t CS_MONSTER_AI::_internal_currenthp() const {
  return _impl_.currenthp_;
}
inline uint32_t CS_MONSTER_AI::currenthp() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.currentHp)
  return _internal_currenthp();
}
inline void CS_MONSTER_AI::_internal_set_currenthp(uint32_t value) {
  
  _impl_.currenthp_ = value;
}
inline void CS_MONSTER_AI::set_currenthp(uint32_t value) {
  _internal_set_currenthp(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_AI.currentHp)
}

// uint32 maxHp = 3;
inline void CS_MONSTER_AI::clear_maxhp() {
  _impl_.maxhp_ = 0u;
}
inline uint32_t CS_MONSTER_AI::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint32_t CS_MONSTER_AI::maxhp() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.maxHp)
  return _internal_maxhp();
}
inline void CS_MONSTER_AI::_internal_set_maxhp(uint32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void CS_MONSTER_AI::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_AI.maxHp)
}

// .game.Position targetMovementPos = 4;
inline bool CS_MONSTER_AI::_internal_has_targetmovementpos() const {
  return this != internal_default_instance() && _impl_.targetmovementpos_ != nullptr;
}
inline bool CS_MONSTER_AI::has_targetmovementpos() const {
  return _internal_has_targetmovementpos();
}
inline void CS_MONSTER_AI::clear_targetmovementpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetmovementpos_ != nullptr) {
    delete _impl_.targetmovementpos_;
  }
  _impl_.targetmovementpos_ = nullptr;
}
inline const ::game::Position& CS_MONSTER_AI::_internal_targetmovementpos() const {
  const ::game::Position* p = _impl_.targetmovementpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& CS_MONSTER_AI::targetmovementpos() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.targetMovementPos)
  return _internal_targetmovementpos();
}
inline void CS_MONSTER_AI::unsafe_arena_set_allocated_targetmovementpos(
    ::game::Position* targetmovementpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetmovementpos_);
  }
  _impl_.targetmovementpos_ = targetmovementpos;
  if (targetmovementpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.CS_MONSTER_AI.targetMovementPos)
}
inline ::game::Position* CS_MONSTER_AI::release_targetmovementpos() {
  
  ::game::Position* temp = _impl_.targetmovementpos_;
  _impl_.targetmovementpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* CS_MONSTER_AI::unsafe_arena_release_targetmovementpos() {
  // @@protoc_insertion_point(field_release:game.CS_MONSTER_AI.targetMovementPos)
  
  ::game::Position* temp = _impl_.targetmovementpos_;
  _impl_.targetmovementpos_ = nullptr;
  return temp;
}
inline ::game::Position* CS_MONSTER_AI::_internal_mutable_targetmovementpos() {
  
  if (_impl_.targetmovementpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.targetmovementpos_ = p;
  }
  return _impl_.targetmovementpos_;
}
inline ::game::Position* CS_MONSTER_AI::mutable_targetmovementpos() {
  ::game::Position* _msg = _internal_mutable_targetmovementpos();
  // @@protoc_insertion_point(field_mutable:game.CS_MONSTER_AI.targetMovementPos)
  return _msg;
}
inline void CS_MONSTER_AI::set_allocated_targetmovementpos(::game::Position* targetmovementpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetmovementpos_;
  }
  if (targetmovementpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetmovementpos);
    if (message_arena != submessage_arena) {
      targetmovementpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetmovementpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.targetmovementpos_ = targetmovementpos;
  // @@protoc_insertion_point(field_set_allocated:game.CS_MONSTER_AI.targetMovementPos)
}

// .game.Position bossPos = 5;
inline bool CS_MONSTER_AI::_internal_has_bosspos() const {
  return this != internal_default_instance() && _impl_.bosspos_ != nullptr;
}
inline bool CS_MONSTER_AI::has_bosspos() const {
  return _internal_has_bosspos();
}
inline void CS_MONSTER_AI::clear_bosspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.bosspos_ != nullptr) {
    delete _impl_.bosspos_;
  }
  _impl_.bosspos_ = nullptr;
}
inline const ::game::Position& CS_MONSTER_AI::_internal_bosspos() const {
  const ::game::Position* p = _impl_.bosspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& CS_MONSTER_AI::bosspos() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.bossPos)
  return _internal_bosspos();
}
inline void CS_MONSTER_AI::unsafe_arena_set_allocated_bosspos(
    ::game::Position* bosspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bosspos_);
  }
  _impl_.bosspos_ = bosspos;
  if (bosspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.CS_MONSTER_AI.bossPos)
}
inline ::game::Position* CS_MONSTER_AI::release_bosspos() {
  
  ::game::Position* temp = _impl_.bosspos_;
  _impl_.bosspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* CS_MONSTER_AI::unsafe_arena_release_bosspos() {
  // @@protoc_insertion_point(field_release:game.CS_MONSTER_AI.bossPos)
  
  ::game::Position* temp = _impl_.bosspos_;
  _impl_.bosspos_ = nullptr;
  return temp;
}
inline ::game::Position* CS_MONSTER_AI::_internal_mutable_bosspos() {
  
  if (_impl_.bosspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.bosspos_ = p;
  }
  return _impl_.bosspos_;
}
inline ::game::Position* CS_MONSTER_AI::mutable_bosspos() {
  ::game::Position* _msg = _internal_mutable_bosspos();
  // @@protoc_insertion_point(field_mutable:game.CS_MONSTER_AI.bossPos)
  return _msg;
}
inline void CS_MONSTER_AI::set_allocated_bosspos(::game::Position* bosspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bosspos_;
  }
  if (bosspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bosspos);
    if (message_arena != submessage_arena) {
      bosspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bosspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bosspos_ = bosspos;
  // @@protoc_insertion_point(field_set_allocated:game.CS_MONSTER_AI.bossPos)
}

// uint32 bossState = 6;
inline void CS_MONSTER_AI::clear_bossstate() {
  _impl_.bossstate_ = 0u;
}
inline uint32_t CS_MONSTER_AI::_internal_bossstate() const {
  return _impl_.bossstate_;
}
inline uint32_t CS_MONSTER_AI::bossstate() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.bossState)
  return _internal_bossstate();
}
inline void CS_MONSTER_AI::_internal_set_bossstate(uint32_t value) {
  
  _impl_.bossstate_ = value;
}
inline void CS_MONSTER_AI::set_bossstate(uint32_t value) {
  _internal_set_bossstate(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_AI.bossState)
}

// float curSpeed = 7;
inline void CS_MONSTER_AI::clear_curspeed() {
  _impl_.curspeed_ = 0;
}
inline float CS_MONSTER_AI::_internal_curspeed() const {
  return _impl_.curspeed_;
}
inline float CS_MONSTER_AI::curspeed() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_AI.curSpeed)
  return _internal_curspeed();
}
inline void CS_MONSTER_AI::_internal_set_curspeed(float value) {
  
  _impl_.curspeed_ = value;
}
inline void CS_MONSTER_AI::set_curspeed(float value) {
  _internal_set_curspeed(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_AI.curSpeed)
}

// -------------------------------------------------------------------

// CS_MONSTER_ROTATE

// uint32 aiID = 1;
inline void CS_MONSTER_ROTATE::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t CS_MONSTER_ROTATE::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t CS_MONSTER_ROTATE::aiid() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_ROTATE.aiID)
  return _internal_aiid();
}
inline void CS_MONSTER_ROTATE::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void CS_MONSTER_ROTATE::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_ROTATE.aiID)
}

// float rotateY = 2;
inline void CS_MONSTER_ROTATE::clear_rotatey() {
  _impl_.rotatey_ = 0;
}
inline float CS_MONSTER_ROTATE::_internal_rotatey() const {
  return _impl_.rotatey_;
}
inline float CS_MONSTER_ROTATE::rotatey() const {
  // @@protoc_insertion_point(field_get:game.CS_MONSTER_ROTATE.rotateY)
  return _internal_rotatey();
}
inline void CS_MONSTER_ROTATE::_internal_set_rotatey(float value) {
  
  _impl_.rotatey_ = value;
}
inline void CS_MONSTER_ROTATE::set_rotatey(float value) {
  _internal_set_rotatey(value);
  // @@protoc_insertion_point(field_set:game.CS_MONSTER_ROTATE.rotateY)
}

// -------------------------------------------------------------------

// SC_MONSTER_AI

// uint32 aiID = 1;
inline void SC_MONSTER_AI::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t SC_MONSTER_AI::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t SC_MONSTER_AI::aiid() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.aiID)
  return _internal_aiid();
}
inline void SC_MONSTER_AI::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void SC_MONSTER_AI::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_AI.aiID)
}

// uint32 currentHp = 2;
inline void SC_MONSTER_AI::clear_currenthp() {
  _impl_.currenthp_ = 0u;
}
inline uint32_t SC_MONSTER_AI::_internal_currenthp() const {
  return _impl_.currenthp_;
}
inline uint32_t SC_MONSTER_AI::currenthp() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.currentHp)
  return _internal_currenthp();
}
inline void SC_MONSTER_AI::_internal_set_currenthp(uint32_t value) {
  
  _impl_.currenthp_ = value;
}
inline void SC_MONSTER_AI::set_currenthp(uint32_t value) {
  _internal_set_currenthp(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_AI.currentHp)
}

// uint32 maxHp = 3;
inline void SC_MONSTER_AI::clear_maxhp() {
  _impl_.maxhp_ = 0u;
}
inline uint32_t SC_MONSTER_AI::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint32_t SC_MONSTER_AI::maxhp() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.maxHp)
  return _internal_maxhp();
}
inline void SC_MONSTER_AI::_internal_set_maxhp(uint32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void SC_MONSTER_AI::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_AI.maxHp)
}

// .game.Position targetMovementPos = 4;
inline bool SC_MONSTER_AI::_internal_has_targetmovementpos() const {
  return this != internal_default_instance() && _impl_.targetmovementpos_ != nullptr;
}
inline bool SC_MONSTER_AI::has_targetmovementpos() const {
  return _internal_has_targetmovementpos();
}
inline void SC_MONSTER_AI::clear_targetmovementpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.targetmovementpos_ != nullptr) {
    delete _impl_.targetmovementpos_;
  }
  _impl_.targetmovementpos_ = nullptr;
}
inline const ::game::Position& SC_MONSTER_AI::_internal_targetmovementpos() const {
  const ::game::Position* p = _impl_.targetmovementpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& SC_MONSTER_AI::targetmovementpos() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.targetMovementPos)
  return _internal_targetmovementpos();
}
inline void SC_MONSTER_AI::unsafe_arena_set_allocated_targetmovementpos(
    ::game::Position* targetmovementpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetmovementpos_);
  }
  _impl_.targetmovementpos_ = targetmovementpos;
  if (targetmovementpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_MONSTER_AI.targetMovementPos)
}
inline ::game::Position* SC_MONSTER_AI::release_targetmovementpos() {
  
  ::game::Position* temp = _impl_.targetmovementpos_;
  _impl_.targetmovementpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* SC_MONSTER_AI::unsafe_arena_release_targetmovementpos() {
  // @@protoc_insertion_point(field_release:game.SC_MONSTER_AI.targetMovementPos)
  
  ::game::Position* temp = _impl_.targetmovementpos_;
  _impl_.targetmovementpos_ = nullptr;
  return temp;
}
inline ::game::Position* SC_MONSTER_AI::_internal_mutable_targetmovementpos() {
  
  if (_impl_.targetmovementpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.targetmovementpos_ = p;
  }
  return _impl_.targetmovementpos_;
}
inline ::game::Position* SC_MONSTER_AI::mutable_targetmovementpos() {
  ::game::Position* _msg = _internal_mutable_targetmovementpos();
  // @@protoc_insertion_point(field_mutable:game.SC_MONSTER_AI.targetMovementPos)
  return _msg;
}
inline void SC_MONSTER_AI::set_allocated_targetmovementpos(::game::Position* targetmovementpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.targetmovementpos_;
  }
  if (targetmovementpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(targetmovementpos);
    if (message_arena != submessage_arena) {
      targetmovementpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetmovementpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.targetmovementpos_ = targetmovementpos;
  // @@protoc_insertion_point(field_set_allocated:game.SC_MONSTER_AI.targetMovementPos)
}

// .game.Position bossPos = 5;
inline bool SC_MONSTER_AI::_internal_has_bosspos() const {
  return this != internal_default_instance() && _impl_.bosspos_ != nullptr;
}
inline bool SC_MONSTER_AI::has_bosspos() const {
  return _internal_has_bosspos();
}
inline void SC_MONSTER_AI::clear_bosspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.bosspos_ != nullptr) {
    delete _impl_.bosspos_;
  }
  _impl_.bosspos_ = nullptr;
}
inline const ::game::Position& SC_MONSTER_AI::_internal_bosspos() const {
  const ::game::Position* p = _impl_.bosspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::Position&>(
      ::game::_Position_default_instance_);
}
inline const ::game::Position& SC_MONSTER_AI::bosspos() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.bossPos)
  return _internal_bosspos();
}
inline void SC_MONSTER_AI::unsafe_arena_set_allocated_bosspos(
    ::game::Position* bosspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bosspos_);
  }
  _impl_.bosspos_ = bosspos;
  if (bosspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_MONSTER_AI.bossPos)
}
inline ::game::Position* SC_MONSTER_AI::release_bosspos() {
  
  ::game::Position* temp = _impl_.bosspos_;
  _impl_.bosspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::Position* SC_MONSTER_AI::unsafe_arena_release_bosspos() {
  // @@protoc_insertion_point(field_release:game.SC_MONSTER_AI.bossPos)
  
  ::game::Position* temp = _impl_.bosspos_;
  _impl_.bosspos_ = nullptr;
  return temp;
}
inline ::game::Position* SC_MONSTER_AI::_internal_mutable_bosspos() {
  
  if (_impl_.bosspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::Position>(GetArenaForAllocation());
    _impl_.bosspos_ = p;
  }
  return _impl_.bosspos_;
}
inline ::game::Position* SC_MONSTER_AI::mutable_bosspos() {
  ::game::Position* _msg = _internal_mutable_bosspos();
  // @@protoc_insertion_point(field_mutable:game.SC_MONSTER_AI.bossPos)
  return _msg;
}
inline void SC_MONSTER_AI::set_allocated_bosspos(::game::Position* bosspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bosspos_;
  }
  if (bosspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bosspos);
    if (message_arena != submessage_arena) {
      bosspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bosspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bosspos_ = bosspos;
  // @@protoc_insertion_point(field_set_allocated:game.SC_MONSTER_AI.bossPos)
}

// uint32 bossState = 6;
inline void SC_MONSTER_AI::clear_bossstate() {
  _impl_.bossstate_ = 0u;
}
inline uint32_t SC_MONSTER_AI::_internal_bossstate() const {
  return _impl_.bossstate_;
}
inline uint32_t SC_MONSTER_AI::bossstate() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.bossState)
  return _internal_bossstate();
}
inline void SC_MONSTER_AI::_internal_set_bossstate(uint32_t value) {
  
  _impl_.bossstate_ = value;
}
inline void SC_MONSTER_AI::set_bossstate(uint32_t value) {
  _internal_set_bossstate(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_AI.bossState)
}

// float curSpeed = 7;
inline void SC_MONSTER_AI::clear_curspeed() {
  _impl_.curspeed_ = 0;
}
inline float SC_MONSTER_AI::_internal_curspeed() const {
  return _impl_.curspeed_;
}
inline float SC_MONSTER_AI::curspeed() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_AI.curSpeed)
  return _internal_curspeed();
}
inline void SC_MONSTER_AI::_internal_set_curspeed(float value) {
  
  _impl_.curspeed_ = value;
}
inline void SC_MONSTER_AI::set_curspeed(float value) {
  _internal_set_curspeed(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_AI.curSpeed)
}

// -------------------------------------------------------------------

// SC_MONSTER_ROTATE

// uint32 aiID = 1;
inline void SC_MONSTER_ROTATE::clear_aiid() {
  _impl_.aiid_ = 0u;
}
inline uint32_t SC_MONSTER_ROTATE::_internal_aiid() const {
  return _impl_.aiid_;
}
inline uint32_t SC_MONSTER_ROTATE::aiid() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_ROTATE.aiID)
  return _internal_aiid();
}
inline void SC_MONSTER_ROTATE::_internal_set_aiid(uint32_t value) {
  
  _impl_.aiid_ = value;
}
inline void SC_MONSTER_ROTATE::set_aiid(uint32_t value) {
  _internal_set_aiid(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_ROTATE.aiID)
}

// float rotateY = 2;
inline void SC_MONSTER_ROTATE::clear_rotatey() {
  _impl_.rotatey_ = 0;
}
inline float SC_MONSTER_ROTATE::_internal_rotatey() const {
  return _impl_.rotatey_;
}
inline float SC_MONSTER_ROTATE::rotatey() const {
  // @@protoc_insertion_point(field_get:game.SC_MONSTER_ROTATE.rotateY)
  return _internal_rotatey();
}
inline void SC_MONSTER_ROTATE::_internal_set_rotatey(float value) {
  
  _impl_.rotatey_ = value;
}
inline void SC_MONSTER_ROTATE::set_rotatey(float value) {
  _internal_set_rotatey(value);
  // @@protoc_insertion_point(field_set:game.SC_MONSTER_ROTATE.rotateY)
}

// -------------------------------------------------------------------

// CS_CHECK_TIMEOUT

// bool bCheck = 1;
inline void CS_CHECK_TIMEOUT::clear_bcheck() {
  _impl_.bcheck_ = false;
}
inline bool CS_CHECK_TIMEOUT::_internal_bcheck() const {
  return _impl_.bcheck_;
}
inline bool CS_CHECK_TIMEOUT::bcheck() const {
  // @@protoc_insertion_point(field_get:game.CS_CHECK_TIMEOUT.bCheck)
  return _internal_bcheck();
}
inline void CS_CHECK_TIMEOUT::_internal_set_bcheck(bool value) {
  
  _impl_.bcheck_ = value;
}
inline void CS_CHECK_TIMEOUT::set_bcheck(bool value) {
  _internal_set_bcheck(value);
  // @@protoc_insertion_point(field_set:game.CS_CHECK_TIMEOUT.bCheck)
}

// -------------------------------------------------------------------

// CS_TEST_PACKET1

// repeated uint32 tempData = 1;
inline int CS_TEST_PACKET1::_internal_tempdata_size() const {
  return _impl_.tempdata_.size();
}
inline int CS_TEST_PACKET1::tempdata_size() const {
  return _internal_tempdata_size();
}
inline void CS_TEST_PACKET1::clear_tempdata() {
  _impl_.tempdata_.Clear();
}
inline uint32_t CS_TEST_PACKET1::_internal_tempdata(int index) const {
  return _impl_.tempdata_.Get(index);
}
inline uint32_t CS_TEST_PACKET1::tempdata(int index) const {
  // @@protoc_insertion_point(field_get:game.CS_TEST_PACKET1.tempData)
  return _internal_tempdata(index);
}
inline void CS_TEST_PACKET1::set_tempdata(int index, uint32_t value) {
  _impl_.tempdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:game.CS_TEST_PACKET1.tempData)
}
inline void CS_TEST_PACKET1::_internal_add_tempdata(uint32_t value) {
  _impl_.tempdata_.Add(value);
}
inline void CS_TEST_PACKET1::add_tempdata(uint32_t value) {
  _internal_add_tempdata(value);
  // @@protoc_insertion_point(field_add:game.CS_TEST_PACKET1.tempData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CS_TEST_PACKET1::_internal_tempdata() const {
  return _impl_.tempdata_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CS_TEST_PACKET1::tempdata() const {
  // @@protoc_insertion_point(field_list:game.CS_TEST_PACKET1.tempData)
  return _internal_tempdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CS_TEST_PACKET1::_internal_mutable_tempdata() {
  return &_impl_.tempdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CS_TEST_PACKET1::mutable_tempdata() {
  // @@protoc_insertion_point(field_mutable_list:game.CS_TEST_PACKET1.tempData)
  return _internal_mutable_tempdata();
}

// -------------------------------------------------------------------

// CS_TEST_PACKET2

// repeated .game.PlayerInfo tempData = 1;
inline int CS_TEST_PACKET2::_internal_tempdata_size() const {
  return _impl_.tempdata_.size();
}
inline int CS_TEST_PACKET2::tempdata_size() const {
  return _internal_tempdata_size();
}
inline void CS_TEST_PACKET2::clear_tempdata() {
  _impl_.tempdata_.Clear();
}
inline ::game::PlayerInfo* CS_TEST_PACKET2::mutable_tempdata(int index) {
  // @@protoc_insertion_point(field_mutable:game.CS_TEST_PACKET2.tempData)
  return _impl_.tempdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >*
CS_TEST_PACKET2::mutable_tempdata() {
  // @@protoc_insertion_point(field_mutable_list:game.CS_TEST_PACKET2.tempData)
  return &_impl_.tempdata_;
}
inline const ::game::PlayerInfo& CS_TEST_PACKET2::_internal_tempdata(int index) const {
  return _impl_.tempdata_.Get(index);
}
inline const ::game::PlayerInfo& CS_TEST_PACKET2::tempdata(int index) const {
  // @@protoc_insertion_point(field_get:game.CS_TEST_PACKET2.tempData)
  return _internal_tempdata(index);
}
inline ::game::PlayerInfo* CS_TEST_PACKET2::_internal_add_tempdata() {
  return _impl_.tempdata_.Add();
}
inline ::game::PlayerInfo* CS_TEST_PACKET2::add_tempdata() {
  ::game::PlayerInfo* _add = _internal_add_tempdata();
  // @@protoc_insertion_point(field_add:game.CS_TEST_PACKET2.tempData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >&
CS_TEST_PACKET2::tempdata() const {
  // @@protoc_insertion_point(field_list:game.CS_TEST_PACKET2.tempData)
  return _impl_.tempdata_;
}

// -------------------------------------------------------------------

// SC_TEST_PACKET

// repeated .game.PlayerInfo tempData = 1;
inline int SC_TEST_PACKET::_internal_tempdata_size() const {
  return _impl_.tempdata_.size();
}
inline int SC_TEST_PACKET::tempdata_size() const {
  return _internal_tempdata_size();
}
inline void SC_TEST_PACKET::clear_tempdata() {
  _impl_.tempdata_.Clear();
}
inline ::game::PlayerInfo* SC_TEST_PACKET::mutable_tempdata(int index) {
  // @@protoc_insertion_point(field_mutable:game.SC_TEST_PACKET.tempData)
  return _impl_.tempdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >*
SC_TEST_PACKET::mutable_tempdata() {
  // @@protoc_insertion_point(field_mutable_list:game.SC_TEST_PACKET.tempData)
  return &_impl_.tempdata_;
}
inline const ::game::PlayerInfo& SC_TEST_PACKET::_internal_tempdata(int index) const {
  return _impl_.tempdata_.Get(index);
}
inline const ::game::PlayerInfo& SC_TEST_PACKET::tempdata(int index) const {
  // @@protoc_insertion_point(field_get:game.SC_TEST_PACKET.tempData)
  return _internal_tempdata(index);
}
inline ::game::PlayerInfo* SC_TEST_PACKET::_internal_add_tempdata() {
  return _impl_.tempdata_.Add();
}
inline ::game::PlayerInfo* SC_TEST_PACKET::add_tempdata() {
  ::game::PlayerInfo* _add = _internal_add_tempdata();
  // @@protoc_insertion_point(field_add:game.SC_TEST_PACKET.tempData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >&
SC_TEST_PACKET::tempdata() const {
  // @@protoc_insertion_point(field_list:game.SC_TEST_PACKET.tempData)
  return _impl_.tempdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::PacketID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::PacketID>() {
  return ::game::PacketID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
