syntax = "proto3";

package game;

enum PacketID {
// Client → Server
    CS_Chat = 0;
    CS_CheckTimeout = 1;
    CS_FindIdRequest = 2;
    CS_FindPwRequest = 3;
    CS_Keyinfo = 4;
    CS_LoginRequest = 5;
    CS_PlayerAttack = 6;
    CS_PositionSync = 7;
    CS_RegisterRequest = 8;
    CS_RequestCharacterInfo = 9;
    CS_RequestItemInfo = 10;
    CS_SignupRequest = 11;
    CS_TestPacket1 = 12;
    CS_TestPacket2 = 13;

// Server → Client
    SC_BossPhase = 14;
    SC_Chat = 15;
    SC_CreateMonster = 16;
    SC_FindIdResponse = 17;
    SC_FindPwResponse = 18;
    SC_Keyinfo = 19;
    SC_LoginResponse = 20;
    SC_PlayerAttack = 21;
    SC_PlayerDamaged = 22;
    SC_PlayerDie = 23;
    SC_PositionSync = 24;
    SC_RemoveCharacter = 25;
    SC_RequestItemInfo = 26;
    SC_ResponseCharacterInfo = 27;
    SC_SignupResponse = 28;
    SC_SpawnCharacter = 29;
    SC_TestPacket = 30;
}

enum BOSS_STATE {
    BOSS_STATE_ATTACK = 0; // 공격
    BOSS_STATE_CHASE = 1; // 추적
    BOSS_STATE_DIE = 2; // 죽음
    BOSS_STATE_IDLE = 3; // 대기
    BOSS_STATE_SKILL1 = 4; // 스킬
    BOSS_STATE_SKILL2 = 5; // 스킬1
    BOSS_STATE_SKILL3 = 6; // 스킬2
    BOSS_STATE_WALK = 7; // 걷기
}

message PlayerInfo {
    string playerNickname = 1; // 이름
    uint32 playerMaxHp = 2; // 최대 hp
    uint32 playerMaxMp = 3; // 최대 mp
    uint32 playerJobIcon = 4; // 직업 아이콘
}
message Position {
    float posX = 1; // 위치
    float posY = 2;
    float posZ = 3;
}

message CS_FIND_ID_REQUEST {
    string email = 1;
}
message CS_FIND_PW_REQUEST {
    string id = 1;
    string email = 2;
}
message CS_LOGIN_REQUEST {
    string id = 1;
    string password = 2;
}
message CS_REQUEST_CHARACTER_INFO {
    bool bRequest = 1; // true를 삽입 후 전송할 것
}
message CS_REQUEST_ITEM_INFO {
    bool bRequest = 1; // true를 삽입 후 전송할 것
}
message CS_SIGNUP_REQUEST {
    string id = 1;
    string email = 2; // 회원가입시 사용하는  이메일. naver, gmail 등으로 인증용 기능 만들 예정
    string password = 3;
}
message CS_TEST_PACKET1 {
    repeated uint32 tempData = 1;
}
message CS_TEST_PACKET2 {
    repeated PlayerInfo tempData = 1;
}
message SC_FIND_ID_RESPONSE {
    bool success = 1;
    string id = 2;
}
message SC_FIND_PW_RESPONSE {
    bool success = 1;
    string pw = 2;
}
message SC_LOGIN_RESPONSE {
    bool success = 1;
    uint32 errorCode = 2; // 에러코드 1: ID 존재하지 않음, 2: 비밀번호 불일치
}
message SC_REQUEST_ITEM_INFO {
    repeated uint32 itemInfo = 1; // 플레이어가 소지하고 있던 아이템 정보
}
message SC_RESPONSE_CHARACTER_INFO {
    PlayerInfo playerInfo = 1; // 플레이어 정보
}
message SC_SIGNUP_RESPONSE {
    bool success = 1; // 성공 여부
    uint32 errorCode = 2; // 에러코드 1: 이미 존재하는 ID, 2: 이미 존재하는 이메일
}
message SC_TEST_PACKET {
    repeated PlayerInfo tempData = 1;
}
message CS_REGISTER_REQUEST {
    string userName = 1;
}
message SC_CREATE_MONSTER {
    uint32 aiID = 1; // AI 고유 ID
    uint32 monsterTypeID = 2; // 생성될 몬스터 타입 ID
    Position monsterPos = 3; // 몬스터의 초기 위치
}
message SC_REMOVE_CHARACTER {
    uint32 playerID = 1; // 플레이어의 id
}
message SC_SPAWN_CHARACTER {
    uint32 playerID = 1; // 플레이어의 id
    Position playerPos = 2; // 플레이어의 초기 위치. 나중에 가면 마지막에 로그아웃했던 위치로 변경 예정
    float cameraYaw = 3; // 초기 카메라 y축 회전값. 이건 사용하지 않을 수 있으니 놔두기만 함
    PlayerInfo playerInfo = 4; // 플레이어 정보
}
message CS_CHAT {
    uint32 targetID = 1; // 타겟이 되는 플레이어의 id
    string message = 2; // 채팅 메시지
    uint32 channel = 3; // 채널 타입, 0번 : 전체, 1번 : 파티, 2번 : 귓속말. 2번일 경우에만 target 검사
}
message SC_CHAT {
    uint32 playerID = 1; // 채팅을 보낸 플레이어의 id
    string message = 2; // 채팅 메시지
    uint32 channel = 3; // 채널 타입
}
message CS_KEYINFO {
    uint32 keyInfo = 1; // 키보드 입력시 관련 움직임 정보 전송
    float cameraYaw = 2; // 카메라 회전값
}
message CS_PLAYER_ATTACK {
    uint32 aiID = 1; // AI 고유 ID
    uint32 attackType = 2; // 공격 타입(스킬, 일반 공격)
}
message CS_POSITION_SYNC {
    float posX = 1; // 위치 정보 동기화
    float posY = 2;
    float cameraYaw = 3; // 카메라 회전값
}
message SC_KEYINFO {
    uint32 playerID = 1; // 움직임을 보내는 플레이어의 id
    uint32 keyInfo = 2; // 키보드 입력시 관련 움직임 정보 전송
    float cameraYaw = 3; // 카메라 회전값
}
message SC_PLAYER_ATTACK {
    uint32 playerID = 1; // 플레이어 고유 ID
    uint32 attackType = 2; // 공격 타입(스킬, 일반 공격)
    uint32 aiID = 3; // AI 고유 ID
    uint32 damage  = 4; // 플레이어가 가한 데미지
    uint32 targetMaxHP = 5; // 타겟 AI의 최대 HP
    uint32 targetCurHP = 6; // 타겟 AI의 남은 HP
}
message SC_PLAYER_DAMAGED {
    uint32 playerID = 1; // 플레이어 고유 ID
    uint32 damage  = 2; // 플레이어가 입은 데미지
}
message SC_PLAYER_DIE {
    uint32 playerID = 1; // 플레이어 고유 ID
}
message SC_POSITION_SYNC {
    uint32 playerID = 1; // 위치를 보내는 플레이어의 id
    float posX = 2; // 위치 정보 동기화
    float posY = 3;
    float cameraYaw = 4; // 카메라 회전값
}
message SC_BOSS_PHASE {
    uint32 bossID = 1; // 보스의 고유 ID
    uint32 currentHp = 2; // 보스의 현재 체력
    uint32 maxHp = 3; // 보스의 최대 체력
    Position targetMovementPos = 4; // 보스가 이동해야 하는 목표 위치
    Position bossPos = 5; // 현재 보스의 위치
    BOSS_STATE bossState = 6; // 보스의 현재 상태
    float curSpeed = 7; // 현재 이동속도
}
message CS_CHECK_TIMEOUT {
    bool bCheck = 1; // L7에서 timeout 체크용. 일정 주기마다 한번씩 서버에 전송
}
