syntax = "proto3";

package game;

enum PacketID {
// Client → Server
    CS_AcceptParty = 0;
    CS_CancelEnteringDungeon = 1;
    CS_Chat = 2;
    CS_CheckTimeout = 3;
    CS_CreateMonster = 4;
    CS_FindIdRequest = 5;
    CS_FindPwRequest = 6;
    CS_Keyinfo = 7;
    CS_LoginRequest = 8;
    CS_MakeParty = 9;
    CS_MonsterAi = 10;
    CS_MonsterAttack = 11;
    CS_MonsterCondition = 12;
    CS_MonsterDie = 13;
    CS_MonsterRotate = 14;
    CS_PlayerAttack = 15;
    CS_PlayerDie = 16;
    CS_PositionSync = 17;
    CS_RegisterRequest = 18;
    CS_RequestCharacterInfo = 19;
    CS_RequestEnterDungeon = 20;
    CS_RequestItemInfo = 21;
    CS_ResponseEnterDungeonEnd = 22;
    CS_SignupRequest = 23;
    CS_SpawnCharacter = 24;
    CS_StartAiCalculate = 25;
    CS_StopAiCalculate = 26;
    CS_TestPacket1 = 27;
    CS_TestPacket2 = 28;

// Server → Client
    SC_AcceptParty = 29;
    SC_CancelEnteringDungeon = 30;
    SC_Chat = 31;
    SC_CreateMonster = 32;
    SC_FindIdResponse = 33;
    SC_FindPwResponse = 34;
    SC_Keyinfo = 35;
    SC_LoginResponse = 36;
    SC_MakeParty = 37;
    SC_MonsterAi = 38;
    SC_MonsterCondition = 39;
    SC_MonsterDamaged = 40;
    SC_MonsterDie = 41;
    SC_MonsterRotate = 42;
    SC_PlayerDamaged = 43;
    SC_PlayerDie = 44;
    SC_PositionSync = 45;
    SC_PrepareEnteringDungeon = 46;
    SC_RemoveCharacter = 47;
    SC_RequestItemInfo = 48;
    SC_ResponseCharacterInfo = 49;
    SC_ResponseEnterDungeonBegin = 50;
    SC_ResponseEnterDungeonEnd = 51;
    SC_SignupResponse = 52;
    SC_SpawnCharacter = 53;
    SC_StartAiCalculate = 54;
    SC_StopAiCalculate = 55;
    SC_TestPacket = 56;
}


message PlayerInfo {
    string playerNickname = 1; // 이름
    uint32 playerJob = 2; // 직업
    uint32 level = 3; // 레벨
}
message Position {
    float posX = 1; // 위치
    float posY = 2;
    float posZ = 3;
}

message CS_FIND_ID_REQUEST {
    string email = 1;
}
message CS_FIND_PW_REQUEST {
    string id = 1;
    string email = 2;
}
message CS_LOGIN_REQUEST {
    string id = 1;
    string password = 2;
}
message CS_REQUEST_CHARACTER_INFO {
    string id = 1; // 로그인에 사용한 id를 전송, 서버에서 이를 기반으로 플레이어 정보 파싱
}
message CS_REQUEST_ITEM_INFO {
    string id = 1; // 로그인에 사용한 id를 전송, 서버에서 이를 기반으로 아이템 정보 파싱
}
message CS_SIGNUP_REQUEST {
    string id = 1;
    string email = 2; // 회원가입시 사용하는  이메일. naver, gmail 등으로 인증용 기능 만들 예정
    string password = 3;
}
message SC_FIND_ID_RESPONSE {
    bool success = 1;
    string id = 2;
}
message SC_FIND_PW_RESPONSE {
    bool success = 1;
    string pw = 2;
}
message SC_LOGIN_RESPONSE {
    bool success = 1;
    uint32 errorCode = 2; // 에러코드 1: ID 존재하지 않음, 2: 비밀번호 불일치
}
message SC_REQUEST_ITEM_INFO {
    repeated uint32 itemInfo = 1; // 플레이어가 소지하고 있던 아이템 정보
}
message SC_RESPONSE_CHARACTER_INFO {
    PlayerInfo playerInfo = 1; // 플레이어 정보
}
message SC_SIGNUP_RESPONSE {
    bool success = 1; // 성공 여부
    uint32 errorCode = 2; // 에러코드 1: 이미 존재하는 ID, 2: 이미 존재하는 이메일
}
message CS_ACCEPT_PARTY {
    uint32 FromPlayerID = 1; // 파티를 요청하는 플레이어 ID
    uint32 ToPlayerID = 2; // 파티 요청 대상 플레이어 ID
}
message CS_CANCEL_ENTERING_DUNGEON {
    bool bCancel = 1;
}
message CS_CREATE_MONSTER {
    uint32 monsterType = 1; // 생성될 몬스터 타입
    Position monsterPos = 2; // 몬스터의 초기 위치
}
message CS_MAKE_PARTY {
    uint32 FromPlayerID = 1; // 파티를 요청하는 플레이어 ID
    uint32 ToPlayerID = 2; // 파티 요청 대상 플레이어 ID
}
message CS_REGISTER_REQUEST {
    bool bRequest = 1;
}
message CS_REQUEST_ENTER_DUNGEON {
    bool bEnter = 1;
}
message CS_RESPONSE_ENTER_DUNGEON_END {
    bool bEnterEnd = 1;
}
message CS_SPAWN_CHARACTER {
    uint32 playerID = 1; // 플레이어의 id
    Position playerPos = 2; // 플레이어의 초기 위치. 나중에 가면 마지막에 로그아웃했던 위치로 변경 예정
    float cameraYaw = 3; // 초기 카메라 y축 회전값. 이건 사용하지 않을 수 있으니 놔두기만 함
    PlayerInfo playerInfo = 4; // 플레이어 정보
}
message CS_START_AI_CALCULATE {
    bool bStart = 1; // AI 계산 및 패킷 전송 시작을 서버에 알림
}
message CS_STOP_AI_CALCULATE {
    bool bStop = 1; // AI 계산 및 패킷 전송 중단을 서버에 알림
}
message SC_ACCEPT_PARTY {
    uint32 FromPlayerID = 1; // 파티를 요청하는 플레이어 ID
    uint32 ToPlayerID = 2; // 파티 요청 대상 플레이어 ID
    PlayerInfo playerInfo = 3; // 플레이어 정보
}
message SC_CANCEL_ENTERING_DUNGEON {
    bool bCancel = 1;
    uint32 playerID = 2; // 취소를 누른 플레이어의 id
}
message SC_CREATE_MONSTER {
    uint32 aiID = 1; // AI 고유 ID
    uint32 monsterType = 2; // 생성될 몬스터 타입
    Position monsterPos = 3; // 몬스터의 초기 위치
}
message SC_MAKE_PARTY {
    uint32 FromPlayerID = 1; // 파티를 요청하는 플레이어 ID
    uint32 ToPlayerID = 2; // 파티 요청 대상 플레이어 ID
}
message SC_PREPARE_ENTERING_DUNGEON {
    bool bEnter = 1;
}
message SC_REMOVE_CHARACTER {
    uint32 playerID = 1; // 플레이어의 id
}
message SC_RESPONSE_ENTER_DUNGEON_BEGIN {
    bool bEnterBegin = 1;
}
message SC_RESPONSE_ENTER_DUNGEON_END {
    bool bEnterEnd = 1;
}
message SC_SPAWN_CHARACTER {
    uint32 playerID = 1; // 플레이어의 id
    Position playerPos = 2; // 플레이어의 초기 위치. 나중에 가면 마지막에 로그아웃했던 위치로 변경 예정
    float cameraYaw = 3; // 초기 카메라 y축 회전값. 이건 사용하지 않을 수 있으니 놔두기만 함
    PlayerInfo playerInfo = 4; // 플레이어 정보
}
message SC_START_AI_CALCULATE {
    bool bStart = 1; // AI 계산 및 패킷 전송 시작
}
message SC_STOP_AI_CALCULATE {
    bool bStop = 1; // AI 계산 및 패킷 전송 중단
}
message CS_CHAT {
    uint32 targetID = 1; // 타겟이 되는 플레이어의 id
    string message = 2; // 채팅 메시지
    uint32 channel = 3; // 채널 타입, 0번 : 전체, 1번 : 파티, 2번 : 귓속말. 2번일 경우에만 target 검사
}
message SC_CHAT {
    uint32 playerID = 1; // 채팅을 보낸 플레이어의 id
    string message = 2; // 채팅 메시지
    uint32 channel = 3; // 채널 타입
}
message CS_KEYINFO {
    uint32 keyInfo = 1; // 키보드 입력시 관련 움직임 정보 전송
    float cameraYaw = 2; // 카메라 회전값
}
message CS_MONSTER_ATTACK {
    uint32 playerID = 1; // 타겟 플레이어 고유 ID
    uint32 damage  = 2; // 타겟 플레이어가 입은 데미지
}
message CS_MONSTER_DIE {
    uint32 aiID = 1; // AI 고유 ID
}
message CS_PLAYER_ATTACK {
    uint32 aiID = 1; // AI 고유 ID
    uint32 attackDamage = 2; // 공격 데미지
}
message CS_PLAYER_DIE {
    uint32 playerID = 1; // 플레이어 고유 ID
}
message CS_POSITION_SYNC {
    float posX = 1; // 위치 정보 동기화
    float posY = 2;
    float cameraYaw = 3; // 카메라 회전값
}
message SC_KEYINFO {
    uint32 playerID = 1; // 움직임을 보내는 플레이어의 id
    uint32 keyInfo = 2; // 키보드 입력시 관련 움직임 정보 전송
    float cameraYaw = 3; // 카메라 회전값
}
message SC_MONSTER_DAMAGED {
    uint32 aiID = 1; // AI 고유 ID
    uint32 damage  = 2; // 플레이어가 가한 데미지
}
message SC_MONSTER_DIE {
    uint32 aiID = 1; // AI 고유 ID
}
message SC_PLAYER_DAMAGED {
    uint32 playerID = 1; // 플레이어 고유 ID
    uint32 damage  = 2; // 플레이어가 입은 데미지
}
message SC_PLAYER_DIE {
    uint32 playerID = 1; // 플레이어 고유 ID
}
message SC_POSITION_SYNC {
    uint32 playerID = 1; // 위치를 보내는 플레이어의 id
    float posX = 2; // 위치 정보 동기화
    float posY = 3;
    float cameraYaw = 4; // 카메라 회전값
}
message CS_MONSTER_AI {
    uint32 aiID = 1; // 보스의 고유 ID
    Position targetMovementPos = 2; // 보스가 이동해야 하는 목표 위치
    Position bossPos = 3; // 현재 보스의 위치
    uint32 bossState = 4; // 보스의 현재 상태
    float curSpeed = 5; // 현재 이동속도
}
message CS_MONSTER_CONDITION {
    uint32 aiID = 1; // 몬스터의 고유 ID
    uint32 currentHp = 2; // 몬스터의 현재 체력
    uint32 maxHp = 3; // 몬스터의 최대 체력
}
message CS_MONSTER_ROTATE {
    uint32 aiID = 1; // 보스의 고유 ID
    float rotateY = 2; // 목표 회전값
}
message SC_MONSTER_AI {
    uint32 aiID = 1; // 보스의 고유 ID
    Position targetMovementPos = 2; // 보스가 이동해야 하는 목표 위치
    Position bossPos = 3; // 현재 보스의 위치
    uint32 bossState = 4; // 보스의 현재 상태
    float curSpeed = 5; // 현재 이동속도
}
message SC_MONSTER_CONDITION {
    uint32 aiID = 1; // 몬스터의 고유 ID
    uint32 currentHp = 2; // 몬스터의 현재 체력
    uint32 maxHp = 3; // 몬스터의 최대 체력
}
message SC_MONSTER_ROTATE {
    uint32 aiID = 1; // 보스의 고유 ID
    float rotateY = 2; // 목표 회전값
}
message CS_CHECK_TIMEOUT {
    bool bCheck = 1; // L7에서 timeout 체크용. 일정 주기마다 한번씩 서버에 전송
}
message CS_TEST_PACKET1 {
    repeated uint32 tempData = 1;
}
message CS_TEST_PACKET2 {
    repeated PlayerInfo tempData = 1;
}
message SC_TEST_PACKET {
    repeated PlayerInfo tempData = 1;
}
