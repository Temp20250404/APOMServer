// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
PROTOBUF_CONSTEXPR CS_ATTACK::CS_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.battack_)*/false
  , /*decltype(_impl_.normalx_)*/0u
  , /*decltype(_impl_.normaly_)*/0u
  , /*decltype(_impl_.normalz_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_ATTACKDefaultTypeInternal() {}
  union {
    CS_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_ATTACKDefaultTypeInternal _CS_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR CS_CHANGE_WEAPON::CS_CHANGE_WEAPON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weapon_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_CHANGE_WEAPONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_CHANGE_WEAPONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_CHANGE_WEAPONDefaultTypeInternal() {}
  union {
    CS_CHANGE_WEAPON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_CHANGE_WEAPONDefaultTypeInternal _CS_CHANGE_WEAPON_default_instance_;
PROTOBUF_CONSTEXPR CS_GRENADE_EXPLOSITION_POS::CS_GRENADE_EXPLOSITION_POS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_GRENADE_EXPLOSITION_POSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_GRENADE_EXPLOSITION_POSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_GRENADE_EXPLOSITION_POSDefaultTypeInternal() {}
  union {
    CS_GRENADE_EXPLOSITION_POS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_GRENADE_EXPLOSITION_POSDefaultTypeInternal _CS_GRENADE_EXPLOSITION_POS_default_instance_;
PROTOBUF_CONSTEXPR CS_ITEM_PICKED::CS_ITEM_PICKED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_ITEM_PICKEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_ITEM_PICKEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_ITEM_PICKEDDefaultTypeInternal() {}
  union {
    CS_ITEM_PICKED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_ITEM_PICKEDDefaultTypeInternal _CS_ITEM_PICKED_default_instance_;
PROTOBUF_CONSTEXPR CS_KEY_INPUT::CS_KEY_INPUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyw_)*/0u
  , /*decltype(_impl_.keya_)*/0u
  , /*decltype(_impl_.keys_)*/0u
  , /*decltype(_impl_.keyd_)*/0u
  , /*decltype(_impl_.rotateaxisx_)*/0u
  , /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.jump_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_KEY_INPUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_KEY_INPUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_KEY_INPUTDefaultTypeInternal() {}
  union {
    CS_KEY_INPUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_KEY_INPUTDefaultTypeInternal _CS_KEY_INPUT_default_instance_;
PROTOBUF_CONSTEXPR CS_POS_INTERPOLATION::CS_POS_INTERPOLATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_POS_INTERPOLATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_POS_INTERPOLATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_POS_INTERPOLATIONDefaultTypeInternal() {}
  union {
    CS_POS_INTERPOLATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_POS_INTERPOLATIONDefaultTypeInternal _CS_POS_INTERPOLATION_default_instance_;
PROTOBUF_CONSTEXPR CS_REQUEST_RESTART::CS_REQUEST_RESTART(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.weapon_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_REQUEST_RESTARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_REQUEST_RESTARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_REQUEST_RESTARTDefaultTypeInternal() {}
  union {
    CS_REQUEST_RESTART _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_REQUEST_RESTARTDefaultTypeInternal _CS_REQUEST_RESTART_default_instance_;
PROTOBUF_CONSTEXPR CS_SEND_NICKNAME::CS_SEND_NICKNAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_SEND_NICKNAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_SEND_NICKNAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_SEND_NICKNAMEDefaultTypeInternal() {}
  union {
    CS_SEND_NICKNAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_SEND_NICKNAMEDefaultTypeInternal _CS_SEND_NICKNAME_default_instance_;
PROTOBUF_CONSTEXPR CS_SHOT_HIT::CS_SHOT_HIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_SHOT_HITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_SHOT_HITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_SHOT_HITDefaultTypeInternal() {}
  union {
    CS_SHOT_HIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_SHOT_HITDefaultTypeInternal _CS_SHOT_HIT_default_instance_;
PROTOBUF_CONSTEXPR CS_THROW_GRENADE::CS_THROW_GRENADE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_.dirx_)*/0u
  , /*decltype(_impl_.diry_)*/0u
  , /*decltype(_impl_.dirz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CS_THROW_GRENADEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CS_THROW_GRENADEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CS_THROW_GRENADEDefaultTypeInternal() {}
  union {
    CS_THROW_GRENADE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CS_THROW_GRENADEDefaultTypeInternal _CS_THROW_GRENADE_default_instance_;
PROTOBUF_CONSTEXPR KDAInfo::KDAInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kill_)*/0u
  , /*decltype(_impl_.death_)*/0u
  , /*decltype(_impl_.assist_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KDAInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KDAInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KDAInfoDefaultTypeInternal() {}
  union {
    KDAInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KDAInfoDefaultTypeInternal _KDAInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kda_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR SC_ATTACK::SC_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.normalx_)*/0u
  , /*decltype(_impl_.normaly_)*/0u
  , /*decltype(_impl_.normalz_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ATTACKDefaultTypeInternal() {}
  union {
    SC_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ATTACKDefaultTypeInternal _SC_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR SC_CHANGE_WEAPON::SC_CHANGE_WEAPON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.weapon_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CHANGE_WEAPONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CHANGE_WEAPONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CHANGE_WEAPONDefaultTypeInternal() {}
  union {
    SC_CHANGE_WEAPON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CHANGE_WEAPONDefaultTypeInternal _SC_CHANGE_WEAPON_default_instance_;
PROTOBUF_CONSTEXPR SC_CHARACTER_DOWN::SC_CHARACTER_DOWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CHARACTER_DOWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CHARACTER_DOWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CHARACTER_DOWNDefaultTypeInternal() {}
  union {
    SC_CHARACTER_DOWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CHARACTER_DOWNDefaultTypeInternal _SC_CHARACTER_DOWN_default_instance_;
PROTOBUF_CONSTEXPR SC_CHARACTER_KILL_LOG::SC_CHARACTER_KILL_LOG(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfolist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CHARACTER_KILL_LOGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CHARACTER_KILL_LOGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CHARACTER_KILL_LOGDefaultTypeInternal() {}
  union {
    SC_CHARACTER_KILL_LOG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CHARACTER_KILL_LOGDefaultTypeInternal _SC_CHARACTER_KILL_LOG_default_instance_;
PROTOBUF_CONSTEXPR SC_CREATE_MY_CHARACTER::SC_CREATE_MY_CHARACTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.posindex_)*/0u
  , /*decltype(_impl_.maxhp_)*/0u
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CREATE_MY_CHARACTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CREATE_MY_CHARACTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CREATE_MY_CHARACTERDefaultTypeInternal() {}
  union {
    SC_CREATE_MY_CHARACTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CREATE_MY_CHARACTERDefaultTypeInternal _SC_CREATE_MY_CHARACTER_default_instance_;
PROTOBUF_CONSTEXPR SC_CREATE_OTHER_CHARACTER::SC_CREATE_OTHER_CHARACTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kdainfo_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.posindex_)*/0u
  , /*decltype(_impl_.maxhp_)*/0u
  , /*decltype(_impl_.curhp_)*/0u
  , /*decltype(_impl_.weapon_)*/0u
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_CREATE_OTHER_CHARACTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_CREATE_OTHER_CHARACTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_CREATE_OTHER_CHARACTERDefaultTypeInternal() {}
  union {
    SC_CREATE_OTHER_CHARACTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_CREATE_OTHER_CHARACTERDefaultTypeInternal _SC_CREATE_OTHER_CHARACTER_default_instance_;
PROTOBUF_CONSTEXPR SC_GRENADE_EXPLOSITION_POS::SC_GRENADE_EXPLOSITION_POS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_GRENADE_EXPLOSITION_POSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_GRENADE_EXPLOSITION_POSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_GRENADE_EXPLOSITION_POSDefaultTypeInternal() {}
  union {
    SC_GRENADE_EXPLOSITION_POS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_GRENADE_EXPLOSITION_POSDefaultTypeInternal _SC_GRENADE_EXPLOSITION_POS_default_instance_;
PROTOBUF_CONSTEXPR SC_ITEM_PICK_FAIL::SC_ITEM_PICK_FAIL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ITEM_PICK_FAILDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ITEM_PICK_FAILDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ITEM_PICK_FAILDefaultTypeInternal() {}
  union {
    SC_ITEM_PICK_FAIL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ITEM_PICK_FAILDefaultTypeInternal _SC_ITEM_PICK_FAIL_default_instance_;
PROTOBUF_CONSTEXPR SC_ITEM_PICK_SUCCESS::SC_ITEM_PICK_SUCCESS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ITEM_PICK_SUCCESSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ITEM_PICK_SUCCESSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ITEM_PICK_SUCCESSDefaultTypeInternal() {}
  union {
    SC_ITEM_PICK_SUCCESS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ITEM_PICK_SUCCESSDefaultTypeInternal _SC_ITEM_PICK_SUCCESS_default_instance_;
PROTOBUF_CONSTEXPR SC_ITEM_SPAWNED::SC_ITEM_SPAWNED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_.itemtype_)*/0u
  , /*decltype(_impl_.itemposindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ITEM_SPAWNEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ITEM_SPAWNEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ITEM_SPAWNEDDefaultTypeInternal() {}
  union {
    SC_ITEM_SPAWNED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ITEM_SPAWNEDDefaultTypeInternal _SC_ITEM_SPAWNED_default_instance_;
PROTOBUF_CONSTEXPR SC_KEY_INPUT::SC_KEY_INPUT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.keyw_)*/0u
  , /*decltype(_impl_.keya_)*/0u
  , /*decltype(_impl_.keys_)*/0u
  , /*decltype(_impl_.keyd_)*/0u
  , /*decltype(_impl_.rotateaxisx_)*/0u
  , /*decltype(_impl_.rotateaxisy_)*/0u
  , /*decltype(_impl_.jump_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_KEY_INPUTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_KEY_INPUTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_KEY_INPUTDefaultTypeInternal() {}
  union {
    SC_KEY_INPUT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_KEY_INPUTDefaultTypeInternal _SC_KEY_INPUT_default_instance_;
PROTOBUF_CONSTEXPR SC_ON_ACCEPT::SC_ON_ACCEPT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_ON_ACCEPTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_ON_ACCEPTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_ON_ACCEPTDefaultTypeInternal() {}
  union {
    SC_ON_ACCEPT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_ON_ACCEPTDefaultTypeInternal _SC_ON_ACCEPT_default_instance_;
PROTOBUF_CONSTEXPR SC_POS_INTERPOLATION::SC_POS_INTERPOLATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_POS_INTERPOLATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_POS_INTERPOLATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_POS_INTERPOLATIONDefaultTypeInternal() {}
  union {
    SC_POS_INTERPOLATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_POS_INTERPOLATIONDefaultTypeInternal _SC_POS_INTERPOLATION_default_instance_;
PROTOBUF_CONSTEXPR SC_SHOT_HIT::SC_SHOT_HIT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_SHOT_HITDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_SHOT_HITDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_SHOT_HITDefaultTypeInternal() {}
  union {
    SC_SHOT_HIT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_SHOT_HITDefaultTypeInternal _SC_SHOT_HIT_default_instance_;
PROTOBUF_CONSTEXPR SC_THROW_GRENADE::SC_THROW_GRENADE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_.posz_)*/0u
  , /*decltype(_impl_.dirx_)*/0u
  , /*decltype(_impl_.diry_)*/0u
  , /*decltype(_impl_.dirz_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SC_THROW_GRENADEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SC_THROW_GRENADEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SC_THROW_GRENADEDefaultTypeInternal() {}
  union {
    SC_THROW_GRENADE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SC_THROW_GRENADEDefaultTypeInternal _SC_THROW_GRENADE_default_instance_;
}  // namespace game
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.battack_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.normalx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.normaly_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.normalz_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_ATTACK, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_CHANGE_WEAPON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_CHANGE_WEAPON, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_GRENADE_EXPLOSITION_POS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_GRENADE_EXPLOSITION_POS, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_GRENADE_EXPLOSITION_POS, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_GRENADE_EXPLOSITION_POS, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_ITEM_PICKED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_ITEM_PICKED, _impl_.itemid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.keyw_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.keya_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.keyd_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.rotateaxisx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_KEY_INPUT, _impl_.jump_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_POS_INTERPOLATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_POS_INTERPOLATION, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_POS_INTERPOLATION, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_POS_INTERPOLATION, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_RESTART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_RESTART, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_REQUEST_RESTART, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_SEND_NICKNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_SEND_NICKNAME, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_SHOT_HIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_SHOT_HIT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::CS_SHOT_HIT, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _impl_.posz_),
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _impl_.dirx_),
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _impl_.diry_),
  PROTOBUF_FIELD_OFFSET(::game::CS_THROW_GRENADE, _impl_.dirz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::KDAInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::KDAInfo, _impl_.kill_),
  PROTOBUF_FIELD_OFFSET(::game::KDAInfo, _impl_.death_),
  PROTOBUF_FIELD_OFFSET(::game::KDAInfo, _impl_.assist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::PlayerInfo, _impl_.kda_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.normalx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.normaly_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.normalz_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ATTACK, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHANGE_WEAPON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHANGE_WEAPON, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CHANGE_WEAPON, _impl_.weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHARACTER_DOWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHARACTER_DOWN, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CHARACTER_DOWN, _impl_.teamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHARACTER_KILL_LOG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CHARACTER_KILL_LOG, _impl_.playerinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MY_CHARACTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MY_CHARACTER, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MY_CHARACTER, _impl_.posindex_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MY_CHARACTER, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_MY_CHARACTER, _impl_.teamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.posindex_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.curhp_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.kdainfo_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.weapon_),
  PROTOBUF_FIELD_OFFSET(::game::SC_CREATE_OTHER_CHARACTER, _impl_.teamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_GRENADE_EXPLOSITION_POS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_GRENADE_EXPLOSITION_POS, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_GRENADE_EXPLOSITION_POS, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_GRENADE_EXPLOSITION_POS, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_PICK_FAIL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_PICK_FAIL, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_PICK_FAIL, _impl_.itemid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_PICK_SUCCESS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_PICK_SUCCESS, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_PICK_SUCCESS, _impl_.itemid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_SPAWNED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_SPAWNED, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_SPAWNED, _impl_.itemtype_),
  PROTOBUF_FIELD_OFFSET(::game::SC_ITEM_SPAWNED, _impl_.itemposindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.keyw_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.keya_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.keyd_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.rotateaxisx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.rotateaxisy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_KEY_INPUT, _impl_.jump_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_ON_ACCEPT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_ON_ACCEPT, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_POS_INTERPOLATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_POS_INTERPOLATION, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_POS_INTERPOLATION, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_POS_INTERPOLATION, _impl_.posz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_SHOT_HIT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_SHOT_HIT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::game::SC_SHOT_HIT, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _impl_.posz_),
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _impl_.dirx_),
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _impl_.diry_),
  PROTOBUF_FIELD_OFFSET(::game::SC_THROW_GRENADE, _impl_.dirz_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::CS_ATTACK)},
  { 13, -1, -1, sizeof(::game::CS_CHANGE_WEAPON)},
  { 20, -1, -1, sizeof(::game::CS_GRENADE_EXPLOSITION_POS)},
  { 29, -1, -1, sizeof(::game::CS_ITEM_PICKED)},
  { 36, -1, -1, sizeof(::game::CS_KEY_INPUT)},
  { 49, -1, -1, sizeof(::game::CS_POS_INTERPOLATION)},
  { 58, -1, -1, sizeof(::game::CS_REQUEST_RESTART)},
  { 66, -1, -1, sizeof(::game::CS_SEND_NICKNAME)},
  { 73, -1, -1, sizeof(::game::CS_SHOT_HIT)},
  { 81, -1, -1, sizeof(::game::CS_THROW_GRENADE)},
  { 93, -1, -1, sizeof(::game::KDAInfo)},
  { 102, -1, -1, sizeof(::game::PlayerInfo)},
  { 110, -1, -1, sizeof(::game::SC_ATTACK)},
  { 123, -1, -1, sizeof(::game::SC_CHANGE_WEAPON)},
  { 131, -1, -1, sizeof(::game::SC_CHARACTER_DOWN)},
  { 139, -1, -1, sizeof(::game::SC_CHARACTER_KILL_LOG)},
  { 146, -1, -1, sizeof(::game::SC_CREATE_MY_CHARACTER)},
  { 156, -1, -1, sizeof(::game::SC_CREATE_OTHER_CHARACTER)},
  { 170, -1, -1, sizeof(::game::SC_GRENADE_EXPLOSITION_POS)},
  { 179, -1, -1, sizeof(::game::SC_ITEM_PICK_FAIL)},
  { 187, -1, -1, sizeof(::game::SC_ITEM_PICK_SUCCESS)},
  { 195, -1, -1, sizeof(::game::SC_ITEM_SPAWNED)},
  { 204, -1, -1, sizeof(::game::SC_KEY_INPUT)},
  { 218, -1, -1, sizeof(::game::SC_ON_ACCEPT)},
  { 225, -1, -1, sizeof(::game::SC_POS_INTERPOLATION)},
  { 234, -1, -1, sizeof(::game::SC_SHOT_HIT)},
  { 242, -1, -1, sizeof(::game::SC_THROW_GRENADE)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::_CS_ATTACK_default_instance_._instance,
  &::game::_CS_CHANGE_WEAPON_default_instance_._instance,
  &::game::_CS_GRENADE_EXPLOSITION_POS_default_instance_._instance,
  &::game::_CS_ITEM_PICKED_default_instance_._instance,
  &::game::_CS_KEY_INPUT_default_instance_._instance,
  &::game::_CS_POS_INTERPOLATION_default_instance_._instance,
  &::game::_CS_REQUEST_RESTART_default_instance_._instance,
  &::game::_CS_SEND_NICKNAME_default_instance_._instance,
  &::game::_CS_SHOT_HIT_default_instance_._instance,
  &::game::_CS_THROW_GRENADE_default_instance_._instance,
  &::game::_KDAInfo_default_instance_._instance,
  &::game::_PlayerInfo_default_instance_._instance,
  &::game::_SC_ATTACK_default_instance_._instance,
  &::game::_SC_CHANGE_WEAPON_default_instance_._instance,
  &::game::_SC_CHARACTER_DOWN_default_instance_._instance,
  &::game::_SC_CHARACTER_KILL_LOG_default_instance_._instance,
  &::game::_SC_CREATE_MY_CHARACTER_default_instance_._instance,
  &::game::_SC_CREATE_OTHER_CHARACTER_default_instance_._instance,
  &::game::_SC_GRENADE_EXPLOSITION_POS_default_instance_._instance,
  &::game::_SC_ITEM_PICK_FAIL_default_instance_._instance,
  &::game::_SC_ITEM_PICK_SUCCESS_default_instance_._instance,
  &::game::_SC_ITEM_SPAWNED_default_instance_._instance,
  &::game::_SC_KEY_INPUT_default_instance_._instance,
  &::game::_SC_ON_ACCEPT_default_instance_._instance,
  &::game::_SC_POS_INTERPOLATION_default_instance_._instance,
  &::game::_SC_SHOT_HIT_default_instance_._instance,
  &::game::_SC_THROW_GRENADE_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\004game\"y\n\tCS_ATTACK\022\017\n\007b"
  "Attack\030\001 \001(\010\022\017\n\007normalX\030\002 \001(\r\022\017\n\007normalY"
  "\030\003 \001(\r\022\017\n\007normalZ\030\004 \001(\r\022\014\n\004posX\030\005 \001(\r\022\014\n"
  "\004posY\030\006 \001(\r\022\014\n\004posZ\030\007 \001(\r\"\"\n\020CS_CHANGE_W"
  "EAPON\022\016\n\006weapon\030\001 \001(\r\"F\n\032CS_GRENADE_EXPL"
  "OSITION_POS\022\014\n\004posX\030\001 \001(\r\022\014\n\004posY\030\002 \001(\r\022"
  "\014\n\004posZ\030\003 \001(\r\" \n\016CS_ITEM_PICKED\022\016\n\006itemI"
  "d\030\001 \001(\r\"~\n\014CS_KEY_INPUT\022\014\n\004keyW\030\001 \001(\r\022\014\n"
  "\004keyA\030\002 \001(\r\022\014\n\004keyS\030\003 \001(\r\022\014\n\004keyD\030\004 \001(\r\022"
  "\023\n\013rotateAxisX\030\005 \001(\007\022\023\n\013rotateAxisY\030\006 \001("
  "\007\022\014\n\004Jump\030\007 \001(\r\"@\n\024CS_POS_INTERPOLATION\022"
  "\014\n\004posX\030\001 \001(\r\022\014\n\004posY\030\002 \001(\r\022\014\n\004posZ\030\003 \001("
  "\r\"6\n\022CS_REQUEST_RESTART\022\020\n\010playerId\030\001 \001("
  "\r\022\016\n\006weapon\030\002 \001(\r\" \n\020CS_SEND_NICKNAME\022\014\n"
  "\004name\030\001 \001(\t\"+\n\013CS_SHOT_HIT\022\020\n\010playerId\030\001"
  " \001(\r\022\n\n\002hp\030\002 \001(\r\"f\n\020CS_THROW_GRENADE\022\014\n\004"
  "posX\030\001 \001(\r\022\014\n\004posY\030\002 \001(\r\022\014\n\004posZ\030\003 \001(\r\022\014"
  "\n\004dirX\030\004 \001(\007\022\014\n\004dirY\030\005 \001(\007\022\014\n\004dirZ\030\006 \001(\007"
  "\"6\n\007KDAInfo\022\014\n\004kill\030\001 \001(\r\022\r\n\005death\030\002 \001(\r"
  "\022\016\n\006assist\030\003 \001(\r\":\n\nPlayerInfo\022\020\n\010player"
  "Id\030\001 \001(\r\022\032\n\003kda\030\002 \001(\0132\r.game.KDAInfo\"z\n\t"
  "SC_ATTACK\022\020\n\010playerId\030\001 \001(\r\022\017\n\007normalX\030\002"
  " \001(\r\022\017\n\007normalY\030\003 \001(\r\022\017\n\007normalZ\030\004 \001(\r\022\014"
  "\n\004posX\030\005 \001(\r\022\014\n\004posY\030\006 \001(\r\022\014\n\004posZ\030\007 \001(\r"
  "\"4\n\020SC_CHANGE_WEAPON\022\020\n\010playerId\030\001 \001(\r\022\016"
  "\n\006weapon\030\002 \001(\r\"5\n\021SC_CHARACTER_DOWN\022\020\n\010p"
  "layerId\030\001 \001(\r\022\016\n\006teamID\030\002 \001(\r\"A\n\025SC_CHAR"
  "ACTER_KILL_LOG\022(\n\016playerInfoList\030\001 \003(\0132\020"
  ".game.PlayerInfo\"[\n\026SC_CREATE_MY_CHARACT"
  "ER\022\020\n\010playerId\030\001 \001(\r\022\020\n\010posIndex\030\002 \001(\r\022\r"
  "\n\005maxHP\030\003 \001(\r\022\016\n\006teamID\030\004 \001(\r\"\253\001\n\031SC_CRE"
  "ATE_OTHER_CHARACTER\022\020\n\010playerId\030\001 \001(\r\022\020\n"
  "\010posIndex\030\002 \001(\r\022\r\n\005maxHP\030\003 \001(\r\022\r\n\005curHP\030"
  "\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\036\n\007kdaInfo\030\006 \001(\0132\r.g"
  "ame.KDAInfo\022\016\n\006weapon\030\007 \001(\r\022\016\n\006teamID\030\010 "
  "\001(\r\"F\n\032SC_GRENADE_EXPLOSITION_POS\022\014\n\004pos"
  "X\030\001 \001(\r\022\014\n\004posY\030\002 \001(\r\022\014\n\004posZ\030\003 \001(\r\"5\n\021S"
  "C_ITEM_PICK_FAIL\022\020\n\010playerId\030\001 \001(\r\022\016\n\006it"
  "emId\030\002 \001(\r\"8\n\024SC_ITEM_PICK_SUCCESS\022\020\n\010pl"
  "ayerId\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\r\"I\n\017SC_ITEM_"
  "SPAWNED\022\016\n\006itemId\030\001 \001(\r\022\020\n\010itemType\030\002 \001("
  "\r\022\024\n\014itemPosIndex\030\003 \001(\r\"\220\001\n\014SC_KEY_INPUT"
  "\022\020\n\010playerId\030\001 \001(\r\022\014\n\004keyW\030\002 \001(\r\022\014\n\004keyA"
  "\030\003 \001(\r\022\014\n\004keyS\030\004 \001(\r\022\014\n\004keyD\030\005 \001(\r\022\023\n\013ro"
  "tateAxisX\030\006 \001(\007\022\023\n\013rotateAxisY\030\007 \001(\007\022\014\n\004"
  "Jump\030\010 \001(\r\" \n\014SC_ON_ACCEPT\022\020\n\010playerId\030\001"
  " \001(\r\"@\n\024SC_POS_INTERPOLATION\022\014\n\004posX\030\001 \001"
  "(\r\022\014\n\004posY\030\002 \001(\r\022\014\n\004posZ\030\003 \001(\r\"+\n\013SC_SHO"
  "T_HIT\022\020\n\010playerId\030\001 \001(\r\022\n\n\002hp\030\002 \001(\r\"f\n\020S"
  "C_THROW_GRENADE\022\014\n\004posX\030\001 \001(\r\022\014\n\004posY\030\002 "
  "\001(\r\022\014\n\004posZ\030\003 \001(\r\022\014\n\004dirX\030\004 \001(\007\022\014\n\004dirY\030"
  "\005 \001(\007\022\014\n\004dirZ\030\006 \001(\007*\243\004\n\010PacketID\022\r\n\tCS_A"
  "ttack\020\000\022\023\n\017CS_ChangeWeapon\020\001\022\034\n\030CS_Grena"
  "deExplositionPos\020\002\022\021\n\rCS_ItemPicked\020\003\022\017\n"
  "\013CS_KeyInput\020\004\022\027\n\023CS_PosInterpolation\020\005\022"
  "\025\n\021CS_RequestRestart\020\006\022\023\n\017CS_SendNicknam"
  "e\020\007\022\016\n\nCS_ShotHit\020\010\022\023\n\017CS_ThrowGrenade\020\t"
  "\022\r\n\tSC_Attack\020\n\022\023\n\017SC_ChangeWeapon\020\013\022\024\n\020"
  "SC_CharacterDown\020\014\022\027\n\023SC_CharacterKillLo"
  "g\020\r\022\030\n\024SC_CreateMyCharacter\020\016\022\033\n\027SC_Crea"
  "teOtherCharacter\020\017\022\034\n\030SC_GrenadeExplosit"
  "ionPos\020\020\022\023\n\017SC_ItemPickFail\020\021\022\026\n\022SC_Item"
  "PickSuccess\020\022\022\022\n\016SC_ItemSpawned\020\023\022\017\n\013SC_"
  "KeyInput\020\024\022\017\n\013SC_OnAccept\020\025\022\027\n\023SC_PosInt"
  "erpolation\020\026\022\016\n\nSC_ShotHit\020\027\022\023\n\017SC_Throw"
  "Grenade\020\030b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 2617, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 27,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace game {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool PacketID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CS_ATTACK::_Internal {
 public:
};

CS_ATTACK::CS_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_ATTACK)
}
CS_ATTACK::CS_ATTACK(const CS_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.battack_){}
    , decltype(_impl_.normalx_){}
    , decltype(_impl_.normaly_){}
    , decltype(_impl_.normalz_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.battack_, &from._impl_.battack_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.battack_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_ATTACK)
}

inline void CS_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.battack_){false}
    , decltype(_impl_.normalx_){0u}
    , decltype(_impl_.normaly_){0u}
    , decltype(_impl_.normalz_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_ATTACK::~CS_ATTACK() {
  // @@protoc_insertion_point(destructor:game.CS_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.battack_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.battack_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bAttack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.battack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normalX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.normalx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normalY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.normaly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normalZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.normalz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bAttack = 1;
  if (this->_internal_battack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_battack(), target);
  }

  // uint32 normalX = 2;
  if (this->_internal_normalx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_normalx(), target);
  }

  // uint32 normalY = 3;
  if (this->_internal_normaly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_normaly(), target);
  }

  // uint32 normalZ = 4;
  if (this->_internal_normalz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_normalz(), target);
  }

  // uint32 posX = 5;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_posx(), target);
  }

  // uint32 posY = 6;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_posy(), target);
  }

  // uint32 posZ = 7;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_ATTACK)
  return target;
}

size_t CS_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bAttack = 1;
  if (this->_internal_battack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 normalX = 2;
  if (this->_internal_normalx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normalx());
  }

  // uint32 normalY = 3;
  if (this->_internal_normaly() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normaly());
  }

  // uint32 normalZ = 4;
  if (this->_internal_normalz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normalz());
  }

  // uint32 posX = 5;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 6;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 7;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_ATTACK::GetClassData() const { return &_class_data_; }


void CS_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_ATTACK*>(&to_msg);
  auto& from = static_cast<const CS_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_battack() != 0) {
    _this->_internal_set_battack(from._internal_battack());
  }
  if (from._internal_normalx() != 0) {
    _this->_internal_set_normalx(from._internal_normalx());
  }
  if (from._internal_normaly() != 0) {
    _this->_internal_set_normaly(from._internal_normaly());
  }
  if (from._internal_normalz() != 0) {
    _this->_internal_set_normalz(from._internal_normalz());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_ATTACK::CopyFrom(const CS_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ATTACK::IsInitialized() const {
  return true;
}

void CS_ATTACK::InternalSwap(CS_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.posz_)
      + sizeof(CS_ATTACK::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(CS_ATTACK, _impl_.battack_)>(
          reinterpret_cast<char*>(&_impl_.battack_),
          reinterpret_cast<char*>(&other->_impl_.battack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class CS_CHANGE_WEAPON::_Internal {
 public:
};

CS_CHANGE_WEAPON::CS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_CHANGE_WEAPON)
}
CS_CHANGE_WEAPON::CS_CHANGE_WEAPON(const CS_CHANGE_WEAPON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_CHANGE_WEAPON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weapon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.weapon_ = from._impl_.weapon_;
  // @@protoc_insertion_point(copy_constructor:game.CS_CHANGE_WEAPON)
}

inline void CS_CHANGE_WEAPON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weapon_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_CHANGE_WEAPON::~CS_CHANGE_WEAPON() {
  // @@protoc_insertion_point(destructor:game.CS_CHANGE_WEAPON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_CHANGE_WEAPON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_CHANGE_WEAPON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_CHANGE_WEAPON::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weapon_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_CHANGE_WEAPON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 weapon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_CHANGE_WEAPON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 weapon = 1;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_CHANGE_WEAPON)
  return target;
}

size_t CS_CHANGE_WEAPON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_CHANGE_WEAPON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 weapon = 1;
  if (this->_internal_weapon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_CHANGE_WEAPON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_CHANGE_WEAPON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_CHANGE_WEAPON::GetClassData() const { return &_class_data_; }


void CS_CHANGE_WEAPON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_CHANGE_WEAPON*>(&to_msg);
  auto& from = static_cast<const CS_CHANGE_WEAPON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_CHANGE_WEAPON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_weapon() != 0) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_CHANGE_WEAPON::CopyFrom(const CS_CHANGE_WEAPON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_CHANGE_WEAPON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_CHANGE_WEAPON::IsInitialized() const {
  return true;
}

void CS_CHANGE_WEAPON::InternalSwap(CS_CHANGE_WEAPON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.weapon_, other->_impl_.weapon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_CHANGE_WEAPON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class CS_GRENADE_EXPLOSITION_POS::_Internal {
 public:
};

CS_GRENADE_EXPLOSITION_POS::CS_GRENADE_EXPLOSITION_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_GRENADE_EXPLOSITION_POS)
}
CS_GRENADE_EXPLOSITION_POS::CS_GRENADE_EXPLOSITION_POS(const CS_GRENADE_EXPLOSITION_POS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_GRENADE_EXPLOSITION_POS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_GRENADE_EXPLOSITION_POS)
}

inline void CS_GRENADE_EXPLOSITION_POS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_GRENADE_EXPLOSITION_POS::~CS_GRENADE_EXPLOSITION_POS() {
  // @@protoc_insertion_point(destructor:game.CS_GRENADE_EXPLOSITION_POS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_GRENADE_EXPLOSITION_POS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_GRENADE_EXPLOSITION_POS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_GRENADE_EXPLOSITION_POS::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_GRENADE_EXPLOSITION_POS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_GRENADE_EXPLOSITION_POS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_GRENADE_EXPLOSITION_POS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_GRENADE_EXPLOSITION_POS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_GRENADE_EXPLOSITION_POS)
  return target;
}

size_t CS_GRENADE_EXPLOSITION_POS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_GRENADE_EXPLOSITION_POS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_GRENADE_EXPLOSITION_POS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_GRENADE_EXPLOSITION_POS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_GRENADE_EXPLOSITION_POS::GetClassData() const { return &_class_data_; }


void CS_GRENADE_EXPLOSITION_POS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_GRENADE_EXPLOSITION_POS*>(&to_msg);
  auto& from = static_cast<const CS_GRENADE_EXPLOSITION_POS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_GRENADE_EXPLOSITION_POS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_GRENADE_EXPLOSITION_POS::CopyFrom(const CS_GRENADE_EXPLOSITION_POS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_GRENADE_EXPLOSITION_POS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_GRENADE_EXPLOSITION_POS::IsInitialized() const {
  return true;
}

void CS_GRENADE_EXPLOSITION_POS::InternalSwap(CS_GRENADE_EXPLOSITION_POS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_GRENADE_EXPLOSITION_POS, _impl_.posz_)
      + sizeof(CS_GRENADE_EXPLOSITION_POS::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(CS_GRENADE_EXPLOSITION_POS, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_GRENADE_EXPLOSITION_POS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class CS_ITEM_PICKED::_Internal {
 public:
};

CS_ITEM_PICKED::CS_ITEM_PICKED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_ITEM_PICKED)
}
CS_ITEM_PICKED::CS_ITEM_PICKED(const CS_ITEM_PICKED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_ITEM_PICKED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.itemid_ = from._impl_.itemid_;
  // @@protoc_insertion_point(copy_constructor:game.CS_ITEM_PICKED)
}

inline void CS_ITEM_PICKED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_ITEM_PICKED::~CS_ITEM_PICKED() {
  // @@protoc_insertion_point(destructor:game.CS_ITEM_PICKED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_ITEM_PICKED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_ITEM_PICKED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_ITEM_PICKED::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_ITEM_PICKED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_ITEM_PICKED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 itemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_ITEM_PICKED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_ITEM_PICKED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 itemId = 1;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_ITEM_PICKED)
  return target;
}

size_t CS_ITEM_PICKED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_ITEM_PICKED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 itemId = 1;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_ITEM_PICKED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_ITEM_PICKED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_ITEM_PICKED::GetClassData() const { return &_class_data_; }


void CS_ITEM_PICKED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_ITEM_PICKED*>(&to_msg);
  auto& from = static_cast<const CS_ITEM_PICKED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_ITEM_PICKED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_ITEM_PICKED::CopyFrom(const CS_ITEM_PICKED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_ITEM_PICKED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ITEM_PICKED::IsInitialized() const {
  return true;
}

void CS_ITEM_PICKED::InternalSwap(CS_ITEM_PICKED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.itemid_, other->_impl_.itemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_ITEM_PICKED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class CS_KEY_INPUT::_Internal {
 public:
};

CS_KEY_INPUT::CS_KEY_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_KEY_INPUT)
}
CS_KEY_INPUT::CS_KEY_INPUT(const CS_KEY_INPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_KEY_INPUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyw_){}
    , decltype(_impl_.keya_){}
    , decltype(_impl_.keys_){}
    , decltype(_impl_.keyd_){}
    , decltype(_impl_.rotateaxisx_){}
    , decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.jump_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.keyw_, &from._impl_.keyw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jump_) -
    reinterpret_cast<char*>(&_impl_.keyw_)) + sizeof(_impl_.jump_));
  // @@protoc_insertion_point(copy_constructor:game.CS_KEY_INPUT)
}

inline void CS_KEY_INPUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keyw_){0u}
    , decltype(_impl_.keya_){0u}
    , decltype(_impl_.keys_){0u}
    , decltype(_impl_.keyd_){0u}
    , decltype(_impl_.rotateaxisx_){0u}
    , decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.jump_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_KEY_INPUT::~CS_KEY_INPUT() {
  // @@protoc_insertion_point(destructor:game.CS_KEY_INPUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_KEY_INPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_KEY_INPUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_KEY_INPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_KEY_INPUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.keyw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.jump_) -
      reinterpret_cast<char*>(&_impl_.keyw_)) + sizeof(_impl_.jump_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_KEY_INPUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 keyW = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.keyw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keya_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyD = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.keyd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 rotateAxisX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.rotateaxisx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 rotateAxisY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // uint32 Jump = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.jump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_KEY_INPUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_KEY_INPUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyW = 1;
  if (this->_internal_keyw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyw(), target);
  }

  // uint32 keyA = 2;
  if (this->_internal_keya() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keya(), target);
  }

  // uint32 keyS = 3;
  if (this->_internal_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keys(), target);
  }

  // uint32 keyD = 4;
  if (this->_internal_keyd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keyd(), target);
  }

  // fixed32 rotateAxisX = 5;
  if (this->_internal_rotateaxisx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rotateaxisx(), target);
  }

  // fixed32 rotateAxisY = 6;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_rotateaxisy(), target);
  }

  // uint32 Jump = 7;
  if (this->_internal_jump() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_jump(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_KEY_INPUT)
  return target;
}

size_t CS_KEY_INPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_KEY_INPUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keyW = 1;
  if (this->_internal_keyw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyw());
  }

  // uint32 keyA = 2;
  if (this->_internal_keya() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keya());
  }

  // uint32 keyS = 3;
  if (this->_internal_keys() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keys());
  }

  // uint32 keyD = 4;
  if (this->_internal_keyd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyd());
  }

  // fixed32 rotateAxisX = 5;
  if (this->_internal_rotateaxisx() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 rotateAxisY = 6;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += 1 + 4;
  }

  // uint32 Jump = 7;
  if (this->_internal_jump() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_jump());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_KEY_INPUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_KEY_INPUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_KEY_INPUT::GetClassData() const { return &_class_data_; }


void CS_KEY_INPUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_KEY_INPUT*>(&to_msg);
  auto& from = static_cast<const CS_KEY_INPUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_KEY_INPUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_keyw() != 0) {
    _this->_internal_set_keyw(from._internal_keyw());
  }
  if (from._internal_keya() != 0) {
    _this->_internal_set_keya(from._internal_keya());
  }
  if (from._internal_keys() != 0) {
    _this->_internal_set_keys(from._internal_keys());
  }
  if (from._internal_keyd() != 0) {
    _this->_internal_set_keyd(from._internal_keyd());
  }
  if (from._internal_rotateaxisx() != 0) {
    _this->_internal_set_rotateaxisx(from._internal_rotateaxisx());
  }
  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_jump() != 0) {
    _this->_internal_set_jump(from._internal_jump());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_KEY_INPUT::CopyFrom(const CS_KEY_INPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_KEY_INPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_KEY_INPUT::IsInitialized() const {
  return true;
}

void CS_KEY_INPUT::InternalSwap(CS_KEY_INPUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_KEY_INPUT, _impl_.jump_)
      + sizeof(CS_KEY_INPUT::_impl_.jump_)
      - PROTOBUF_FIELD_OFFSET(CS_KEY_INPUT, _impl_.keyw_)>(
          reinterpret_cast<char*>(&_impl_.keyw_),
          reinterpret_cast<char*>(&other->_impl_.keyw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_KEY_INPUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class CS_POS_INTERPOLATION::_Internal {
 public:
};

CS_POS_INTERPOLATION::CS_POS_INTERPOLATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_POS_INTERPOLATION)
}
CS_POS_INTERPOLATION::CS_POS_INTERPOLATION(const CS_POS_INTERPOLATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_POS_INTERPOLATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_POS_INTERPOLATION)
}

inline void CS_POS_INTERPOLATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_POS_INTERPOLATION::~CS_POS_INTERPOLATION() {
  // @@protoc_insertion_point(destructor:game.CS_POS_INTERPOLATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_POS_INTERPOLATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_POS_INTERPOLATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_POS_INTERPOLATION::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_POS_INTERPOLATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_POS_INTERPOLATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_POS_INTERPOLATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_POS_INTERPOLATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_POS_INTERPOLATION)
  return target;
}

size_t CS_POS_INTERPOLATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_POS_INTERPOLATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_POS_INTERPOLATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_POS_INTERPOLATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_POS_INTERPOLATION::GetClassData() const { return &_class_data_; }


void CS_POS_INTERPOLATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_POS_INTERPOLATION*>(&to_msg);
  auto& from = static_cast<const CS_POS_INTERPOLATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_POS_INTERPOLATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_POS_INTERPOLATION::CopyFrom(const CS_POS_INTERPOLATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_POS_INTERPOLATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_POS_INTERPOLATION::IsInitialized() const {
  return true;
}

void CS_POS_INTERPOLATION::InternalSwap(CS_POS_INTERPOLATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_POS_INTERPOLATION, _impl_.posz_)
      + sizeof(CS_POS_INTERPOLATION::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(CS_POS_INTERPOLATION, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_POS_INTERPOLATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class CS_REQUEST_RESTART::_Internal {
 public:
};

CS_REQUEST_RESTART::CS_REQUEST_RESTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_REQUEST_RESTART)
}
CS_REQUEST_RESTART::CS_REQUEST_RESTART(const CS_REQUEST_RESTART& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_REQUEST_RESTART* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.weapon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weapon_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.weapon_));
  // @@protoc_insertion_point(copy_constructor:game.CS_REQUEST_RESTART)
}

inline void CS_REQUEST_RESTART::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.weapon_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_REQUEST_RESTART::~CS_REQUEST_RESTART() {
  // @@protoc_insertion_point(destructor:game.CS_REQUEST_RESTART)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_REQUEST_RESTART::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_REQUEST_RESTART::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_REQUEST_RESTART::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_REQUEST_RESTART)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weapon_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.weapon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_REQUEST_RESTART::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 weapon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_REQUEST_RESTART::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_REQUEST_RESTART)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 weapon = 2;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_REQUEST_RESTART)
  return target;
}

size_t CS_REQUEST_RESTART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_REQUEST_RESTART)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 weapon = 2;
  if (this->_internal_weapon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_REQUEST_RESTART::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_REQUEST_RESTART::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_REQUEST_RESTART::GetClassData() const { return &_class_data_; }


void CS_REQUEST_RESTART::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_REQUEST_RESTART*>(&to_msg);
  auto& from = static_cast<const CS_REQUEST_RESTART&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_REQUEST_RESTART)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_weapon() != 0) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_REQUEST_RESTART::CopyFrom(const CS_REQUEST_RESTART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_REQUEST_RESTART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REQUEST_RESTART::IsInitialized() const {
  return true;
}

void CS_REQUEST_RESTART::InternalSwap(CS_REQUEST_RESTART* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_REQUEST_RESTART, _impl_.weapon_)
      + sizeof(CS_REQUEST_RESTART::_impl_.weapon_)
      - PROTOBUF_FIELD_OFFSET(CS_REQUEST_RESTART, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_REQUEST_RESTART::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class CS_SEND_NICKNAME::_Internal {
 public:
};

CS_SEND_NICKNAME::CS_SEND_NICKNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_SEND_NICKNAME)
}
CS_SEND_NICKNAME::CS_SEND_NICKNAME(const CS_SEND_NICKNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_SEND_NICKNAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.CS_SEND_NICKNAME)
}

inline void CS_SEND_NICKNAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CS_SEND_NICKNAME::~CS_SEND_NICKNAME() {
  // @@protoc_insertion_point(destructor:game.CS_SEND_NICKNAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_SEND_NICKNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CS_SEND_NICKNAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_SEND_NICKNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_SEND_NICKNAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_SEND_NICKNAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.CS_SEND_NICKNAME.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_SEND_NICKNAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_SEND_NICKNAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.CS_SEND_NICKNAME.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_SEND_NICKNAME)
  return target;
}

size_t CS_SEND_NICKNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_SEND_NICKNAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_SEND_NICKNAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_SEND_NICKNAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_SEND_NICKNAME::GetClassData() const { return &_class_data_; }


void CS_SEND_NICKNAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_SEND_NICKNAME*>(&to_msg);
  auto& from = static_cast<const CS_SEND_NICKNAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_SEND_NICKNAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_SEND_NICKNAME::CopyFrom(const CS_SEND_NICKNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_SEND_NICKNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SEND_NICKNAME::IsInitialized() const {
  return true;
}

void CS_SEND_NICKNAME::InternalSwap(CS_SEND_NICKNAME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SEND_NICKNAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class CS_SHOT_HIT::_Internal {
 public:
};

CS_SHOT_HIT::CS_SHOT_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_SHOT_HIT)
}
CS_SHOT_HIT::CS_SHOT_HIT(const CS_SHOT_HIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_SHOT_HIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:game.CS_SHOT_HIT)
}

inline void CS_SHOT_HIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.hp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_SHOT_HIT::~CS_SHOT_HIT() {
  // @@protoc_insertion_point(destructor:game.CS_SHOT_HIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_SHOT_HIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_SHOT_HIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_SHOT_HIT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_SHOT_HIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_SHOT_HIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_SHOT_HIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_SHOT_HIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_SHOT_HIT)
  return target;
}

size_t CS_SHOT_HIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_SHOT_HIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_SHOT_HIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_SHOT_HIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_SHOT_HIT::GetClassData() const { return &_class_data_; }


void CS_SHOT_HIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_SHOT_HIT*>(&to_msg);
  auto& from = static_cast<const CS_SHOT_HIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_SHOT_HIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_SHOT_HIT::CopyFrom(const CS_SHOT_HIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_SHOT_HIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_SHOT_HIT::IsInitialized() const {
  return true;
}

void CS_SHOT_HIT::InternalSwap(CS_SHOT_HIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_SHOT_HIT, _impl_.hp_)
      + sizeof(CS_SHOT_HIT::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(CS_SHOT_HIT, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_SHOT_HIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class CS_THROW_GRENADE::_Internal {
 public:
};

CS_THROW_GRENADE::CS_THROW_GRENADE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.CS_THROW_GRENADE)
}
CS_THROW_GRENADE::CS_THROW_GRENADE(const CS_THROW_GRENADE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CS_THROW_GRENADE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , decltype(_impl_.dirx_){}
    , decltype(_impl_.diry_){}
    , decltype(_impl_.dirz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dirz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.dirz_));
  // @@protoc_insertion_point(copy_constructor:game.CS_THROW_GRENADE)
}

inline void CS_THROW_GRENADE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , decltype(_impl_.dirx_){0u}
    , decltype(_impl_.diry_){0u}
    , decltype(_impl_.dirz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CS_THROW_GRENADE::~CS_THROW_GRENADE() {
  // @@protoc_insertion_point(destructor:game.CS_THROW_GRENADE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CS_THROW_GRENADE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CS_THROW_GRENADE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CS_THROW_GRENADE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.CS_THROW_GRENADE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dirz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.dirz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CS_THROW_GRENADE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dirX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.dirx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dirY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.diry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dirZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dirz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CS_THROW_GRENADE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.CS_THROW_GRENADE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  // fixed32 dirX = 4;
  if (this->_internal_dirx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_dirx(), target);
  }

  // fixed32 dirY = 5;
  if (this->_internal_diry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_diry(), target);
  }

  // fixed32 dirZ = 6;
  if (this->_internal_dirz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_dirz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.CS_THROW_GRENADE)
  return target;
}

size_t CS_THROW_GRENADE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.CS_THROW_GRENADE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  // fixed32 dirX = 4;
  if (this->_internal_dirx() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 dirY = 5;
  if (this->_internal_diry() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 dirZ = 6;
  if (this->_internal_dirz() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CS_THROW_GRENADE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CS_THROW_GRENADE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CS_THROW_GRENADE::GetClassData() const { return &_class_data_; }


void CS_THROW_GRENADE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CS_THROW_GRENADE*>(&to_msg);
  auto& from = static_cast<const CS_THROW_GRENADE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.CS_THROW_GRENADE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  if (from._internal_dirx() != 0) {
    _this->_internal_set_dirx(from._internal_dirx());
  }
  if (from._internal_diry() != 0) {
    _this->_internal_set_diry(from._internal_diry());
  }
  if (from._internal_dirz() != 0) {
    _this->_internal_set_dirz(from._internal_dirz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CS_THROW_GRENADE::CopyFrom(const CS_THROW_GRENADE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.CS_THROW_GRENADE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_THROW_GRENADE::IsInitialized() const {
  return true;
}

void CS_THROW_GRENADE::InternalSwap(CS_THROW_GRENADE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CS_THROW_GRENADE, _impl_.dirz_)
      + sizeof(CS_THROW_GRENADE::_impl_.dirz_)
      - PROTOBUF_FIELD_OFFSET(CS_THROW_GRENADE, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CS_THROW_GRENADE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class KDAInfo::_Internal {
 public:
};

KDAInfo::KDAInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.KDAInfo)
}
KDAInfo::KDAInfo(const KDAInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KDAInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kill_){}
    , decltype(_impl_.death_){}
    , decltype(_impl_.assist_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kill_, &from._impl_.kill_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.assist_) -
    reinterpret_cast<char*>(&_impl_.kill_)) + sizeof(_impl_.assist_));
  // @@protoc_insertion_point(copy_constructor:game.KDAInfo)
}

inline void KDAInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kill_){0u}
    , decltype(_impl_.death_){0u}
    , decltype(_impl_.assist_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KDAInfo::~KDAInfo() {
  // @@protoc_insertion_point(destructor:game.KDAInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KDAInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KDAInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KDAInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.KDAInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.kill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.assist_) -
      reinterpret_cast<char*>(&_impl_.kill_)) + sizeof(_impl_.assist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KDAInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 kill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 death = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 assist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KDAInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.KDAInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill = 1;
  if (this->_internal_kill() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kill(), target);
  }

  // uint32 death = 2;
  if (this->_internal_death() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_death(), target);
  }

  // uint32 assist = 3;
  if (this->_internal_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_assist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.KDAInfo)
  return target;
}

size_t KDAInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.KDAInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 kill = 1;
  if (this->_internal_kill() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kill());
  }

  // uint32 death = 2;
  if (this->_internal_death() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_death());
  }

  // uint32 assist = 3;
  if (this->_internal_assist() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assist());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KDAInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KDAInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KDAInfo::GetClassData() const { return &_class_data_; }


void KDAInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KDAInfo*>(&to_msg);
  auto& from = static_cast<const KDAInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.KDAInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_kill() != 0) {
    _this->_internal_set_kill(from._internal_kill());
  }
  if (from._internal_death() != 0) {
    _this->_internal_set_death(from._internal_death());
  }
  if (from._internal_assist() != 0) {
    _this->_internal_set_assist(from._internal_assist());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KDAInfo::CopyFrom(const KDAInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.KDAInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KDAInfo::IsInitialized() const {
  return true;
}

void KDAInfo::InternalSwap(KDAInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KDAInfo, _impl_.assist_)
      + sizeof(KDAInfo::_impl_.assist_)
      - PROTOBUF_FIELD_OFFSET(KDAInfo, _impl_.kill_)>(
          reinterpret_cast<char*>(&_impl_.kill_),
          reinterpret_cast<char*>(&other->_impl_.kill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KDAInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::game::KDAInfo& kda(const PlayerInfo* msg);
};

const ::game::KDAInfo&
PlayerInfo::_Internal::kda(const PlayerInfo* msg) {
  return *msg->_impl_.kda_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kda_){nullptr}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kda()) {
    _this->_impl_.kda_ = new ::game::KDAInfo(*from._impl_.kda_);
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:game.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kda_){nullptr}
    , decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:game.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kda_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.kda_ != nullptr) {
    delete _impl_.kda_;
  }
  _impl_.kda_ = nullptr;
  _impl_.playerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.KDAInfo kda = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kda(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .game.KDAInfo kda = 2;
  if (this->_internal_has_kda()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::kda(this),
        _Internal::kda(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.KDAInfo kda = 2;
  if (this->_internal_has_kda()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kda_);
  }

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kda()) {
    _this->_internal_mutable_kda()->::game::KDAInfo::MergeFrom(
        from._internal_kda());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.playerid_)
      + sizeof(PlayerInfo::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.kda_)>(
          reinterpret_cast<char*>(&_impl_.kda_),
          reinterpret_cast<char*>(&other->_impl_.kda_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class SC_ATTACK::_Internal {
 public:
};

SC_ATTACK::SC_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ATTACK)
}
SC_ATTACK::SC_ATTACK(const SC_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.normalx_){}
    , decltype(_impl_.normaly_){}
    , decltype(_impl_.normalz_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_ATTACK)
}

inline void SC_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.normalx_){0u}
    , decltype(_impl_.normaly_){0u}
    , decltype(_impl_.normalz_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ATTACK::~SC_ATTACK() {
  // @@protoc_insertion_point(destructor:game.SC_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normalX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.normalx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normalY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.normaly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 normalZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.normalz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 normalX = 2;
  if (this->_internal_normalx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_normalx(), target);
  }

  // uint32 normalY = 3;
  if (this->_internal_normaly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_normaly(), target);
  }

  // uint32 normalZ = 4;
  if (this->_internal_normalz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_normalz(), target);
  }

  // uint32 posX = 5;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_posx(), target);
  }

  // uint32 posY = 6;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_posy(), target);
  }

  // uint32 posZ = 7;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ATTACK)
  return target;
}

size_t SC_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 normalX = 2;
  if (this->_internal_normalx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normalx());
  }

  // uint32 normalY = 3;
  if (this->_internal_normaly() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normaly());
  }

  // uint32 normalZ = 4;
  if (this->_internal_normalz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normalz());
  }

  // uint32 posX = 5;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 6;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 7;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ATTACK::GetClassData() const { return &_class_data_; }


void SC_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ATTACK*>(&to_msg);
  auto& from = static_cast<const SC_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_normalx() != 0) {
    _this->_internal_set_normalx(from._internal_normalx());
  }
  if (from._internal_normaly() != 0) {
    _this->_internal_set_normaly(from._internal_normaly());
  }
  if (from._internal_normalz() != 0) {
    _this->_internal_set_normalz(from._internal_normalz());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ATTACK::CopyFrom(const SC_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ATTACK::IsInitialized() const {
  return true;
}

void SC_ATTACK::InternalSwap(SC_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ATTACK, _impl_.posz_)
      + sizeof(SC_ATTACK::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_ATTACK, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class SC_CHANGE_WEAPON::_Internal {
 public:
};

SC_CHANGE_WEAPON::SC_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CHANGE_WEAPON)
}
SC_CHANGE_WEAPON::SC_CHANGE_WEAPON(const SC_CHANGE_WEAPON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CHANGE_WEAPON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.weapon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weapon_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.weapon_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CHANGE_WEAPON)
}

inline void SC_CHANGE_WEAPON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.weapon_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CHANGE_WEAPON::~SC_CHANGE_WEAPON() {
  // @@protoc_insertion_point(destructor:game.SC_CHANGE_WEAPON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CHANGE_WEAPON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_CHANGE_WEAPON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CHANGE_WEAPON::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weapon_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.weapon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CHANGE_WEAPON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 weapon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CHANGE_WEAPON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 weapon = 2;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weapon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CHANGE_WEAPON)
  return target;
}

size_t SC_CHANGE_WEAPON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CHANGE_WEAPON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 weapon = 2;
  if (this->_internal_weapon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CHANGE_WEAPON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CHANGE_WEAPON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CHANGE_WEAPON::GetClassData() const { return &_class_data_; }


void SC_CHANGE_WEAPON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CHANGE_WEAPON*>(&to_msg);
  auto& from = static_cast<const SC_CHANGE_WEAPON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CHANGE_WEAPON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_weapon() != 0) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CHANGE_WEAPON::CopyFrom(const SC_CHANGE_WEAPON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CHANGE_WEAPON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CHANGE_WEAPON::IsInitialized() const {
  return true;
}

void SC_CHANGE_WEAPON::InternalSwap(SC_CHANGE_WEAPON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CHANGE_WEAPON, _impl_.weapon_)
      + sizeof(SC_CHANGE_WEAPON::_impl_.weapon_)
      - PROTOBUF_FIELD_OFFSET(SC_CHANGE_WEAPON, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CHANGE_WEAPON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class SC_CHARACTER_DOWN::_Internal {
 public:
};

SC_CHARACTER_DOWN::SC_CHARACTER_DOWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CHARACTER_DOWN)
}
SC_CHARACTER_DOWN::SC_CHARACTER_DOWN(const SC_CHARACTER_DOWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CHARACTER_DOWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.teamid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CHARACTER_DOWN)
}

inline void SC_CHARACTER_DOWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.teamid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CHARACTER_DOWN::~SC_CHARACTER_DOWN() {
  // @@protoc_insertion_point(destructor:game.SC_CHARACTER_DOWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CHARACTER_DOWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_CHARACTER_DOWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CHARACTER_DOWN::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CHARACTER_DOWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamid_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.teamid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CHARACTER_DOWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teamID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CHARACTER_DOWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CHARACTER_DOWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 teamID = 2;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CHARACTER_DOWN)
  return target;
}

size_t SC_CHARACTER_DOWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CHARACTER_DOWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 teamID = 2;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CHARACTER_DOWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CHARACTER_DOWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CHARACTER_DOWN::GetClassData() const { return &_class_data_; }


void SC_CHARACTER_DOWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CHARACTER_DOWN*>(&to_msg);
  auto& from = static_cast<const SC_CHARACTER_DOWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CHARACTER_DOWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CHARACTER_DOWN::CopyFrom(const SC_CHARACTER_DOWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CHARACTER_DOWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CHARACTER_DOWN::IsInitialized() const {
  return true;
}

void SC_CHARACTER_DOWN::InternalSwap(SC_CHARACTER_DOWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CHARACTER_DOWN, _impl_.teamid_)
      + sizeof(SC_CHARACTER_DOWN::_impl_.teamid_)
      - PROTOBUF_FIELD_OFFSET(SC_CHARACTER_DOWN, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CHARACTER_DOWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class SC_CHARACTER_KILL_LOG::_Internal {
 public:
};

SC_CHARACTER_KILL_LOG::SC_CHARACTER_KILL_LOG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CHARACTER_KILL_LOG)
}
SC_CHARACTER_KILL_LOG::SC_CHARACTER_KILL_LOG(const SC_CHARACTER_KILL_LOG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CHARACTER_KILL_LOG* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfolist_){from._impl_.playerinfolist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.SC_CHARACTER_KILL_LOG)
}

inline void SC_CHARACTER_KILL_LOG::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfolist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CHARACTER_KILL_LOG::~SC_CHARACTER_KILL_LOG() {
  // @@protoc_insertion_point(destructor:game.SC_CHARACTER_KILL_LOG)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CHARACTER_KILL_LOG::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerinfolist_.~RepeatedPtrField();
}

void SC_CHARACTER_KILL_LOG::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CHARACTER_KILL_LOG::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CHARACTER_KILL_LOG)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerinfolist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CHARACTER_KILL_LOG::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.PlayerInfo playerInfoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CHARACTER_KILL_LOG::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CHARACTER_KILL_LOG)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.PlayerInfo playerInfoList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerinfolist_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerinfolist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CHARACTER_KILL_LOG)
  return target;
}

size_t SC_CHARACTER_KILL_LOG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CHARACTER_KILL_LOG)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.PlayerInfo playerInfoList = 1;
  total_size += 1UL * this->_internal_playerinfolist_size();
  for (const auto& msg : this->_impl_.playerinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CHARACTER_KILL_LOG::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CHARACTER_KILL_LOG::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CHARACTER_KILL_LOG::GetClassData() const { return &_class_data_; }


void SC_CHARACTER_KILL_LOG::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CHARACTER_KILL_LOG*>(&to_msg);
  auto& from = static_cast<const SC_CHARACTER_KILL_LOG&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CHARACTER_KILL_LOG)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerinfolist_.MergeFrom(from._impl_.playerinfolist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CHARACTER_KILL_LOG::CopyFrom(const SC_CHARACTER_KILL_LOG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CHARACTER_KILL_LOG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CHARACTER_KILL_LOG::IsInitialized() const {
  return true;
}

void SC_CHARACTER_KILL_LOG::InternalSwap(SC_CHARACTER_KILL_LOG* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playerinfolist_.InternalSwap(&other->_impl_.playerinfolist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CHARACTER_KILL_LOG::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class SC_CREATE_MY_CHARACTER::_Internal {
 public:
};

SC_CREATE_MY_CHARACTER::SC_CREATE_MY_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CREATE_MY_CHARACTER)
}
SC_CREATE_MY_CHARACTER::SC_CREATE_MY_CHARACTER(const SC_CREATE_MY_CHARACTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CREATE_MY_CHARACTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.posindex_){}
    , decltype(_impl_.maxhp_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.teamid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CREATE_MY_CHARACTER)
}

inline void SC_CREATE_MY_CHARACTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.posindex_){0u}
    , decltype(_impl_.maxhp_){0u}
    , decltype(_impl_.teamid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_CREATE_MY_CHARACTER::~SC_CREATE_MY_CHARACTER() {
  // @@protoc_insertion_point(destructor:game.SC_CREATE_MY_CHARACTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CREATE_MY_CHARACTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_CREATE_MY_CHARACTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CREATE_MY_CHARACTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CREATE_MY_CHARACTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamid_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.teamid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CREATE_MY_CHARACTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teamID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CREATE_MY_CHARACTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CREATE_MY_CHARACTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 posIndex = 2;
  if (this->_internal_posindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posindex(), target);
  }

  // uint32 maxHP = 3;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // uint32 teamID = 4;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CREATE_MY_CHARACTER)
  return target;
}

size_t SC_CREATE_MY_CHARACTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CREATE_MY_CHARACTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 posIndex = 2;
  if (this->_internal_posindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posindex());
  }

  // uint32 maxHP = 3;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 teamID = 4;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CREATE_MY_CHARACTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CREATE_MY_CHARACTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CREATE_MY_CHARACTER::GetClassData() const { return &_class_data_; }


void SC_CREATE_MY_CHARACTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CREATE_MY_CHARACTER*>(&to_msg);
  auto& from = static_cast<const SC_CREATE_MY_CHARACTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CREATE_MY_CHARACTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_posindex() != 0) {
    _this->_internal_set_posindex(from._internal_posindex());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CREATE_MY_CHARACTER::CopyFrom(const SC_CREATE_MY_CHARACTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CREATE_MY_CHARACTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CREATE_MY_CHARACTER::IsInitialized() const {
  return true;
}

void SC_CREATE_MY_CHARACTER::InternalSwap(SC_CREATE_MY_CHARACTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CREATE_MY_CHARACTER, _impl_.teamid_)
      + sizeof(SC_CREATE_MY_CHARACTER::_impl_.teamid_)
      - PROTOBUF_FIELD_OFFSET(SC_CREATE_MY_CHARACTER, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CREATE_MY_CHARACTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class SC_CREATE_OTHER_CHARACTER::_Internal {
 public:
  static const ::game::KDAInfo& kdainfo(const SC_CREATE_OTHER_CHARACTER* msg);
};

const ::game::KDAInfo&
SC_CREATE_OTHER_CHARACTER::_Internal::kdainfo(const SC_CREATE_OTHER_CHARACTER* msg) {
  return *msg->_impl_.kdainfo_;
}
SC_CREATE_OTHER_CHARACTER::SC_CREATE_OTHER_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_CREATE_OTHER_CHARACTER)
}
SC_CREATE_OTHER_CHARACTER::SC_CREATE_OTHER_CHARACTER(const SC_CREATE_OTHER_CHARACTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_CREATE_OTHER_CHARACTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.kdainfo_){nullptr}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.posindex_){}
    , decltype(_impl_.maxhp_){}
    , decltype(_impl_.curhp_){}
    , decltype(_impl_.weapon_){}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_kdainfo()) {
    _this->_impl_.kdainfo_ = new ::game::KDAInfo(*from._impl_.kdainfo_);
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teamid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.teamid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_CREATE_OTHER_CHARACTER)
}

inline void SC_CREATE_OTHER_CHARACTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.kdainfo_){nullptr}
    , decltype(_impl_.playerid_){0u}
    , decltype(_impl_.posindex_){0u}
    , decltype(_impl_.maxhp_){0u}
    , decltype(_impl_.curhp_){0u}
    , decltype(_impl_.weapon_){0u}
    , decltype(_impl_.teamid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SC_CREATE_OTHER_CHARACTER::~SC_CREATE_OTHER_CHARACTER() {
  // @@protoc_insertion_point(destructor:game.SC_CREATE_OTHER_CHARACTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_CREATE_OTHER_CHARACTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.kdainfo_;
}

void SC_CREATE_OTHER_CHARACTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_CREATE_OTHER_CHARACTER::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_CREATE_OTHER_CHARACTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.kdainfo_ != nullptr) {
    delete _impl_.kdainfo_;
  }
  _impl_.kdainfo_ = nullptr;
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teamid_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.teamid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_CREATE_OTHER_CHARACTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxHP = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 curHP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.curhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.SC_CREATE_OTHER_CHARACTER.name"));
        } else
          goto handle_unusual;
        continue;
      // .game.KDAInfo kdaInfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kdainfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 weapon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 teamID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_CREATE_OTHER_CHARACTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_CREATE_OTHER_CHARACTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 posIndex = 2;
  if (this->_internal_posindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posindex(), target);
  }

  // uint32 maxHP = 3;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // uint32 curHP = 4;
  if (this->_internal_curhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curhp(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.SC_CREATE_OTHER_CHARACTER.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // .game.KDAInfo kdaInfo = 6;
  if (this->_internal_has_kdainfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::kdainfo(this),
        _Internal::kdainfo(this).GetCachedSize(), target, stream);
  }

  // uint32 weapon = 7;
  if (this->_internal_weapon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_weapon(), target);
  }

  // uint32 teamID = 8;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_CREATE_OTHER_CHARACTER)
  return target;
}

size_t SC_CREATE_OTHER_CHARACTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_CREATE_OTHER_CHARACTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .game.KDAInfo kdaInfo = 6;
  if (this->_internal_has_kdainfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kdainfo_);
  }

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 posIndex = 2;
  if (this->_internal_posindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posindex());
  }

  // uint32 maxHP = 3;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 curHP = 4;
  if (this->_internal_curhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_curhp());
  }

  // uint32 weapon = 7;
  if (this->_internal_weapon() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weapon());
  }

  // uint32 teamID = 8;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_CREATE_OTHER_CHARACTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_CREATE_OTHER_CHARACTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_CREATE_OTHER_CHARACTER::GetClassData() const { return &_class_data_; }


void SC_CREATE_OTHER_CHARACTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_CREATE_OTHER_CHARACTER*>(&to_msg);
  auto& from = static_cast<const SC_CREATE_OTHER_CHARACTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_CREATE_OTHER_CHARACTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_kdainfo()) {
    _this->_internal_mutable_kdainfo()->::game::KDAInfo::MergeFrom(
        from._internal_kdainfo());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_posindex() != 0) {
    _this->_internal_set_posindex(from._internal_posindex());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_curhp() != 0) {
    _this->_internal_set_curhp(from._internal_curhp());
  }
  if (from._internal_weapon() != 0) {
    _this->_internal_set_weapon(from._internal_weapon());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_CREATE_OTHER_CHARACTER::CopyFrom(const SC_CREATE_OTHER_CHARACTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_CREATE_OTHER_CHARACTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_CREATE_OTHER_CHARACTER::IsInitialized() const {
  return true;
}

void SC_CREATE_OTHER_CHARACTER::InternalSwap(SC_CREATE_OTHER_CHARACTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_CREATE_OTHER_CHARACTER, _impl_.teamid_)
      + sizeof(SC_CREATE_OTHER_CHARACTER::_impl_.teamid_)
      - PROTOBUF_FIELD_OFFSET(SC_CREATE_OTHER_CHARACTER, _impl_.kdainfo_)>(
          reinterpret_cast<char*>(&_impl_.kdainfo_),
          reinterpret_cast<char*>(&other->_impl_.kdainfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_CREATE_OTHER_CHARACTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class SC_GRENADE_EXPLOSITION_POS::_Internal {
 public:
};

SC_GRENADE_EXPLOSITION_POS::SC_GRENADE_EXPLOSITION_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_GRENADE_EXPLOSITION_POS)
}
SC_GRENADE_EXPLOSITION_POS::SC_GRENADE_EXPLOSITION_POS(const SC_GRENADE_EXPLOSITION_POS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_GRENADE_EXPLOSITION_POS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_GRENADE_EXPLOSITION_POS)
}

inline void SC_GRENADE_EXPLOSITION_POS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_GRENADE_EXPLOSITION_POS::~SC_GRENADE_EXPLOSITION_POS() {
  // @@protoc_insertion_point(destructor:game.SC_GRENADE_EXPLOSITION_POS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_GRENADE_EXPLOSITION_POS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_GRENADE_EXPLOSITION_POS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_GRENADE_EXPLOSITION_POS::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_GRENADE_EXPLOSITION_POS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_GRENADE_EXPLOSITION_POS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_GRENADE_EXPLOSITION_POS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_GRENADE_EXPLOSITION_POS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_GRENADE_EXPLOSITION_POS)
  return target;
}

size_t SC_GRENADE_EXPLOSITION_POS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_GRENADE_EXPLOSITION_POS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_GRENADE_EXPLOSITION_POS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_GRENADE_EXPLOSITION_POS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_GRENADE_EXPLOSITION_POS::GetClassData() const { return &_class_data_; }


void SC_GRENADE_EXPLOSITION_POS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_GRENADE_EXPLOSITION_POS*>(&to_msg);
  auto& from = static_cast<const SC_GRENADE_EXPLOSITION_POS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_GRENADE_EXPLOSITION_POS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_GRENADE_EXPLOSITION_POS::CopyFrom(const SC_GRENADE_EXPLOSITION_POS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_GRENADE_EXPLOSITION_POS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_GRENADE_EXPLOSITION_POS::IsInitialized() const {
  return true;
}

void SC_GRENADE_EXPLOSITION_POS::InternalSwap(SC_GRENADE_EXPLOSITION_POS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_GRENADE_EXPLOSITION_POS, _impl_.posz_)
      + sizeof(SC_GRENADE_EXPLOSITION_POS::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_GRENADE_EXPLOSITION_POS, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_GRENADE_EXPLOSITION_POS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class SC_ITEM_PICK_FAIL::_Internal {
 public:
};

SC_ITEM_PICK_FAIL::SC_ITEM_PICK_FAIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ITEM_PICK_FAIL)
}
SC_ITEM_PICK_FAIL::SC_ITEM_PICK_FAIL(const SC_ITEM_PICK_FAIL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ITEM_PICK_FAIL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.itemid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.itemid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_ITEM_PICK_FAIL)
}

inline void SC_ITEM_PICK_FAIL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.itemid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ITEM_PICK_FAIL::~SC_ITEM_PICK_FAIL() {
  // @@protoc_insertion_point(destructor:game.SC_ITEM_PICK_FAIL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ITEM_PICK_FAIL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_ITEM_PICK_FAIL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ITEM_PICK_FAIL::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ITEM_PICK_FAIL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemid_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.itemid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ITEM_PICK_FAIL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ITEM_PICK_FAIL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ITEM_PICK_FAIL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 itemId = 2;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ITEM_PICK_FAIL)
  return target;
}

size_t SC_ITEM_PICK_FAIL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ITEM_PICK_FAIL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 itemId = 2;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ITEM_PICK_FAIL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ITEM_PICK_FAIL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ITEM_PICK_FAIL::GetClassData() const { return &_class_data_; }


void SC_ITEM_PICK_FAIL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ITEM_PICK_FAIL*>(&to_msg);
  auto& from = static_cast<const SC_ITEM_PICK_FAIL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ITEM_PICK_FAIL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ITEM_PICK_FAIL::CopyFrom(const SC_ITEM_PICK_FAIL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ITEM_PICK_FAIL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_PICK_FAIL::IsInitialized() const {
  return true;
}

void SC_ITEM_PICK_FAIL::InternalSwap(SC_ITEM_PICK_FAIL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ITEM_PICK_FAIL, _impl_.itemid_)
      + sizeof(SC_ITEM_PICK_FAIL::_impl_.itemid_)
      - PROTOBUF_FIELD_OFFSET(SC_ITEM_PICK_FAIL, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_PICK_FAIL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class SC_ITEM_PICK_SUCCESS::_Internal {
 public:
};

SC_ITEM_PICK_SUCCESS::SC_ITEM_PICK_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ITEM_PICK_SUCCESS)
}
SC_ITEM_PICK_SUCCESS::SC_ITEM_PICK_SUCCESS(const SC_ITEM_PICK_SUCCESS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ITEM_PICK_SUCCESS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.itemid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.itemid_));
  // @@protoc_insertion_point(copy_constructor:game.SC_ITEM_PICK_SUCCESS)
}

inline void SC_ITEM_PICK_SUCCESS::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.itemid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ITEM_PICK_SUCCESS::~SC_ITEM_PICK_SUCCESS() {
  // @@protoc_insertion_point(destructor:game.SC_ITEM_PICK_SUCCESS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ITEM_PICK_SUCCESS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_ITEM_PICK_SUCCESS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ITEM_PICK_SUCCESS::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ITEM_PICK_SUCCESS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemid_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.itemid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ITEM_PICK_SUCCESS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ITEM_PICK_SUCCESS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ITEM_PICK_SUCCESS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 itemId = 2;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ITEM_PICK_SUCCESS)
  return target;
}

size_t SC_ITEM_PICK_SUCCESS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ITEM_PICK_SUCCESS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 itemId = 2;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ITEM_PICK_SUCCESS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ITEM_PICK_SUCCESS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ITEM_PICK_SUCCESS::GetClassData() const { return &_class_data_; }


void SC_ITEM_PICK_SUCCESS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ITEM_PICK_SUCCESS*>(&to_msg);
  auto& from = static_cast<const SC_ITEM_PICK_SUCCESS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ITEM_PICK_SUCCESS)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ITEM_PICK_SUCCESS::CopyFrom(const SC_ITEM_PICK_SUCCESS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ITEM_PICK_SUCCESS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_PICK_SUCCESS::IsInitialized() const {
  return true;
}

void SC_ITEM_PICK_SUCCESS::InternalSwap(SC_ITEM_PICK_SUCCESS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ITEM_PICK_SUCCESS, _impl_.itemid_)
      + sizeof(SC_ITEM_PICK_SUCCESS::_impl_.itemid_)
      - PROTOBUF_FIELD_OFFSET(SC_ITEM_PICK_SUCCESS, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_PICK_SUCCESS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class SC_ITEM_SPAWNED::_Internal {
 public:
};

SC_ITEM_SPAWNED::SC_ITEM_SPAWNED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ITEM_SPAWNED)
}
SC_ITEM_SPAWNED::SC_ITEM_SPAWNED(const SC_ITEM_SPAWNED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ITEM_SPAWNED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){}
    , decltype(_impl_.itemtype_){}
    , decltype(_impl_.itemposindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemposindex_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.itemposindex_));
  // @@protoc_insertion_point(copy_constructor:game.SC_ITEM_SPAWNED)
}

inline void SC_ITEM_SPAWNED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){0u}
    , decltype(_impl_.itemtype_){0u}
    , decltype(_impl_.itemposindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ITEM_SPAWNED::~SC_ITEM_SPAWNED() {
  // @@protoc_insertion_point(destructor:game.SC_ITEM_SPAWNED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ITEM_SPAWNED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_ITEM_SPAWNED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ITEM_SPAWNED::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ITEM_SPAWNED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemposindex_) -
      reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.itemposindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ITEM_SPAWNED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 itemId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 itemPosIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.itemposindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ITEM_SPAWNED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ITEM_SPAWNED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 itemId = 1;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_itemid(), target);
  }

  // uint32 itemType = 2;
  if (this->_internal_itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemtype(), target);
  }

  // uint32 itemPosIndex = 3;
  if (this->_internal_itemposindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_itemposindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ITEM_SPAWNED)
  return target;
}

size_t SC_ITEM_SPAWNED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ITEM_SPAWNED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 itemId = 1;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
  }

  // uint32 itemType = 2;
  if (this->_internal_itemtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemtype());
  }

  // uint32 itemPosIndex = 3;
  if (this->_internal_itemposindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemposindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ITEM_SPAWNED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ITEM_SPAWNED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ITEM_SPAWNED::GetClassData() const { return &_class_data_; }


void SC_ITEM_SPAWNED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ITEM_SPAWNED*>(&to_msg);
  auto& from = static_cast<const SC_ITEM_SPAWNED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ITEM_SPAWNED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_itemtype() != 0) {
    _this->_internal_set_itemtype(from._internal_itemtype());
  }
  if (from._internal_itemposindex() != 0) {
    _this->_internal_set_itemposindex(from._internal_itemposindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ITEM_SPAWNED::CopyFrom(const SC_ITEM_SPAWNED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ITEM_SPAWNED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ITEM_SPAWNED::IsInitialized() const {
  return true;
}

void SC_ITEM_SPAWNED::InternalSwap(SC_ITEM_SPAWNED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_ITEM_SPAWNED, _impl_.itemposindex_)
      + sizeof(SC_ITEM_SPAWNED::_impl_.itemposindex_)
      - PROTOBUF_FIELD_OFFSET(SC_ITEM_SPAWNED, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ITEM_SPAWNED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class SC_KEY_INPUT::_Internal {
 public:
};

SC_KEY_INPUT::SC_KEY_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_KEY_INPUT)
}
SC_KEY_INPUT::SC_KEY_INPUT(const SC_KEY_INPUT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_KEY_INPUT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.keyw_){}
    , decltype(_impl_.keya_){}
    , decltype(_impl_.keys_){}
    , decltype(_impl_.keyd_){}
    , decltype(_impl_.rotateaxisx_){}
    , decltype(_impl_.rotateaxisy_){}
    , decltype(_impl_.jump_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.jump_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.jump_));
  // @@protoc_insertion_point(copy_constructor:game.SC_KEY_INPUT)
}

inline void SC_KEY_INPUT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.keyw_){0u}
    , decltype(_impl_.keya_){0u}
    , decltype(_impl_.keys_){0u}
    , decltype(_impl_.keyd_){0u}
    , decltype(_impl_.rotateaxisx_){0u}
    , decltype(_impl_.rotateaxisy_){0u}
    , decltype(_impl_.jump_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_KEY_INPUT::~SC_KEY_INPUT() {
  // @@protoc_insertion_point(destructor:game.SC_KEY_INPUT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_KEY_INPUT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_KEY_INPUT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_KEY_INPUT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_KEY_INPUT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.jump_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.jump_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_KEY_INPUT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyW = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.keyw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyA = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.keya_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyS = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 keyD = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.keyd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 rotateAxisX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.rotateaxisx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 rotateAxisY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.rotateaxisy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // uint32 Jump = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.jump_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_KEY_INPUT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_KEY_INPUT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 keyW = 2;
  if (this->_internal_keyw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keyw(), target);
  }

  // uint32 keyA = 3;
  if (this->_internal_keya() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keya(), target);
  }

  // uint32 keyS = 4;
  if (this->_internal_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_keys(), target);
  }

  // uint32 keyD = 5;
  if (this->_internal_keyd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_keyd(), target);
  }

  // fixed32 rotateAxisX = 6;
  if (this->_internal_rotateaxisx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_rotateaxisx(), target);
  }

  // fixed32 rotateAxisY = 7;
  if (this->_internal_rotateaxisy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_rotateaxisy(), target);
  }

  // uint32 Jump = 8;
  if (this->_internal_jump() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_jump(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_KEY_INPUT)
  return target;
}

size_t SC_KEY_INPUT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_KEY_INPUT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 keyW = 2;
  if (this->_internal_keyw() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyw());
  }

  // uint32 keyA = 3;
  if (this->_internal_keya() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keya());
  }

  // uint32 keyS = 4;
  if (this->_internal_keys() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keys());
  }

  // uint32 keyD = 5;
  if (this->_internal_keyd() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_keyd());
  }

  // fixed32 rotateAxisX = 6;
  if (this->_internal_rotateaxisx() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 rotateAxisY = 7;
  if (this->_internal_rotateaxisy() != 0) {
    total_size += 1 + 4;
  }

  // uint32 Jump = 8;
  if (this->_internal_jump() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_jump());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_KEY_INPUT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_KEY_INPUT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_KEY_INPUT::GetClassData() const { return &_class_data_; }


void SC_KEY_INPUT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_KEY_INPUT*>(&to_msg);
  auto& from = static_cast<const SC_KEY_INPUT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_KEY_INPUT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_keyw() != 0) {
    _this->_internal_set_keyw(from._internal_keyw());
  }
  if (from._internal_keya() != 0) {
    _this->_internal_set_keya(from._internal_keya());
  }
  if (from._internal_keys() != 0) {
    _this->_internal_set_keys(from._internal_keys());
  }
  if (from._internal_keyd() != 0) {
    _this->_internal_set_keyd(from._internal_keyd());
  }
  if (from._internal_rotateaxisx() != 0) {
    _this->_internal_set_rotateaxisx(from._internal_rotateaxisx());
  }
  if (from._internal_rotateaxisy() != 0) {
    _this->_internal_set_rotateaxisy(from._internal_rotateaxisy());
  }
  if (from._internal_jump() != 0) {
    _this->_internal_set_jump(from._internal_jump());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_KEY_INPUT::CopyFrom(const SC_KEY_INPUT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_KEY_INPUT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_KEY_INPUT::IsInitialized() const {
  return true;
}

void SC_KEY_INPUT::InternalSwap(SC_KEY_INPUT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_KEY_INPUT, _impl_.jump_)
      + sizeof(SC_KEY_INPUT::_impl_.jump_)
      - PROTOBUF_FIELD_OFFSET(SC_KEY_INPUT, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_KEY_INPUT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class SC_ON_ACCEPT::_Internal {
 public:
};

SC_ON_ACCEPT::SC_ON_ACCEPT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_ON_ACCEPT)
}
SC_ON_ACCEPT::SC_ON_ACCEPT(const SC_ON_ACCEPT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_ON_ACCEPT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:game.SC_ON_ACCEPT)
}

inline void SC_ON_ACCEPT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_ON_ACCEPT::~SC_ON_ACCEPT() {
  // @@protoc_insertion_point(destructor:game.SC_ON_ACCEPT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_ON_ACCEPT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_ON_ACCEPT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_ON_ACCEPT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_ON_ACCEPT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_ON_ACCEPT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_ON_ACCEPT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_ON_ACCEPT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_ON_ACCEPT)
  return target;
}

size_t SC_ON_ACCEPT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_ON_ACCEPT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_ON_ACCEPT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_ON_ACCEPT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_ON_ACCEPT::GetClassData() const { return &_class_data_; }


void SC_ON_ACCEPT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_ON_ACCEPT*>(&to_msg);
  auto& from = static_cast<const SC_ON_ACCEPT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_ON_ACCEPT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_ON_ACCEPT::CopyFrom(const SC_ON_ACCEPT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_ON_ACCEPT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ON_ACCEPT::IsInitialized() const {
  return true;
}

void SC_ON_ACCEPT::InternalSwap(SC_ON_ACCEPT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_ON_ACCEPT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class SC_POS_INTERPOLATION::_Internal {
 public:
};

SC_POS_INTERPOLATION::SC_POS_INTERPOLATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_POS_INTERPOLATION)
}
SC_POS_INTERPOLATION::SC_POS_INTERPOLATION(const SC_POS_INTERPOLATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_POS_INTERPOLATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_POS_INTERPOLATION)
}

inline void SC_POS_INTERPOLATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_POS_INTERPOLATION::~SC_POS_INTERPOLATION() {
  // @@protoc_insertion_point(destructor:game.SC_POS_INTERPOLATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_POS_INTERPOLATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_POS_INTERPOLATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_POS_INTERPOLATION::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_POS_INTERPOLATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.posz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_POS_INTERPOLATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_POS_INTERPOLATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_POS_INTERPOLATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_POS_INTERPOLATION)
  return target;
}

size_t SC_POS_INTERPOLATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_POS_INTERPOLATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_POS_INTERPOLATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_POS_INTERPOLATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_POS_INTERPOLATION::GetClassData() const { return &_class_data_; }


void SC_POS_INTERPOLATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_POS_INTERPOLATION*>(&to_msg);
  auto& from = static_cast<const SC_POS_INTERPOLATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_POS_INTERPOLATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_POS_INTERPOLATION::CopyFrom(const SC_POS_INTERPOLATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_POS_INTERPOLATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_POS_INTERPOLATION::IsInitialized() const {
  return true;
}

void SC_POS_INTERPOLATION::InternalSwap(SC_POS_INTERPOLATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_POS_INTERPOLATION, _impl_.posz_)
      + sizeof(SC_POS_INTERPOLATION::_impl_.posz_)
      - PROTOBUF_FIELD_OFFSET(SC_POS_INTERPOLATION, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_POS_INTERPOLATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class SC_SHOT_HIT::_Internal {
 public:
};

SC_SHOT_HIT::SC_SHOT_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_SHOT_HIT)
}
SC_SHOT_HIT::SC_SHOT_HIT(const SC_SHOT_HIT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_SHOT_HIT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:game.SC_SHOT_HIT)
}

inline void SC_SHOT_HIT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.hp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_SHOT_HIT::~SC_SHOT_HIT() {
  // @@protoc_insertion_point(destructor:game.SC_SHOT_HIT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_SHOT_HIT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_SHOT_HIT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_SHOT_HIT::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_SHOT_HIT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_SHOT_HIT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_SHOT_HIT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_SHOT_HIT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_SHOT_HIT)
  return target;
}

size_t SC_SHOT_HIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_SHOT_HIT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_SHOT_HIT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_SHOT_HIT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_SHOT_HIT::GetClassData() const { return &_class_data_; }


void SC_SHOT_HIT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_SHOT_HIT*>(&to_msg);
  auto& from = static_cast<const SC_SHOT_HIT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_SHOT_HIT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_SHOT_HIT::CopyFrom(const SC_SHOT_HIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_SHOT_HIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_SHOT_HIT::IsInitialized() const {
  return true;
}

void SC_SHOT_HIT::InternalSwap(SC_SHOT_HIT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_SHOT_HIT, _impl_.hp_)
      + sizeof(SC_SHOT_HIT::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(SC_SHOT_HIT, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_SHOT_HIT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class SC_THROW_GRENADE::_Internal {
 public:
};

SC_THROW_GRENADE::SC_THROW_GRENADE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.SC_THROW_GRENADE)
}
SC_THROW_GRENADE::SC_THROW_GRENADE(const SC_THROW_GRENADE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SC_THROW_GRENADE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , decltype(_impl_.posz_){}
    , decltype(_impl_.dirx_){}
    , decltype(_impl_.diry_){}
    , decltype(_impl_.dirz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.posx_, &from._impl_.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dirz_) -
    reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.dirz_));
  // @@protoc_insertion_point(copy_constructor:game.SC_THROW_GRENADE)
}

inline void SC_THROW_GRENADE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , decltype(_impl_.posz_){0u}
    , decltype(_impl_.dirx_){0u}
    , decltype(_impl_.diry_){0u}
    , decltype(_impl_.dirz_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SC_THROW_GRENADE::~SC_THROW_GRENADE() {
  // @@protoc_insertion_point(destructor:game.SC_THROW_GRENADE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SC_THROW_GRENADE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SC_THROW_GRENADE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SC_THROW_GRENADE::Clear() {
// @@protoc_insertion_point(message_clear_start:game.SC_THROW_GRENADE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dirz_) -
      reinterpret_cast<char*>(&_impl_.posx_)) + sizeof(_impl_.dirz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SC_THROW_GRENADE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dirX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.dirx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dirY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.diry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // fixed32 dirZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dirz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SC_THROW_GRENADE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.SC_THROW_GRENADE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posx(), target);
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posy(), target);
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posz(), target);
  }

  // fixed32 dirX = 4;
  if (this->_internal_dirx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_dirx(), target);
  }

  // fixed32 dirY = 5;
  if (this->_internal_diry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_diry(), target);
  }

  // fixed32 dirZ = 6;
  if (this->_internal_dirz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_dirz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.SC_THROW_GRENADE)
  return target;
}

size_t SC_THROW_GRENADE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.SC_THROW_GRENADE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  // uint32 posZ = 3;
  if (this->_internal_posz() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posz());
  }

  // fixed32 dirX = 4;
  if (this->_internal_dirx() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 dirY = 5;
  if (this->_internal_diry() != 0) {
    total_size += 1 + 4;
  }

  // fixed32 dirZ = 6;
  if (this->_internal_dirz() != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SC_THROW_GRENADE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SC_THROW_GRENADE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SC_THROW_GRENADE::GetClassData() const { return &_class_data_; }


void SC_THROW_GRENADE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SC_THROW_GRENADE*>(&to_msg);
  auto& from = static_cast<const SC_THROW_GRENADE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.SC_THROW_GRENADE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  if (from._internal_posz() != 0) {
    _this->_internal_set_posz(from._internal_posz());
  }
  if (from._internal_dirx() != 0) {
    _this->_internal_set_dirx(from._internal_dirx());
  }
  if (from._internal_diry() != 0) {
    _this->_internal_set_diry(from._internal_diry());
  }
  if (from._internal_dirz() != 0) {
    _this->_internal_set_dirz(from._internal_dirz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SC_THROW_GRENADE::CopyFrom(const SC_THROW_GRENADE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.SC_THROW_GRENADE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_THROW_GRENADE::IsInitialized() const {
  return true;
}

void SC_THROW_GRENADE::InternalSwap(SC_THROW_GRENADE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SC_THROW_GRENADE, _impl_.dirz_)
      + sizeof(SC_THROW_GRENADE::_impl_.dirz_)
      - PROTOBUF_FIELD_OFFSET(SC_THROW_GRENADE, _impl_.posx_)>(
          reinterpret_cast<char*>(&_impl_.posx_),
          reinterpret_cast<char*>(&other->_impl_.posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SC_THROW_GRENADE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::CS_ATTACK*
Arena::CreateMaybeMessage< ::game::CS_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_CHANGE_WEAPON*
Arena::CreateMaybeMessage< ::game::CS_CHANGE_WEAPON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_CHANGE_WEAPON >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_GRENADE_EXPLOSITION_POS*
Arena::CreateMaybeMessage< ::game::CS_GRENADE_EXPLOSITION_POS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_GRENADE_EXPLOSITION_POS >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_ITEM_PICKED*
Arena::CreateMaybeMessage< ::game::CS_ITEM_PICKED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_ITEM_PICKED >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_KEY_INPUT*
Arena::CreateMaybeMessage< ::game::CS_KEY_INPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_KEY_INPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_POS_INTERPOLATION*
Arena::CreateMaybeMessage< ::game::CS_POS_INTERPOLATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_POS_INTERPOLATION >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_REQUEST_RESTART*
Arena::CreateMaybeMessage< ::game::CS_REQUEST_RESTART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_REQUEST_RESTART >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_SEND_NICKNAME*
Arena::CreateMaybeMessage< ::game::CS_SEND_NICKNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_SEND_NICKNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_SHOT_HIT*
Arena::CreateMaybeMessage< ::game::CS_SHOT_HIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_SHOT_HIT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::CS_THROW_GRENADE*
Arena::CreateMaybeMessage< ::game::CS_THROW_GRENADE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::CS_THROW_GRENADE >(arena);
}
template<> PROTOBUF_NOINLINE ::game::KDAInfo*
Arena::CreateMaybeMessage< ::game::KDAInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::KDAInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::game::PlayerInfo*
Arena::CreateMaybeMessage< ::game::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ATTACK*
Arena::CreateMaybeMessage< ::game::SC_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CHANGE_WEAPON*
Arena::CreateMaybeMessage< ::game::SC_CHANGE_WEAPON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CHANGE_WEAPON >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CHARACTER_DOWN*
Arena::CreateMaybeMessage< ::game::SC_CHARACTER_DOWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CHARACTER_DOWN >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CHARACTER_KILL_LOG*
Arena::CreateMaybeMessage< ::game::SC_CHARACTER_KILL_LOG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CHARACTER_KILL_LOG >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CREATE_MY_CHARACTER*
Arena::CreateMaybeMessage< ::game::SC_CREATE_MY_CHARACTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CREATE_MY_CHARACTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_CREATE_OTHER_CHARACTER*
Arena::CreateMaybeMessage< ::game::SC_CREATE_OTHER_CHARACTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_CREATE_OTHER_CHARACTER >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_GRENADE_EXPLOSITION_POS*
Arena::CreateMaybeMessage< ::game::SC_GRENADE_EXPLOSITION_POS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_GRENADE_EXPLOSITION_POS >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ITEM_PICK_FAIL*
Arena::CreateMaybeMessage< ::game::SC_ITEM_PICK_FAIL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ITEM_PICK_FAIL >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ITEM_PICK_SUCCESS*
Arena::CreateMaybeMessage< ::game::SC_ITEM_PICK_SUCCESS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ITEM_PICK_SUCCESS >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ITEM_SPAWNED*
Arena::CreateMaybeMessage< ::game::SC_ITEM_SPAWNED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ITEM_SPAWNED >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_KEY_INPUT*
Arena::CreateMaybeMessage< ::game::SC_KEY_INPUT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_KEY_INPUT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_ON_ACCEPT*
Arena::CreateMaybeMessage< ::game::SC_ON_ACCEPT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_ON_ACCEPT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_POS_INTERPOLATION*
Arena::CreateMaybeMessage< ::game::SC_POS_INTERPOLATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_POS_INTERPOLATION >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_SHOT_HIT*
Arena::CreateMaybeMessage< ::game::SC_SHOT_HIT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_SHOT_HIT >(arena);
}
template<> PROTOBUF_NOINLINE ::game::SC_THROW_GRENADE*
Arena::CreateMaybeMessage< ::game::SC_THROW_GRENADE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::SC_THROW_GRENADE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
