// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace game {
class CS_ATTACK;
struct CS_ATTACKDefaultTypeInternal;
extern CS_ATTACKDefaultTypeInternal _CS_ATTACK_default_instance_;
class CS_CHANGE_WEAPON;
struct CS_CHANGE_WEAPONDefaultTypeInternal;
extern CS_CHANGE_WEAPONDefaultTypeInternal _CS_CHANGE_WEAPON_default_instance_;
class CS_GRENADE_EXPLOSITION_POS;
struct CS_GRENADE_EXPLOSITION_POSDefaultTypeInternal;
extern CS_GRENADE_EXPLOSITION_POSDefaultTypeInternal _CS_GRENADE_EXPLOSITION_POS_default_instance_;
class CS_ITEM_PICKED;
struct CS_ITEM_PICKEDDefaultTypeInternal;
extern CS_ITEM_PICKEDDefaultTypeInternal _CS_ITEM_PICKED_default_instance_;
class CS_KEY_INPUT;
struct CS_KEY_INPUTDefaultTypeInternal;
extern CS_KEY_INPUTDefaultTypeInternal _CS_KEY_INPUT_default_instance_;
class CS_POS_INTERPOLATION;
struct CS_POS_INTERPOLATIONDefaultTypeInternal;
extern CS_POS_INTERPOLATIONDefaultTypeInternal _CS_POS_INTERPOLATION_default_instance_;
class CS_REQUEST_RESTART;
struct CS_REQUEST_RESTARTDefaultTypeInternal;
extern CS_REQUEST_RESTARTDefaultTypeInternal _CS_REQUEST_RESTART_default_instance_;
class CS_SEND_NICKNAME;
struct CS_SEND_NICKNAMEDefaultTypeInternal;
extern CS_SEND_NICKNAMEDefaultTypeInternal _CS_SEND_NICKNAME_default_instance_;
class CS_SHOT_HIT;
struct CS_SHOT_HITDefaultTypeInternal;
extern CS_SHOT_HITDefaultTypeInternal _CS_SHOT_HIT_default_instance_;
class CS_THROW_GRENADE;
struct CS_THROW_GRENADEDefaultTypeInternal;
extern CS_THROW_GRENADEDefaultTypeInternal _CS_THROW_GRENADE_default_instance_;
class KDAInfo;
struct KDAInfoDefaultTypeInternal;
extern KDAInfoDefaultTypeInternal _KDAInfo_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class SC_ATTACK;
struct SC_ATTACKDefaultTypeInternal;
extern SC_ATTACKDefaultTypeInternal _SC_ATTACK_default_instance_;
class SC_CHANGE_WEAPON;
struct SC_CHANGE_WEAPONDefaultTypeInternal;
extern SC_CHANGE_WEAPONDefaultTypeInternal _SC_CHANGE_WEAPON_default_instance_;
class SC_CHARACTER_DOWN;
struct SC_CHARACTER_DOWNDefaultTypeInternal;
extern SC_CHARACTER_DOWNDefaultTypeInternal _SC_CHARACTER_DOWN_default_instance_;
class SC_CHARACTER_KILL_LOG;
struct SC_CHARACTER_KILL_LOGDefaultTypeInternal;
extern SC_CHARACTER_KILL_LOGDefaultTypeInternal _SC_CHARACTER_KILL_LOG_default_instance_;
class SC_CREATE_MY_CHARACTER;
struct SC_CREATE_MY_CHARACTERDefaultTypeInternal;
extern SC_CREATE_MY_CHARACTERDefaultTypeInternal _SC_CREATE_MY_CHARACTER_default_instance_;
class SC_CREATE_OTHER_CHARACTER;
struct SC_CREATE_OTHER_CHARACTERDefaultTypeInternal;
extern SC_CREATE_OTHER_CHARACTERDefaultTypeInternal _SC_CREATE_OTHER_CHARACTER_default_instance_;
class SC_GRENADE_EXPLOSITION_POS;
struct SC_GRENADE_EXPLOSITION_POSDefaultTypeInternal;
extern SC_GRENADE_EXPLOSITION_POSDefaultTypeInternal _SC_GRENADE_EXPLOSITION_POS_default_instance_;
class SC_ITEM_PICK_FAIL;
struct SC_ITEM_PICK_FAILDefaultTypeInternal;
extern SC_ITEM_PICK_FAILDefaultTypeInternal _SC_ITEM_PICK_FAIL_default_instance_;
class SC_ITEM_PICK_SUCCESS;
struct SC_ITEM_PICK_SUCCESSDefaultTypeInternal;
extern SC_ITEM_PICK_SUCCESSDefaultTypeInternal _SC_ITEM_PICK_SUCCESS_default_instance_;
class SC_ITEM_SPAWNED;
struct SC_ITEM_SPAWNEDDefaultTypeInternal;
extern SC_ITEM_SPAWNEDDefaultTypeInternal _SC_ITEM_SPAWNED_default_instance_;
class SC_KEY_INPUT;
struct SC_KEY_INPUTDefaultTypeInternal;
extern SC_KEY_INPUTDefaultTypeInternal _SC_KEY_INPUT_default_instance_;
class SC_ON_ACCEPT;
struct SC_ON_ACCEPTDefaultTypeInternal;
extern SC_ON_ACCEPTDefaultTypeInternal _SC_ON_ACCEPT_default_instance_;
class SC_POS_INTERPOLATION;
struct SC_POS_INTERPOLATIONDefaultTypeInternal;
extern SC_POS_INTERPOLATIONDefaultTypeInternal _SC_POS_INTERPOLATION_default_instance_;
class SC_SHOT_HIT;
struct SC_SHOT_HITDefaultTypeInternal;
extern SC_SHOT_HITDefaultTypeInternal _SC_SHOT_HIT_default_instance_;
class SC_THROW_GRENADE;
struct SC_THROW_GRENADEDefaultTypeInternal;
extern SC_THROW_GRENADEDefaultTypeInternal _SC_THROW_GRENADE_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::CS_ATTACK* Arena::CreateMaybeMessage<::game::CS_ATTACK>(Arena*);
template<> ::game::CS_CHANGE_WEAPON* Arena::CreateMaybeMessage<::game::CS_CHANGE_WEAPON>(Arena*);
template<> ::game::CS_GRENADE_EXPLOSITION_POS* Arena::CreateMaybeMessage<::game::CS_GRENADE_EXPLOSITION_POS>(Arena*);
template<> ::game::CS_ITEM_PICKED* Arena::CreateMaybeMessage<::game::CS_ITEM_PICKED>(Arena*);
template<> ::game::CS_KEY_INPUT* Arena::CreateMaybeMessage<::game::CS_KEY_INPUT>(Arena*);
template<> ::game::CS_POS_INTERPOLATION* Arena::CreateMaybeMessage<::game::CS_POS_INTERPOLATION>(Arena*);
template<> ::game::CS_REQUEST_RESTART* Arena::CreateMaybeMessage<::game::CS_REQUEST_RESTART>(Arena*);
template<> ::game::CS_SEND_NICKNAME* Arena::CreateMaybeMessage<::game::CS_SEND_NICKNAME>(Arena*);
template<> ::game::CS_SHOT_HIT* Arena::CreateMaybeMessage<::game::CS_SHOT_HIT>(Arena*);
template<> ::game::CS_THROW_GRENADE* Arena::CreateMaybeMessage<::game::CS_THROW_GRENADE>(Arena*);
template<> ::game::KDAInfo* Arena::CreateMaybeMessage<::game::KDAInfo>(Arena*);
template<> ::game::PlayerInfo* Arena::CreateMaybeMessage<::game::PlayerInfo>(Arena*);
template<> ::game::SC_ATTACK* Arena::CreateMaybeMessage<::game::SC_ATTACK>(Arena*);
template<> ::game::SC_CHANGE_WEAPON* Arena::CreateMaybeMessage<::game::SC_CHANGE_WEAPON>(Arena*);
template<> ::game::SC_CHARACTER_DOWN* Arena::CreateMaybeMessage<::game::SC_CHARACTER_DOWN>(Arena*);
template<> ::game::SC_CHARACTER_KILL_LOG* Arena::CreateMaybeMessage<::game::SC_CHARACTER_KILL_LOG>(Arena*);
template<> ::game::SC_CREATE_MY_CHARACTER* Arena::CreateMaybeMessage<::game::SC_CREATE_MY_CHARACTER>(Arena*);
template<> ::game::SC_CREATE_OTHER_CHARACTER* Arena::CreateMaybeMessage<::game::SC_CREATE_OTHER_CHARACTER>(Arena*);
template<> ::game::SC_GRENADE_EXPLOSITION_POS* Arena::CreateMaybeMessage<::game::SC_GRENADE_EXPLOSITION_POS>(Arena*);
template<> ::game::SC_ITEM_PICK_FAIL* Arena::CreateMaybeMessage<::game::SC_ITEM_PICK_FAIL>(Arena*);
template<> ::game::SC_ITEM_PICK_SUCCESS* Arena::CreateMaybeMessage<::game::SC_ITEM_PICK_SUCCESS>(Arena*);
template<> ::game::SC_ITEM_SPAWNED* Arena::CreateMaybeMessage<::game::SC_ITEM_SPAWNED>(Arena*);
template<> ::game::SC_KEY_INPUT* Arena::CreateMaybeMessage<::game::SC_KEY_INPUT>(Arena*);
template<> ::game::SC_ON_ACCEPT* Arena::CreateMaybeMessage<::game::SC_ON_ACCEPT>(Arena*);
template<> ::game::SC_POS_INTERPOLATION* Arena::CreateMaybeMessage<::game::SC_POS_INTERPOLATION>(Arena*);
template<> ::game::SC_SHOT_HIT* Arena::CreateMaybeMessage<::game::SC_SHOT_HIT>(Arena*);
template<> ::game::SC_THROW_GRENADE* Arena::CreateMaybeMessage<::game::SC_THROW_GRENADE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

enum PacketID : int {
  CS_Attack = 0,
  CS_ChangeWeapon = 1,
  CS_GrenadeExplositionPos = 2,
  CS_ItemPicked = 3,
  CS_KeyInput = 4,
  CS_PosInterpolation = 5,
  CS_RequestRestart = 6,
  CS_SendNickname = 7,
  CS_ShotHit = 8,
  CS_ThrowGrenade = 9,
  SC_Attack = 10,
  SC_ChangeWeapon = 11,
  SC_CharacterDown = 12,
  SC_CharacterKillLog = 13,
  SC_CreateMyCharacter = 14,
  SC_CreateOtherCharacter = 15,
  SC_GrenadeExplositionPos = 16,
  SC_ItemPickFail = 17,
  SC_ItemPickSuccess = 18,
  SC_ItemSpawned = 19,
  SC_KeyInput = 20,
  SC_OnAccept = 21,
  SC_PosInterpolation = 22,
  SC_ShotHit = 23,
  SC_ThrowGrenade = 24,
  PacketID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PacketID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PacketID_IsValid(int value);
constexpr PacketID PacketID_MIN = CS_Attack;
constexpr PacketID PacketID_MAX = SC_ThrowGrenade;
constexpr int PacketID_ARRAYSIZE = PacketID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketID_descriptor();
template<typename T>
inline const std::string& PacketID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PacketID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PacketID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PacketID_descriptor(), enum_t_value);
}
inline bool PacketID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PacketID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PacketID>(
    PacketID_descriptor(), name, value);
}
// ===================================================================

class CS_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_ATTACK) */ {
 public:
  inline CS_ATTACK() : CS_ATTACK(nullptr) {}
  ~CS_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR CS_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_ATTACK(const CS_ATTACK& from);
  CS_ATTACK(CS_ATTACK&& from) noexcept
    : CS_ATTACK() {
    *this = ::std::move(from);
  }

  inline CS_ATTACK& operator=(const CS_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ATTACK& operator=(CS_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_ATTACK* internal_default_instance() {
    return reinterpret_cast<const CS_ATTACK*>(
               &_CS_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_ATTACK& a, CS_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_ATTACK& from) {
    CS_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_ATTACK";
  }
  protected:
  explicit CS_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBAttackFieldNumber = 1,
    kNormalXFieldNumber = 2,
    kNormalYFieldNumber = 3,
    kNormalZFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosYFieldNumber = 6,
    kPosZFieldNumber = 7,
  };
  // bool bAttack = 1;
  void clear_battack();
  bool battack() const;
  void set_battack(bool value);
  private:
  bool _internal_battack() const;
  void _internal_set_battack(bool value);
  public:

  // uint32 normalX = 2;
  void clear_normalx();
  uint32_t normalx() const;
  void set_normalx(uint32_t value);
  private:
  uint32_t _internal_normalx() const;
  void _internal_set_normalx(uint32_t value);
  public:

  // uint32 normalY = 3;
  void clear_normaly();
  uint32_t normaly() const;
  void set_normaly(uint32_t value);
  private:
  uint32_t _internal_normaly() const;
  void _internal_set_normaly(uint32_t value);
  public:

  // uint32 normalZ = 4;
  void clear_normalz();
  uint32_t normalz() const;
  void set_normalz(uint32_t value);
  private:
  uint32_t _internal_normalz() const;
  void _internal_set_normalz(uint32_t value);
  public:

  // uint32 posX = 5;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 6;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 7;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool battack_;
    uint32_t normalx_;
    uint32_t normaly_;
    uint32_t normalz_;
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_CHANGE_WEAPON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_CHANGE_WEAPON) */ {
 public:
  inline CS_CHANGE_WEAPON() : CS_CHANGE_WEAPON(nullptr) {}
  ~CS_CHANGE_WEAPON() override;
  explicit PROTOBUF_CONSTEXPR CS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_CHANGE_WEAPON(const CS_CHANGE_WEAPON& from);
  CS_CHANGE_WEAPON(CS_CHANGE_WEAPON&& from) noexcept
    : CS_CHANGE_WEAPON() {
    *this = ::std::move(from);
  }

  inline CS_CHANGE_WEAPON& operator=(const CS_CHANGE_WEAPON& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_CHANGE_WEAPON& operator=(CS_CHANGE_WEAPON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_CHANGE_WEAPON& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_CHANGE_WEAPON* internal_default_instance() {
    return reinterpret_cast<const CS_CHANGE_WEAPON*>(
               &_CS_CHANGE_WEAPON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CS_CHANGE_WEAPON& a, CS_CHANGE_WEAPON& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_CHANGE_WEAPON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_CHANGE_WEAPON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_CHANGE_WEAPON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_CHANGE_WEAPON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_CHANGE_WEAPON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_CHANGE_WEAPON& from) {
    CS_CHANGE_WEAPON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_CHANGE_WEAPON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_CHANGE_WEAPON";
  }
  protected:
  explicit CS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponFieldNumber = 1,
  };
  // uint32 weapon = 1;
  void clear_weapon();
  uint32_t weapon() const;
  void set_weapon(uint32_t value);
  private:
  uint32_t _internal_weapon() const;
  void _internal_set_weapon(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_CHANGE_WEAPON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t weapon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_GRENADE_EXPLOSITION_POS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_GRENADE_EXPLOSITION_POS) */ {
 public:
  inline CS_GRENADE_EXPLOSITION_POS() : CS_GRENADE_EXPLOSITION_POS(nullptr) {}
  ~CS_GRENADE_EXPLOSITION_POS() override;
  explicit PROTOBUF_CONSTEXPR CS_GRENADE_EXPLOSITION_POS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_GRENADE_EXPLOSITION_POS(const CS_GRENADE_EXPLOSITION_POS& from);
  CS_GRENADE_EXPLOSITION_POS(CS_GRENADE_EXPLOSITION_POS&& from) noexcept
    : CS_GRENADE_EXPLOSITION_POS() {
    *this = ::std::move(from);
  }

  inline CS_GRENADE_EXPLOSITION_POS& operator=(const CS_GRENADE_EXPLOSITION_POS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_GRENADE_EXPLOSITION_POS& operator=(CS_GRENADE_EXPLOSITION_POS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_GRENADE_EXPLOSITION_POS& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_GRENADE_EXPLOSITION_POS* internal_default_instance() {
    return reinterpret_cast<const CS_GRENADE_EXPLOSITION_POS*>(
               &_CS_GRENADE_EXPLOSITION_POS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CS_GRENADE_EXPLOSITION_POS& a, CS_GRENADE_EXPLOSITION_POS& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_GRENADE_EXPLOSITION_POS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_GRENADE_EXPLOSITION_POS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_GRENADE_EXPLOSITION_POS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_GRENADE_EXPLOSITION_POS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_GRENADE_EXPLOSITION_POS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_GRENADE_EXPLOSITION_POS& from) {
    CS_GRENADE_EXPLOSITION_POS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_GRENADE_EXPLOSITION_POS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_GRENADE_EXPLOSITION_POS";
  }
  protected:
  explicit CS_GRENADE_EXPLOSITION_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 3;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_GRENADE_EXPLOSITION_POS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_ITEM_PICKED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_ITEM_PICKED) */ {
 public:
  inline CS_ITEM_PICKED() : CS_ITEM_PICKED(nullptr) {}
  ~CS_ITEM_PICKED() override;
  explicit PROTOBUF_CONSTEXPR CS_ITEM_PICKED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_ITEM_PICKED(const CS_ITEM_PICKED& from);
  CS_ITEM_PICKED(CS_ITEM_PICKED&& from) noexcept
    : CS_ITEM_PICKED() {
    *this = ::std::move(from);
  }

  inline CS_ITEM_PICKED& operator=(const CS_ITEM_PICKED& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_ITEM_PICKED& operator=(CS_ITEM_PICKED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_ITEM_PICKED& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_ITEM_PICKED* internal_default_instance() {
    return reinterpret_cast<const CS_ITEM_PICKED*>(
               &_CS_ITEM_PICKED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CS_ITEM_PICKED& a, CS_ITEM_PICKED& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_ITEM_PICKED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_ITEM_PICKED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_ITEM_PICKED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_ITEM_PICKED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_ITEM_PICKED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_ITEM_PICKED& from) {
    CS_ITEM_PICKED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_ITEM_PICKED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_ITEM_PICKED";
  }
  protected:
  explicit CS_ITEM_PICKED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // uint32 itemId = 1;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_ITEM_PICKED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t itemid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_KEY_INPUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_KEY_INPUT) */ {
 public:
  inline CS_KEY_INPUT() : CS_KEY_INPUT(nullptr) {}
  ~CS_KEY_INPUT() override;
  explicit PROTOBUF_CONSTEXPR CS_KEY_INPUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_KEY_INPUT(const CS_KEY_INPUT& from);
  CS_KEY_INPUT(CS_KEY_INPUT&& from) noexcept
    : CS_KEY_INPUT() {
    *this = ::std::move(from);
  }

  inline CS_KEY_INPUT& operator=(const CS_KEY_INPUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_KEY_INPUT& operator=(CS_KEY_INPUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_KEY_INPUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_KEY_INPUT* internal_default_instance() {
    return reinterpret_cast<const CS_KEY_INPUT*>(
               &_CS_KEY_INPUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CS_KEY_INPUT& a, CS_KEY_INPUT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_KEY_INPUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_KEY_INPUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_KEY_INPUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_KEY_INPUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_KEY_INPUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_KEY_INPUT& from) {
    CS_KEY_INPUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_KEY_INPUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_KEY_INPUT";
  }
  protected:
  explicit CS_KEY_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyWFieldNumber = 1,
    kKeyAFieldNumber = 2,
    kKeySFieldNumber = 3,
    kKeyDFieldNumber = 4,
    kRotateAxisXFieldNumber = 5,
    kRotateAxisYFieldNumber = 6,
    kJumpFieldNumber = 7,
  };
  // uint32 keyW = 1;
  void clear_keyw();
  uint32_t keyw() const;
  void set_keyw(uint32_t value);
  private:
  uint32_t _internal_keyw() const;
  void _internal_set_keyw(uint32_t value);
  public:

  // uint32 keyA = 2;
  void clear_keya();
  uint32_t keya() const;
  void set_keya(uint32_t value);
  private:
  uint32_t _internal_keya() const;
  void _internal_set_keya(uint32_t value);
  public:

  // uint32 keyS = 3;
  void clear_keys();
  uint32_t keys() const;
  void set_keys(uint32_t value);
  private:
  uint32_t _internal_keys() const;
  void _internal_set_keys(uint32_t value);
  public:

  // uint32 keyD = 4;
  void clear_keyd();
  uint32_t keyd() const;
  void set_keyd(uint32_t value);
  private:
  uint32_t _internal_keyd() const;
  void _internal_set_keyd(uint32_t value);
  public:

  // fixed32 rotateAxisX = 5;
  void clear_rotateaxisx();
  uint32_t rotateaxisx() const;
  void set_rotateaxisx(uint32_t value);
  private:
  uint32_t _internal_rotateaxisx() const;
  void _internal_set_rotateaxisx(uint32_t value);
  public:

  // fixed32 rotateAxisY = 6;
  void clear_rotateaxisy();
  uint32_t rotateaxisy() const;
  void set_rotateaxisy(uint32_t value);
  private:
  uint32_t _internal_rotateaxisy() const;
  void _internal_set_rotateaxisy(uint32_t value);
  public:

  // uint32 Jump = 7;
  void clear_jump();
  uint32_t jump() const;
  void set_jump(uint32_t value);
  private:
  uint32_t _internal_jump() const;
  void _internal_set_jump(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_KEY_INPUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t keyw_;
    uint32_t keya_;
    uint32_t keys_;
    uint32_t keyd_;
    uint32_t rotateaxisx_;
    uint32_t rotateaxisy_;
    uint32_t jump_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_POS_INTERPOLATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_POS_INTERPOLATION) */ {
 public:
  inline CS_POS_INTERPOLATION() : CS_POS_INTERPOLATION(nullptr) {}
  ~CS_POS_INTERPOLATION() override;
  explicit PROTOBUF_CONSTEXPR CS_POS_INTERPOLATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_POS_INTERPOLATION(const CS_POS_INTERPOLATION& from);
  CS_POS_INTERPOLATION(CS_POS_INTERPOLATION&& from) noexcept
    : CS_POS_INTERPOLATION() {
    *this = ::std::move(from);
  }

  inline CS_POS_INTERPOLATION& operator=(const CS_POS_INTERPOLATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_POS_INTERPOLATION& operator=(CS_POS_INTERPOLATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_POS_INTERPOLATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_POS_INTERPOLATION* internal_default_instance() {
    return reinterpret_cast<const CS_POS_INTERPOLATION*>(
               &_CS_POS_INTERPOLATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CS_POS_INTERPOLATION& a, CS_POS_INTERPOLATION& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_POS_INTERPOLATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_POS_INTERPOLATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_POS_INTERPOLATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_POS_INTERPOLATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_POS_INTERPOLATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_POS_INTERPOLATION& from) {
    CS_POS_INTERPOLATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_POS_INTERPOLATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_POS_INTERPOLATION";
  }
  protected:
  explicit CS_POS_INTERPOLATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 3;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_POS_INTERPOLATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_REQUEST_RESTART final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_REQUEST_RESTART) */ {
 public:
  inline CS_REQUEST_RESTART() : CS_REQUEST_RESTART(nullptr) {}
  ~CS_REQUEST_RESTART() override;
  explicit PROTOBUF_CONSTEXPR CS_REQUEST_RESTART(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_REQUEST_RESTART(const CS_REQUEST_RESTART& from);
  CS_REQUEST_RESTART(CS_REQUEST_RESTART&& from) noexcept
    : CS_REQUEST_RESTART() {
    *this = ::std::move(from);
  }

  inline CS_REQUEST_RESTART& operator=(const CS_REQUEST_RESTART& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_REQUEST_RESTART& operator=(CS_REQUEST_RESTART&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_REQUEST_RESTART& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_REQUEST_RESTART* internal_default_instance() {
    return reinterpret_cast<const CS_REQUEST_RESTART*>(
               &_CS_REQUEST_RESTART_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CS_REQUEST_RESTART& a, CS_REQUEST_RESTART& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_REQUEST_RESTART* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_REQUEST_RESTART* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_REQUEST_RESTART* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_REQUEST_RESTART>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_REQUEST_RESTART& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_REQUEST_RESTART& from) {
    CS_REQUEST_RESTART::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_REQUEST_RESTART* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_REQUEST_RESTART";
  }
  protected:
  explicit CS_REQUEST_RESTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kWeaponFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 weapon = 2;
  void clear_weapon();
  uint32_t weapon() const;
  void set_weapon(uint32_t value);
  private:
  uint32_t _internal_weapon() const;
  void _internal_set_weapon(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_REQUEST_RESTART)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t weapon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_SEND_NICKNAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_SEND_NICKNAME) */ {
 public:
  inline CS_SEND_NICKNAME() : CS_SEND_NICKNAME(nullptr) {}
  ~CS_SEND_NICKNAME() override;
  explicit PROTOBUF_CONSTEXPR CS_SEND_NICKNAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_SEND_NICKNAME(const CS_SEND_NICKNAME& from);
  CS_SEND_NICKNAME(CS_SEND_NICKNAME&& from) noexcept
    : CS_SEND_NICKNAME() {
    *this = ::std::move(from);
  }

  inline CS_SEND_NICKNAME& operator=(const CS_SEND_NICKNAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SEND_NICKNAME& operator=(CS_SEND_NICKNAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_SEND_NICKNAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_SEND_NICKNAME* internal_default_instance() {
    return reinterpret_cast<const CS_SEND_NICKNAME*>(
               &_CS_SEND_NICKNAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CS_SEND_NICKNAME& a, CS_SEND_NICKNAME& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SEND_NICKNAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_SEND_NICKNAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_SEND_NICKNAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_SEND_NICKNAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_SEND_NICKNAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_SEND_NICKNAME& from) {
    CS_SEND_NICKNAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SEND_NICKNAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_SEND_NICKNAME";
  }
  protected:
  explicit CS_SEND_NICKNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:game.CS_SEND_NICKNAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_SHOT_HIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_SHOT_HIT) */ {
 public:
  inline CS_SHOT_HIT() : CS_SHOT_HIT(nullptr) {}
  ~CS_SHOT_HIT() override;
  explicit PROTOBUF_CONSTEXPR CS_SHOT_HIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_SHOT_HIT(const CS_SHOT_HIT& from);
  CS_SHOT_HIT(CS_SHOT_HIT&& from) noexcept
    : CS_SHOT_HIT() {
    *this = ::std::move(from);
  }

  inline CS_SHOT_HIT& operator=(const CS_SHOT_HIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_SHOT_HIT& operator=(CS_SHOT_HIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_SHOT_HIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_SHOT_HIT* internal_default_instance() {
    return reinterpret_cast<const CS_SHOT_HIT*>(
               &_CS_SHOT_HIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CS_SHOT_HIT& a, CS_SHOT_HIT& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_SHOT_HIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_SHOT_HIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_SHOT_HIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_SHOT_HIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_SHOT_HIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_SHOT_HIT& from) {
    CS_SHOT_HIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_SHOT_HIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_SHOT_HIT";
  }
  protected:
  explicit CS_SHOT_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_SHOT_HIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_THROW_GRENADE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.CS_THROW_GRENADE) */ {
 public:
  inline CS_THROW_GRENADE() : CS_THROW_GRENADE(nullptr) {}
  ~CS_THROW_GRENADE() override;
  explicit PROTOBUF_CONSTEXPR CS_THROW_GRENADE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_THROW_GRENADE(const CS_THROW_GRENADE& from);
  CS_THROW_GRENADE(CS_THROW_GRENADE&& from) noexcept
    : CS_THROW_GRENADE() {
    *this = ::std::move(from);
  }

  inline CS_THROW_GRENADE& operator=(const CS_THROW_GRENADE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_THROW_GRENADE& operator=(CS_THROW_GRENADE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_THROW_GRENADE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_THROW_GRENADE* internal_default_instance() {
    return reinterpret_cast<const CS_THROW_GRENADE*>(
               &_CS_THROW_GRENADE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CS_THROW_GRENADE& a, CS_THROW_GRENADE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_THROW_GRENADE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_THROW_GRENADE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_THROW_GRENADE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_THROW_GRENADE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_THROW_GRENADE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_THROW_GRENADE& from) {
    CS_THROW_GRENADE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_THROW_GRENADE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.CS_THROW_GRENADE";
  }
  protected:
  explicit CS_THROW_GRENADE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
    kDirXFieldNumber = 4,
    kDirYFieldNumber = 5,
    kDirZFieldNumber = 6,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 3;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // fixed32 dirX = 4;
  void clear_dirx();
  uint32_t dirx() const;
  void set_dirx(uint32_t value);
  private:
  uint32_t _internal_dirx() const;
  void _internal_set_dirx(uint32_t value);
  public:

  // fixed32 dirY = 5;
  void clear_diry();
  uint32_t diry() const;
  void set_diry(uint32_t value);
  private:
  uint32_t _internal_diry() const;
  void _internal_set_diry(uint32_t value);
  public:

  // fixed32 dirZ = 6;
  void clear_dirz();
  uint32_t dirz() const;
  void set_dirz(uint32_t value);
  private:
  uint32_t _internal_dirz() const;
  void _internal_set_dirz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.CS_THROW_GRENADE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    uint32_t dirx_;
    uint32_t diry_;
    uint32_t dirz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class KDAInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.KDAInfo) */ {
 public:
  inline KDAInfo() : KDAInfo(nullptr) {}
  ~KDAInfo() override;
  explicit PROTOBUF_CONSTEXPR KDAInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KDAInfo(const KDAInfo& from);
  KDAInfo(KDAInfo&& from) noexcept
    : KDAInfo() {
    *this = ::std::move(from);
  }

  inline KDAInfo& operator=(const KDAInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline KDAInfo& operator=(KDAInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KDAInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const KDAInfo* internal_default_instance() {
    return reinterpret_cast<const KDAInfo*>(
               &_KDAInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(KDAInfo& a, KDAInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(KDAInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KDAInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KDAInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KDAInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KDAInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KDAInfo& from) {
    KDAInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KDAInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.KDAInfo";
  }
  protected:
  explicit KDAInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillFieldNumber = 1,
    kDeathFieldNumber = 2,
    kAssistFieldNumber = 3,
  };
  // uint32 kill = 1;
  void clear_kill();
  uint32_t kill() const;
  void set_kill(uint32_t value);
  private:
  uint32_t _internal_kill() const;
  void _internal_set_kill(uint32_t value);
  public:

  // uint32 death = 2;
  void clear_death();
  uint32_t death() const;
  void set_death(uint32_t value);
  private:
  uint32_t _internal_death() const;
  void _internal_set_death(uint32_t value);
  public:

  // uint32 assist = 3;
  void clear_assist();
  uint32_t assist() const;
  void set_assist(uint32_t value);
  private:
  uint32_t _internal_assist() const;
  void _internal_set_assist(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.KDAInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t kill_;
    uint32_t death_;
    uint32_t assist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKdaFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .game.KDAInfo kda = 2;
  bool has_kda() const;
  private:
  bool _internal_has_kda() const;
  public:
  void clear_kda();
  const ::game::KDAInfo& kda() const;
  PROTOBUF_NODISCARD ::game::KDAInfo* release_kda();
  ::game::KDAInfo* mutable_kda();
  void set_allocated_kda(::game::KDAInfo* kda);
  private:
  const ::game::KDAInfo& _internal_kda() const;
  ::game::KDAInfo* _internal_mutable_kda();
  public:
  void unsafe_arena_set_allocated_kda(
      ::game::KDAInfo* kda);
  ::game::KDAInfo* unsafe_arena_release_kda();

  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::KDAInfo* kda_;
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_ATTACK) */ {
 public:
  inline SC_ATTACK() : SC_ATTACK(nullptr) {}
  ~SC_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR SC_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ATTACK(const SC_ATTACK& from);
  SC_ATTACK(SC_ATTACK&& from) noexcept
    : SC_ATTACK() {
    *this = ::std::move(from);
  }

  inline SC_ATTACK& operator=(const SC_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ATTACK& operator=(SC_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ATTACK* internal_default_instance() {
    return reinterpret_cast<const SC_ATTACK*>(
               &_SC_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SC_ATTACK& a, SC_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_ATTACK& from) {
    SC_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_ATTACK";
  }
  protected:
  explicit SC_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kNormalXFieldNumber = 2,
    kNormalYFieldNumber = 3,
    kNormalZFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosYFieldNumber = 6,
    kPosZFieldNumber = 7,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 normalX = 2;
  void clear_normalx();
  uint32_t normalx() const;
  void set_normalx(uint32_t value);
  private:
  uint32_t _internal_normalx() const;
  void _internal_set_normalx(uint32_t value);
  public:

  // uint32 normalY = 3;
  void clear_normaly();
  uint32_t normaly() const;
  void set_normaly(uint32_t value);
  private:
  uint32_t _internal_normaly() const;
  void _internal_set_normaly(uint32_t value);
  public:

  // uint32 normalZ = 4;
  void clear_normalz();
  uint32_t normalz() const;
  void set_normalz(uint32_t value);
  private:
  uint32_t _internal_normalz() const;
  void _internal_set_normalz(uint32_t value);
  public:

  // uint32 posX = 5;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 6;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 7;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t normalx_;
    uint32_t normaly_;
    uint32_t normalz_;
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CHANGE_WEAPON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CHANGE_WEAPON) */ {
 public:
  inline SC_CHANGE_WEAPON() : SC_CHANGE_WEAPON(nullptr) {}
  ~SC_CHANGE_WEAPON() override;
  explicit PROTOBUF_CONSTEXPR SC_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CHANGE_WEAPON(const SC_CHANGE_WEAPON& from);
  SC_CHANGE_WEAPON(SC_CHANGE_WEAPON&& from) noexcept
    : SC_CHANGE_WEAPON() {
    *this = ::std::move(from);
  }

  inline SC_CHANGE_WEAPON& operator=(const SC_CHANGE_WEAPON& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHANGE_WEAPON& operator=(SC_CHANGE_WEAPON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHANGE_WEAPON& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHANGE_WEAPON* internal_default_instance() {
    return reinterpret_cast<const SC_CHANGE_WEAPON*>(
               &_SC_CHANGE_WEAPON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SC_CHANGE_WEAPON& a, SC_CHANGE_WEAPON& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHANGE_WEAPON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHANGE_WEAPON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CHANGE_WEAPON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CHANGE_WEAPON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CHANGE_WEAPON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CHANGE_WEAPON& from) {
    SC_CHANGE_WEAPON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHANGE_WEAPON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CHANGE_WEAPON";
  }
  protected:
  explicit SC_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kWeaponFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 weapon = 2;
  void clear_weapon();
  uint32_t weapon() const;
  void set_weapon(uint32_t value);
  private:
  uint32_t _internal_weapon() const;
  void _internal_set_weapon(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CHANGE_WEAPON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t weapon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CHARACTER_DOWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CHARACTER_DOWN) */ {
 public:
  inline SC_CHARACTER_DOWN() : SC_CHARACTER_DOWN(nullptr) {}
  ~SC_CHARACTER_DOWN() override;
  explicit PROTOBUF_CONSTEXPR SC_CHARACTER_DOWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CHARACTER_DOWN(const SC_CHARACTER_DOWN& from);
  SC_CHARACTER_DOWN(SC_CHARACTER_DOWN&& from) noexcept
    : SC_CHARACTER_DOWN() {
    *this = ::std::move(from);
  }

  inline SC_CHARACTER_DOWN& operator=(const SC_CHARACTER_DOWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHARACTER_DOWN& operator=(SC_CHARACTER_DOWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHARACTER_DOWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHARACTER_DOWN* internal_default_instance() {
    return reinterpret_cast<const SC_CHARACTER_DOWN*>(
               &_SC_CHARACTER_DOWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SC_CHARACTER_DOWN& a, SC_CHARACTER_DOWN& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHARACTER_DOWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHARACTER_DOWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CHARACTER_DOWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CHARACTER_DOWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CHARACTER_DOWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CHARACTER_DOWN& from) {
    SC_CHARACTER_DOWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHARACTER_DOWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CHARACTER_DOWN";
  }
  protected:
  explicit SC_CHARACTER_DOWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTeamIDFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 teamID = 2;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CHARACTER_DOWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CHARACTER_KILL_LOG final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CHARACTER_KILL_LOG) */ {
 public:
  inline SC_CHARACTER_KILL_LOG() : SC_CHARACTER_KILL_LOG(nullptr) {}
  ~SC_CHARACTER_KILL_LOG() override;
  explicit PROTOBUF_CONSTEXPR SC_CHARACTER_KILL_LOG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CHARACTER_KILL_LOG(const SC_CHARACTER_KILL_LOG& from);
  SC_CHARACTER_KILL_LOG(SC_CHARACTER_KILL_LOG&& from) noexcept
    : SC_CHARACTER_KILL_LOG() {
    *this = ::std::move(from);
  }

  inline SC_CHARACTER_KILL_LOG& operator=(const SC_CHARACTER_KILL_LOG& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CHARACTER_KILL_LOG& operator=(SC_CHARACTER_KILL_LOG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CHARACTER_KILL_LOG& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CHARACTER_KILL_LOG* internal_default_instance() {
    return reinterpret_cast<const SC_CHARACTER_KILL_LOG*>(
               &_SC_CHARACTER_KILL_LOG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SC_CHARACTER_KILL_LOG& a, SC_CHARACTER_KILL_LOG& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CHARACTER_KILL_LOG* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CHARACTER_KILL_LOG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CHARACTER_KILL_LOG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CHARACTER_KILL_LOG>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CHARACTER_KILL_LOG& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CHARACTER_KILL_LOG& from) {
    SC_CHARACTER_KILL_LOG::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CHARACTER_KILL_LOG* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CHARACTER_KILL_LOG";
  }
  protected:
  explicit SC_CHARACTER_KILL_LOG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoListFieldNumber = 1,
  };
  // repeated .game.PlayerInfo playerInfoList = 1;
  int playerinfolist_size() const;
  private:
  int _internal_playerinfolist_size() const;
  public:
  void clear_playerinfolist();
  ::game::PlayerInfo* mutable_playerinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >*
      mutable_playerinfolist();
  private:
  const ::game::PlayerInfo& _internal_playerinfolist(int index) const;
  ::game::PlayerInfo* _internal_add_playerinfolist();
  public:
  const ::game::PlayerInfo& playerinfolist(int index) const;
  ::game::PlayerInfo* add_playerinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >&
      playerinfolist() const;

  // @@protoc_insertion_point(class_scope:game.SC_CHARACTER_KILL_LOG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo > playerinfolist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CREATE_MY_CHARACTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CREATE_MY_CHARACTER) */ {
 public:
  inline SC_CREATE_MY_CHARACTER() : SC_CREATE_MY_CHARACTER(nullptr) {}
  ~SC_CREATE_MY_CHARACTER() override;
  explicit PROTOBUF_CONSTEXPR SC_CREATE_MY_CHARACTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CREATE_MY_CHARACTER(const SC_CREATE_MY_CHARACTER& from);
  SC_CREATE_MY_CHARACTER(SC_CREATE_MY_CHARACTER&& from) noexcept
    : SC_CREATE_MY_CHARACTER() {
    *this = ::std::move(from);
  }

  inline SC_CREATE_MY_CHARACTER& operator=(const SC_CREATE_MY_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CREATE_MY_CHARACTER& operator=(SC_CREATE_MY_CHARACTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CREATE_MY_CHARACTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CREATE_MY_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const SC_CREATE_MY_CHARACTER*>(
               &_SC_CREATE_MY_CHARACTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SC_CREATE_MY_CHARACTER& a, SC_CREATE_MY_CHARACTER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CREATE_MY_CHARACTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CREATE_MY_CHARACTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CREATE_MY_CHARACTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CREATE_MY_CHARACTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CREATE_MY_CHARACTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CREATE_MY_CHARACTER& from) {
    SC_CREATE_MY_CHARACTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CREATE_MY_CHARACTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CREATE_MY_CHARACTER";
  }
  protected:
  explicit SC_CREATE_MY_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPosIndexFieldNumber = 2,
    kMaxHPFieldNumber = 3,
    kTeamIDFieldNumber = 4,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 posIndex = 2;
  void clear_posindex();
  uint32_t posindex() const;
  void set_posindex(uint32_t value);
  private:
  uint32_t _internal_posindex() const;
  void _internal_set_posindex(uint32_t value);
  public:

  // uint32 maxHP = 3;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 teamID = 4;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CREATE_MY_CHARACTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t posindex_;
    uint32_t maxhp_;
    uint32_t teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_CREATE_OTHER_CHARACTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_CREATE_OTHER_CHARACTER) */ {
 public:
  inline SC_CREATE_OTHER_CHARACTER() : SC_CREATE_OTHER_CHARACTER(nullptr) {}
  ~SC_CREATE_OTHER_CHARACTER() override;
  explicit PROTOBUF_CONSTEXPR SC_CREATE_OTHER_CHARACTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_CREATE_OTHER_CHARACTER(const SC_CREATE_OTHER_CHARACTER& from);
  SC_CREATE_OTHER_CHARACTER(SC_CREATE_OTHER_CHARACTER&& from) noexcept
    : SC_CREATE_OTHER_CHARACTER() {
    *this = ::std::move(from);
  }

  inline SC_CREATE_OTHER_CHARACTER& operator=(const SC_CREATE_OTHER_CHARACTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_CREATE_OTHER_CHARACTER& operator=(SC_CREATE_OTHER_CHARACTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_CREATE_OTHER_CHARACTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_CREATE_OTHER_CHARACTER* internal_default_instance() {
    return reinterpret_cast<const SC_CREATE_OTHER_CHARACTER*>(
               &_SC_CREATE_OTHER_CHARACTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SC_CREATE_OTHER_CHARACTER& a, SC_CREATE_OTHER_CHARACTER& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_CREATE_OTHER_CHARACTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_CREATE_OTHER_CHARACTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_CREATE_OTHER_CHARACTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_CREATE_OTHER_CHARACTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_CREATE_OTHER_CHARACTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_CREATE_OTHER_CHARACTER& from) {
    SC_CREATE_OTHER_CHARACTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_CREATE_OTHER_CHARACTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_CREATE_OTHER_CHARACTER";
  }
  protected:
  explicit SC_CREATE_OTHER_CHARACTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kKdaInfoFieldNumber = 6,
    kPlayerIdFieldNumber = 1,
    kPosIndexFieldNumber = 2,
    kMaxHPFieldNumber = 3,
    kCurHPFieldNumber = 4,
    kWeaponFieldNumber = 7,
    kTeamIDFieldNumber = 8,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .game.KDAInfo kdaInfo = 6;
  bool has_kdainfo() const;
  private:
  bool _internal_has_kdainfo() const;
  public:
  void clear_kdainfo();
  const ::game::KDAInfo& kdainfo() const;
  PROTOBUF_NODISCARD ::game::KDAInfo* release_kdainfo();
  ::game::KDAInfo* mutable_kdainfo();
  void set_allocated_kdainfo(::game::KDAInfo* kdainfo);
  private:
  const ::game::KDAInfo& _internal_kdainfo() const;
  ::game::KDAInfo* _internal_mutable_kdainfo();
  public:
  void unsafe_arena_set_allocated_kdainfo(
      ::game::KDAInfo* kdainfo);
  ::game::KDAInfo* unsafe_arena_release_kdainfo();

  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 posIndex = 2;
  void clear_posindex();
  uint32_t posindex() const;
  void set_posindex(uint32_t value);
  private:
  uint32_t _internal_posindex() const;
  void _internal_set_posindex(uint32_t value);
  public:

  // uint32 maxHP = 3;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 curHP = 4;
  void clear_curhp();
  uint32_t curhp() const;
  void set_curhp(uint32_t value);
  private:
  uint32_t _internal_curhp() const;
  void _internal_set_curhp(uint32_t value);
  public:

  // uint32 weapon = 7;
  void clear_weapon();
  uint32_t weapon() const;
  void set_weapon(uint32_t value);
  private:
  uint32_t _internal_weapon() const;
  void _internal_set_weapon(uint32_t value);
  public:

  // uint32 teamID = 8;
  void clear_teamid();
  uint32_t teamid() const;
  void set_teamid(uint32_t value);
  private:
  uint32_t _internal_teamid() const;
  void _internal_set_teamid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_CREATE_OTHER_CHARACTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::game::KDAInfo* kdainfo_;
    uint32_t playerid_;
    uint32_t posindex_;
    uint32_t maxhp_;
    uint32_t curhp_;
    uint32_t weapon_;
    uint32_t teamid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_GRENADE_EXPLOSITION_POS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_GRENADE_EXPLOSITION_POS) */ {
 public:
  inline SC_GRENADE_EXPLOSITION_POS() : SC_GRENADE_EXPLOSITION_POS(nullptr) {}
  ~SC_GRENADE_EXPLOSITION_POS() override;
  explicit PROTOBUF_CONSTEXPR SC_GRENADE_EXPLOSITION_POS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_GRENADE_EXPLOSITION_POS(const SC_GRENADE_EXPLOSITION_POS& from);
  SC_GRENADE_EXPLOSITION_POS(SC_GRENADE_EXPLOSITION_POS&& from) noexcept
    : SC_GRENADE_EXPLOSITION_POS() {
    *this = ::std::move(from);
  }

  inline SC_GRENADE_EXPLOSITION_POS& operator=(const SC_GRENADE_EXPLOSITION_POS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_GRENADE_EXPLOSITION_POS& operator=(SC_GRENADE_EXPLOSITION_POS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_GRENADE_EXPLOSITION_POS& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_GRENADE_EXPLOSITION_POS* internal_default_instance() {
    return reinterpret_cast<const SC_GRENADE_EXPLOSITION_POS*>(
               &_SC_GRENADE_EXPLOSITION_POS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SC_GRENADE_EXPLOSITION_POS& a, SC_GRENADE_EXPLOSITION_POS& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_GRENADE_EXPLOSITION_POS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_GRENADE_EXPLOSITION_POS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_GRENADE_EXPLOSITION_POS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_GRENADE_EXPLOSITION_POS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_GRENADE_EXPLOSITION_POS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_GRENADE_EXPLOSITION_POS& from) {
    SC_GRENADE_EXPLOSITION_POS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_GRENADE_EXPLOSITION_POS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_GRENADE_EXPLOSITION_POS";
  }
  protected:
  explicit SC_GRENADE_EXPLOSITION_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 3;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_GRENADE_EXPLOSITION_POS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_PICK_FAIL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_ITEM_PICK_FAIL) */ {
 public:
  inline SC_ITEM_PICK_FAIL() : SC_ITEM_PICK_FAIL(nullptr) {}
  ~SC_ITEM_PICK_FAIL() override;
  explicit PROTOBUF_CONSTEXPR SC_ITEM_PICK_FAIL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ITEM_PICK_FAIL(const SC_ITEM_PICK_FAIL& from);
  SC_ITEM_PICK_FAIL(SC_ITEM_PICK_FAIL&& from) noexcept
    : SC_ITEM_PICK_FAIL() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_PICK_FAIL& operator=(const SC_ITEM_PICK_FAIL& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_PICK_FAIL& operator=(SC_ITEM_PICK_FAIL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ITEM_PICK_FAIL& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ITEM_PICK_FAIL* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_PICK_FAIL*>(
               &_SC_ITEM_PICK_FAIL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SC_ITEM_PICK_FAIL& a, SC_ITEM_PICK_FAIL& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_PICK_FAIL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ITEM_PICK_FAIL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_ITEM_PICK_FAIL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_ITEM_PICK_FAIL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_ITEM_PICK_FAIL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_ITEM_PICK_FAIL& from) {
    SC_ITEM_PICK_FAIL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_PICK_FAIL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_ITEM_PICK_FAIL";
  }
  protected:
  explicit SC_ITEM_PICK_FAIL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 itemId = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_ITEM_PICK_FAIL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t itemid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_PICK_SUCCESS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_ITEM_PICK_SUCCESS) */ {
 public:
  inline SC_ITEM_PICK_SUCCESS() : SC_ITEM_PICK_SUCCESS(nullptr) {}
  ~SC_ITEM_PICK_SUCCESS() override;
  explicit PROTOBUF_CONSTEXPR SC_ITEM_PICK_SUCCESS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ITEM_PICK_SUCCESS(const SC_ITEM_PICK_SUCCESS& from);
  SC_ITEM_PICK_SUCCESS(SC_ITEM_PICK_SUCCESS&& from) noexcept
    : SC_ITEM_PICK_SUCCESS() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_PICK_SUCCESS& operator=(const SC_ITEM_PICK_SUCCESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_PICK_SUCCESS& operator=(SC_ITEM_PICK_SUCCESS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ITEM_PICK_SUCCESS& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ITEM_PICK_SUCCESS* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_PICK_SUCCESS*>(
               &_SC_ITEM_PICK_SUCCESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SC_ITEM_PICK_SUCCESS& a, SC_ITEM_PICK_SUCCESS& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_PICK_SUCCESS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ITEM_PICK_SUCCESS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_ITEM_PICK_SUCCESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_ITEM_PICK_SUCCESS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_ITEM_PICK_SUCCESS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_ITEM_PICK_SUCCESS& from) {
    SC_ITEM_PICK_SUCCESS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_PICK_SUCCESS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_ITEM_PICK_SUCCESS";
  }
  protected:
  explicit SC_ITEM_PICK_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 itemId = 2;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_ITEM_PICK_SUCCESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t itemid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ITEM_SPAWNED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_ITEM_SPAWNED) */ {
 public:
  inline SC_ITEM_SPAWNED() : SC_ITEM_SPAWNED(nullptr) {}
  ~SC_ITEM_SPAWNED() override;
  explicit PROTOBUF_CONSTEXPR SC_ITEM_SPAWNED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ITEM_SPAWNED(const SC_ITEM_SPAWNED& from);
  SC_ITEM_SPAWNED(SC_ITEM_SPAWNED&& from) noexcept
    : SC_ITEM_SPAWNED() {
    *this = ::std::move(from);
  }

  inline SC_ITEM_SPAWNED& operator=(const SC_ITEM_SPAWNED& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ITEM_SPAWNED& operator=(SC_ITEM_SPAWNED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ITEM_SPAWNED& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ITEM_SPAWNED* internal_default_instance() {
    return reinterpret_cast<const SC_ITEM_SPAWNED*>(
               &_SC_ITEM_SPAWNED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SC_ITEM_SPAWNED& a, SC_ITEM_SPAWNED& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ITEM_SPAWNED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ITEM_SPAWNED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_ITEM_SPAWNED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_ITEM_SPAWNED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_ITEM_SPAWNED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_ITEM_SPAWNED& from) {
    SC_ITEM_SPAWNED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ITEM_SPAWNED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_ITEM_SPAWNED";
  }
  protected:
  explicit SC_ITEM_SPAWNED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemTypeFieldNumber = 2,
    kItemPosIndexFieldNumber = 3,
  };
  // uint32 itemId = 1;
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // uint32 itemType = 2;
  void clear_itemtype();
  uint32_t itemtype() const;
  void set_itemtype(uint32_t value);
  private:
  uint32_t _internal_itemtype() const;
  void _internal_set_itemtype(uint32_t value);
  public:

  // uint32 itemPosIndex = 3;
  void clear_itemposindex();
  uint32_t itemposindex() const;
  void set_itemposindex(uint32_t value);
  private:
  uint32_t _internal_itemposindex() const;
  void _internal_set_itemposindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_ITEM_SPAWNED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t itemid_;
    uint32_t itemtype_;
    uint32_t itemposindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_KEY_INPUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_KEY_INPUT) */ {
 public:
  inline SC_KEY_INPUT() : SC_KEY_INPUT(nullptr) {}
  ~SC_KEY_INPUT() override;
  explicit PROTOBUF_CONSTEXPR SC_KEY_INPUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_KEY_INPUT(const SC_KEY_INPUT& from);
  SC_KEY_INPUT(SC_KEY_INPUT&& from) noexcept
    : SC_KEY_INPUT() {
    *this = ::std::move(from);
  }

  inline SC_KEY_INPUT& operator=(const SC_KEY_INPUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_KEY_INPUT& operator=(SC_KEY_INPUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_KEY_INPUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_KEY_INPUT* internal_default_instance() {
    return reinterpret_cast<const SC_KEY_INPUT*>(
               &_SC_KEY_INPUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SC_KEY_INPUT& a, SC_KEY_INPUT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_KEY_INPUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_KEY_INPUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_KEY_INPUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_KEY_INPUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_KEY_INPUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_KEY_INPUT& from) {
    SC_KEY_INPUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_KEY_INPUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_KEY_INPUT";
  }
  protected:
  explicit SC_KEY_INPUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kKeyWFieldNumber = 2,
    kKeyAFieldNumber = 3,
    kKeySFieldNumber = 4,
    kKeyDFieldNumber = 5,
    kRotateAxisXFieldNumber = 6,
    kRotateAxisYFieldNumber = 7,
    kJumpFieldNumber = 8,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 keyW = 2;
  void clear_keyw();
  uint32_t keyw() const;
  void set_keyw(uint32_t value);
  private:
  uint32_t _internal_keyw() const;
  void _internal_set_keyw(uint32_t value);
  public:

  // uint32 keyA = 3;
  void clear_keya();
  uint32_t keya() const;
  void set_keya(uint32_t value);
  private:
  uint32_t _internal_keya() const;
  void _internal_set_keya(uint32_t value);
  public:

  // uint32 keyS = 4;
  void clear_keys();
  uint32_t keys() const;
  void set_keys(uint32_t value);
  private:
  uint32_t _internal_keys() const;
  void _internal_set_keys(uint32_t value);
  public:

  // uint32 keyD = 5;
  void clear_keyd();
  uint32_t keyd() const;
  void set_keyd(uint32_t value);
  private:
  uint32_t _internal_keyd() const;
  void _internal_set_keyd(uint32_t value);
  public:

  // fixed32 rotateAxisX = 6;
  void clear_rotateaxisx();
  uint32_t rotateaxisx() const;
  void set_rotateaxisx(uint32_t value);
  private:
  uint32_t _internal_rotateaxisx() const;
  void _internal_set_rotateaxisx(uint32_t value);
  public:

  // fixed32 rotateAxisY = 7;
  void clear_rotateaxisy();
  uint32_t rotateaxisy() const;
  void set_rotateaxisy(uint32_t value);
  private:
  uint32_t _internal_rotateaxisy() const;
  void _internal_set_rotateaxisy(uint32_t value);
  public:

  // uint32 Jump = 8;
  void clear_jump();
  uint32_t jump() const;
  void set_jump(uint32_t value);
  private:
  uint32_t _internal_jump() const;
  void _internal_set_jump(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_KEY_INPUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t keyw_;
    uint32_t keya_;
    uint32_t keys_;
    uint32_t keyd_;
    uint32_t rotateaxisx_;
    uint32_t rotateaxisy_;
    uint32_t jump_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_ON_ACCEPT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_ON_ACCEPT) */ {
 public:
  inline SC_ON_ACCEPT() : SC_ON_ACCEPT(nullptr) {}
  ~SC_ON_ACCEPT() override;
  explicit PROTOBUF_CONSTEXPR SC_ON_ACCEPT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_ON_ACCEPT(const SC_ON_ACCEPT& from);
  SC_ON_ACCEPT(SC_ON_ACCEPT&& from) noexcept
    : SC_ON_ACCEPT() {
    *this = ::std::move(from);
  }

  inline SC_ON_ACCEPT& operator=(const SC_ON_ACCEPT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_ON_ACCEPT& operator=(SC_ON_ACCEPT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_ON_ACCEPT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_ON_ACCEPT* internal_default_instance() {
    return reinterpret_cast<const SC_ON_ACCEPT*>(
               &_SC_ON_ACCEPT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SC_ON_ACCEPT& a, SC_ON_ACCEPT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_ON_ACCEPT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_ON_ACCEPT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_ON_ACCEPT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_ON_ACCEPT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_ON_ACCEPT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_ON_ACCEPT& from) {
    SC_ON_ACCEPT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_ON_ACCEPT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_ON_ACCEPT";
  }
  protected:
  explicit SC_ON_ACCEPT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_ON_ACCEPT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_POS_INTERPOLATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_POS_INTERPOLATION) */ {
 public:
  inline SC_POS_INTERPOLATION() : SC_POS_INTERPOLATION(nullptr) {}
  ~SC_POS_INTERPOLATION() override;
  explicit PROTOBUF_CONSTEXPR SC_POS_INTERPOLATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_POS_INTERPOLATION(const SC_POS_INTERPOLATION& from);
  SC_POS_INTERPOLATION(SC_POS_INTERPOLATION&& from) noexcept
    : SC_POS_INTERPOLATION() {
    *this = ::std::move(from);
  }

  inline SC_POS_INTERPOLATION& operator=(const SC_POS_INTERPOLATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_POS_INTERPOLATION& operator=(SC_POS_INTERPOLATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_POS_INTERPOLATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_POS_INTERPOLATION* internal_default_instance() {
    return reinterpret_cast<const SC_POS_INTERPOLATION*>(
               &_SC_POS_INTERPOLATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SC_POS_INTERPOLATION& a, SC_POS_INTERPOLATION& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_POS_INTERPOLATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_POS_INTERPOLATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_POS_INTERPOLATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_POS_INTERPOLATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_POS_INTERPOLATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_POS_INTERPOLATION& from) {
    SC_POS_INTERPOLATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_POS_INTERPOLATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_POS_INTERPOLATION";
  }
  protected:
  explicit SC_POS_INTERPOLATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 3;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_POS_INTERPOLATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_SHOT_HIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_SHOT_HIT) */ {
 public:
  inline SC_SHOT_HIT() : SC_SHOT_HIT(nullptr) {}
  ~SC_SHOT_HIT() override;
  explicit PROTOBUF_CONSTEXPR SC_SHOT_HIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_SHOT_HIT(const SC_SHOT_HIT& from);
  SC_SHOT_HIT(SC_SHOT_HIT&& from) noexcept
    : SC_SHOT_HIT() {
    *this = ::std::move(from);
  }

  inline SC_SHOT_HIT& operator=(const SC_SHOT_HIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_SHOT_HIT& operator=(SC_SHOT_HIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_SHOT_HIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_SHOT_HIT* internal_default_instance() {
    return reinterpret_cast<const SC_SHOT_HIT*>(
               &_SC_SHOT_HIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SC_SHOT_HIT& a, SC_SHOT_HIT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_SHOT_HIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_SHOT_HIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_SHOT_HIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_SHOT_HIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_SHOT_HIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_SHOT_HIT& from) {
    SC_SHOT_HIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_SHOT_HIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_SHOT_HIT";
  }
  protected:
  explicit SC_SHOT_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint32 playerId = 1;
  void clear_playerid();
  uint32_t playerid() const;
  void set_playerid(uint32_t value);
  private:
  uint32_t _internal_playerid() const;
  void _internal_set_playerid(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_SHOT_HIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerid_;
    uint32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_THROW_GRENADE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.SC_THROW_GRENADE) */ {
 public:
  inline SC_THROW_GRENADE() : SC_THROW_GRENADE(nullptr) {}
  ~SC_THROW_GRENADE() override;
  explicit PROTOBUF_CONSTEXPR SC_THROW_GRENADE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_THROW_GRENADE(const SC_THROW_GRENADE& from);
  SC_THROW_GRENADE(SC_THROW_GRENADE&& from) noexcept
    : SC_THROW_GRENADE() {
    *this = ::std::move(from);
  }

  inline SC_THROW_GRENADE& operator=(const SC_THROW_GRENADE& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_THROW_GRENADE& operator=(SC_THROW_GRENADE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_THROW_GRENADE& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_THROW_GRENADE* internal_default_instance() {
    return reinterpret_cast<const SC_THROW_GRENADE*>(
               &_SC_THROW_GRENADE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SC_THROW_GRENADE& a, SC_THROW_GRENADE& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_THROW_GRENADE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_THROW_GRENADE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_THROW_GRENADE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_THROW_GRENADE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_THROW_GRENADE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_THROW_GRENADE& from) {
    SC_THROW_GRENADE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_THROW_GRENADE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.SC_THROW_GRENADE";
  }
  protected:
  explicit SC_THROW_GRENADE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
    kDirXFieldNumber = 4,
    kDirYFieldNumber = 5,
    kDirZFieldNumber = 6,
  };
  // uint32 posX = 1;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 2;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // uint32 posZ = 3;
  void clear_posz();
  uint32_t posz() const;
  void set_posz(uint32_t value);
  private:
  uint32_t _internal_posz() const;
  void _internal_set_posz(uint32_t value);
  public:

  // fixed32 dirX = 4;
  void clear_dirx();
  uint32_t dirx() const;
  void set_dirx(uint32_t value);
  private:
  uint32_t _internal_dirx() const;
  void _internal_set_dirx(uint32_t value);
  public:

  // fixed32 dirY = 5;
  void clear_diry();
  uint32_t diry() const;
  void set_diry(uint32_t value);
  private:
  uint32_t _internal_diry() const;
  void _internal_set_diry(uint32_t value);
  public:

  // fixed32 dirZ = 6;
  void clear_dirz();
  uint32_t dirz() const;
  void set_dirz(uint32_t value);
  private:
  uint32_t _internal_dirz() const;
  void _internal_set_dirz(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.SC_THROW_GRENADE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t posx_;
    uint32_t posy_;
    uint32_t posz_;
    uint32_t dirx_;
    uint32_t diry_;
    uint32_t dirz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_ATTACK

// bool bAttack = 1;
inline void CS_ATTACK::clear_battack() {
  _impl_.battack_ = false;
}
inline bool CS_ATTACK::_internal_battack() const {
  return _impl_.battack_;
}
inline bool CS_ATTACK::battack() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.bAttack)
  return _internal_battack();
}
inline void CS_ATTACK::_internal_set_battack(bool value) {
  
  _impl_.battack_ = value;
}
inline void CS_ATTACK::set_battack(bool value) {
  _internal_set_battack(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.bAttack)
}

// uint32 normalX = 2;
inline void CS_ATTACK::clear_normalx() {
  _impl_.normalx_ = 0u;
}
inline uint32_t CS_ATTACK::_internal_normalx() const {
  return _impl_.normalx_;
}
inline uint32_t CS_ATTACK::normalx() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.normalX)
  return _internal_normalx();
}
inline void CS_ATTACK::_internal_set_normalx(uint32_t value) {
  
  _impl_.normalx_ = value;
}
inline void CS_ATTACK::set_normalx(uint32_t value) {
  _internal_set_normalx(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.normalX)
}

// uint32 normalY = 3;
inline void CS_ATTACK::clear_normaly() {
  _impl_.normaly_ = 0u;
}
inline uint32_t CS_ATTACK::_internal_normaly() const {
  return _impl_.normaly_;
}
inline uint32_t CS_ATTACK::normaly() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.normalY)
  return _internal_normaly();
}
inline void CS_ATTACK::_internal_set_normaly(uint32_t value) {
  
  _impl_.normaly_ = value;
}
inline void CS_ATTACK::set_normaly(uint32_t value) {
  _internal_set_normaly(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.normalY)
}

// uint32 normalZ = 4;
inline void CS_ATTACK::clear_normalz() {
  _impl_.normalz_ = 0u;
}
inline uint32_t CS_ATTACK::_internal_normalz() const {
  return _impl_.normalz_;
}
inline uint32_t CS_ATTACK::normalz() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.normalZ)
  return _internal_normalz();
}
inline void CS_ATTACK::_internal_set_normalz(uint32_t value) {
  
  _impl_.normalz_ = value;
}
inline void CS_ATTACK::set_normalz(uint32_t value) {
  _internal_set_normalz(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.normalZ)
}

// uint32 posX = 5;
inline void CS_ATTACK::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t CS_ATTACK::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t CS_ATTACK::posx() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.posX)
  return _internal_posx();
}
inline void CS_ATTACK::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void CS_ATTACK::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.posX)
}

// uint32 posY = 6;
inline void CS_ATTACK::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t CS_ATTACK::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t CS_ATTACK::posy() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.posY)
  return _internal_posy();
}
inline void CS_ATTACK::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void CS_ATTACK::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.posY)
}

// uint32 posZ = 7;
inline void CS_ATTACK::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t CS_ATTACK::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t CS_ATTACK::posz() const {
  // @@protoc_insertion_point(field_get:game.CS_ATTACK.posZ)
  return _internal_posz();
}
inline void CS_ATTACK::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void CS_ATTACK::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.CS_ATTACK.posZ)
}

// -------------------------------------------------------------------

// CS_CHANGE_WEAPON

// uint32 weapon = 1;
inline void CS_CHANGE_WEAPON::clear_weapon() {
  _impl_.weapon_ = 0u;
}
inline uint32_t CS_CHANGE_WEAPON::_internal_weapon() const {
  return _impl_.weapon_;
}
inline uint32_t CS_CHANGE_WEAPON::weapon() const {
  // @@protoc_insertion_point(field_get:game.CS_CHANGE_WEAPON.weapon)
  return _internal_weapon();
}
inline void CS_CHANGE_WEAPON::_internal_set_weapon(uint32_t value) {
  
  _impl_.weapon_ = value;
}
inline void CS_CHANGE_WEAPON::set_weapon(uint32_t value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:game.CS_CHANGE_WEAPON.weapon)
}

// -------------------------------------------------------------------

// CS_GRENADE_EXPLOSITION_POS

// uint32 posX = 1;
inline void CS_GRENADE_EXPLOSITION_POS::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t CS_GRENADE_EXPLOSITION_POS::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t CS_GRENADE_EXPLOSITION_POS::posx() const {
  // @@protoc_insertion_point(field_get:game.CS_GRENADE_EXPLOSITION_POS.posX)
  return _internal_posx();
}
inline void CS_GRENADE_EXPLOSITION_POS::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void CS_GRENADE_EXPLOSITION_POS::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.CS_GRENADE_EXPLOSITION_POS.posX)
}

// uint32 posY = 2;
inline void CS_GRENADE_EXPLOSITION_POS::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t CS_GRENADE_EXPLOSITION_POS::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t CS_GRENADE_EXPLOSITION_POS::posy() const {
  // @@protoc_insertion_point(field_get:game.CS_GRENADE_EXPLOSITION_POS.posY)
  return _internal_posy();
}
inline void CS_GRENADE_EXPLOSITION_POS::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void CS_GRENADE_EXPLOSITION_POS::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.CS_GRENADE_EXPLOSITION_POS.posY)
}

// uint32 posZ = 3;
inline void CS_GRENADE_EXPLOSITION_POS::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t CS_GRENADE_EXPLOSITION_POS::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t CS_GRENADE_EXPLOSITION_POS::posz() const {
  // @@protoc_insertion_point(field_get:game.CS_GRENADE_EXPLOSITION_POS.posZ)
  return _internal_posz();
}
inline void CS_GRENADE_EXPLOSITION_POS::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void CS_GRENADE_EXPLOSITION_POS::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.CS_GRENADE_EXPLOSITION_POS.posZ)
}

// -------------------------------------------------------------------

// CS_ITEM_PICKED

// uint32 itemId = 1;
inline void CS_ITEM_PICKED::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t CS_ITEM_PICKED::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t CS_ITEM_PICKED::itemid() const {
  // @@protoc_insertion_point(field_get:game.CS_ITEM_PICKED.itemId)
  return _internal_itemid();
}
inline void CS_ITEM_PICKED::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void CS_ITEM_PICKED::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:game.CS_ITEM_PICKED.itemId)
}

// -------------------------------------------------------------------

// CS_KEY_INPUT

// uint32 keyW = 1;
inline void CS_KEY_INPUT::clear_keyw() {
  _impl_.keyw_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_keyw() const {
  return _impl_.keyw_;
}
inline uint32_t CS_KEY_INPUT::keyw() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.keyW)
  return _internal_keyw();
}
inline void CS_KEY_INPUT::_internal_set_keyw(uint32_t value) {
  
  _impl_.keyw_ = value;
}
inline void CS_KEY_INPUT::set_keyw(uint32_t value) {
  _internal_set_keyw(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.keyW)
}

// uint32 keyA = 2;
inline void CS_KEY_INPUT::clear_keya() {
  _impl_.keya_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_keya() const {
  return _impl_.keya_;
}
inline uint32_t CS_KEY_INPUT::keya() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.keyA)
  return _internal_keya();
}
inline void CS_KEY_INPUT::_internal_set_keya(uint32_t value) {
  
  _impl_.keya_ = value;
}
inline void CS_KEY_INPUT::set_keya(uint32_t value) {
  _internal_set_keya(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.keyA)
}

// uint32 keyS = 3;
inline void CS_KEY_INPUT::clear_keys() {
  _impl_.keys_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_keys() const {
  return _impl_.keys_;
}
inline uint32_t CS_KEY_INPUT::keys() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.keyS)
  return _internal_keys();
}
inline void CS_KEY_INPUT::_internal_set_keys(uint32_t value) {
  
  _impl_.keys_ = value;
}
inline void CS_KEY_INPUT::set_keys(uint32_t value) {
  _internal_set_keys(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.keyS)
}

// uint32 keyD = 4;
inline void CS_KEY_INPUT::clear_keyd() {
  _impl_.keyd_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_keyd() const {
  return _impl_.keyd_;
}
inline uint32_t CS_KEY_INPUT::keyd() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.keyD)
  return _internal_keyd();
}
inline void CS_KEY_INPUT::_internal_set_keyd(uint32_t value) {
  
  _impl_.keyd_ = value;
}
inline void CS_KEY_INPUT::set_keyd(uint32_t value) {
  _internal_set_keyd(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.keyD)
}

// fixed32 rotateAxisX = 5;
inline void CS_KEY_INPUT::clear_rotateaxisx() {
  _impl_.rotateaxisx_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_rotateaxisx() const {
  return _impl_.rotateaxisx_;
}
inline uint32_t CS_KEY_INPUT::rotateaxisx() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.rotateAxisX)
  return _internal_rotateaxisx();
}
inline void CS_KEY_INPUT::_internal_set_rotateaxisx(uint32_t value) {
  
  _impl_.rotateaxisx_ = value;
}
inline void CS_KEY_INPUT::set_rotateaxisx(uint32_t value) {
  _internal_set_rotateaxisx(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.rotateAxisX)
}

// fixed32 rotateAxisY = 6;
inline void CS_KEY_INPUT::clear_rotateaxisy() {
  _impl_.rotateaxisy_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_rotateaxisy() const {
  return _impl_.rotateaxisy_;
}
inline uint32_t CS_KEY_INPUT::rotateaxisy() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.rotateAxisY)
  return _internal_rotateaxisy();
}
inline void CS_KEY_INPUT::_internal_set_rotateaxisy(uint32_t value) {
  
  _impl_.rotateaxisy_ = value;
}
inline void CS_KEY_INPUT::set_rotateaxisy(uint32_t value) {
  _internal_set_rotateaxisy(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.rotateAxisY)
}

// uint32 Jump = 7;
inline void CS_KEY_INPUT::clear_jump() {
  _impl_.jump_ = 0u;
}
inline uint32_t CS_KEY_INPUT::_internal_jump() const {
  return _impl_.jump_;
}
inline uint32_t CS_KEY_INPUT::jump() const {
  // @@protoc_insertion_point(field_get:game.CS_KEY_INPUT.Jump)
  return _internal_jump();
}
inline void CS_KEY_INPUT::_internal_set_jump(uint32_t value) {
  
  _impl_.jump_ = value;
}
inline void CS_KEY_INPUT::set_jump(uint32_t value) {
  _internal_set_jump(value);
  // @@protoc_insertion_point(field_set:game.CS_KEY_INPUT.Jump)
}

// -------------------------------------------------------------------

// CS_POS_INTERPOLATION

// uint32 posX = 1;
inline void CS_POS_INTERPOLATION::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t CS_POS_INTERPOLATION::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t CS_POS_INTERPOLATION::posx() const {
  // @@protoc_insertion_point(field_get:game.CS_POS_INTERPOLATION.posX)
  return _internal_posx();
}
inline void CS_POS_INTERPOLATION::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void CS_POS_INTERPOLATION::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.CS_POS_INTERPOLATION.posX)
}

// uint32 posY = 2;
inline void CS_POS_INTERPOLATION::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t CS_POS_INTERPOLATION::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t CS_POS_INTERPOLATION::posy() const {
  // @@protoc_insertion_point(field_get:game.CS_POS_INTERPOLATION.posY)
  return _internal_posy();
}
inline void CS_POS_INTERPOLATION::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void CS_POS_INTERPOLATION::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.CS_POS_INTERPOLATION.posY)
}

// uint32 posZ = 3;
inline void CS_POS_INTERPOLATION::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t CS_POS_INTERPOLATION::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t CS_POS_INTERPOLATION::posz() const {
  // @@protoc_insertion_point(field_get:game.CS_POS_INTERPOLATION.posZ)
  return _internal_posz();
}
inline void CS_POS_INTERPOLATION::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void CS_POS_INTERPOLATION::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.CS_POS_INTERPOLATION.posZ)
}

// -------------------------------------------------------------------

// CS_REQUEST_RESTART

// uint32 playerId = 1;
inline void CS_REQUEST_RESTART::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t CS_REQUEST_RESTART::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t CS_REQUEST_RESTART::playerid() const {
  // @@protoc_insertion_point(field_get:game.CS_REQUEST_RESTART.playerId)
  return _internal_playerid();
}
inline void CS_REQUEST_RESTART::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void CS_REQUEST_RESTART::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.CS_REQUEST_RESTART.playerId)
}

// uint32 weapon = 2;
inline void CS_REQUEST_RESTART::clear_weapon() {
  _impl_.weapon_ = 0u;
}
inline uint32_t CS_REQUEST_RESTART::_internal_weapon() const {
  return _impl_.weapon_;
}
inline uint32_t CS_REQUEST_RESTART::weapon() const {
  // @@protoc_insertion_point(field_get:game.CS_REQUEST_RESTART.weapon)
  return _internal_weapon();
}
inline void CS_REQUEST_RESTART::_internal_set_weapon(uint32_t value) {
  
  _impl_.weapon_ = value;
}
inline void CS_REQUEST_RESTART::set_weapon(uint32_t value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:game.CS_REQUEST_RESTART.weapon)
}

// -------------------------------------------------------------------

// CS_SEND_NICKNAME

// string name = 1;
inline void CS_SEND_NICKNAME::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CS_SEND_NICKNAME::name() const {
  // @@protoc_insertion_point(field_get:game.CS_SEND_NICKNAME.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_SEND_NICKNAME::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.CS_SEND_NICKNAME.name)
}
inline std::string* CS_SEND_NICKNAME::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.CS_SEND_NICKNAME.name)
  return _s;
}
inline const std::string& CS_SEND_NICKNAME::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CS_SEND_NICKNAME::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_SEND_NICKNAME::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_SEND_NICKNAME::release_name() {
  // @@protoc_insertion_point(field_release:game.CS_SEND_NICKNAME.name)
  return _impl_.name_.Release();
}
inline void CS_SEND_NICKNAME::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.CS_SEND_NICKNAME.name)
}

// -------------------------------------------------------------------

// CS_SHOT_HIT

// uint32 playerId = 1;
inline void CS_SHOT_HIT::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t CS_SHOT_HIT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t CS_SHOT_HIT::playerid() const {
  // @@protoc_insertion_point(field_get:game.CS_SHOT_HIT.playerId)
  return _internal_playerid();
}
inline void CS_SHOT_HIT::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void CS_SHOT_HIT::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.CS_SHOT_HIT.playerId)
}

// uint32 hp = 2;
inline void CS_SHOT_HIT::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t CS_SHOT_HIT::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t CS_SHOT_HIT::hp() const {
  // @@protoc_insertion_point(field_get:game.CS_SHOT_HIT.hp)
  return _internal_hp();
}
inline void CS_SHOT_HIT::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void CS_SHOT_HIT::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:game.CS_SHOT_HIT.hp)
}

// -------------------------------------------------------------------

// CS_THROW_GRENADE

// uint32 posX = 1;
inline void CS_THROW_GRENADE::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t CS_THROW_GRENADE::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t CS_THROW_GRENADE::posx() const {
  // @@protoc_insertion_point(field_get:game.CS_THROW_GRENADE.posX)
  return _internal_posx();
}
inline void CS_THROW_GRENADE::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void CS_THROW_GRENADE::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.CS_THROW_GRENADE.posX)
}

// uint32 posY = 2;
inline void CS_THROW_GRENADE::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t CS_THROW_GRENADE::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t CS_THROW_GRENADE::posy() const {
  // @@protoc_insertion_point(field_get:game.CS_THROW_GRENADE.posY)
  return _internal_posy();
}
inline void CS_THROW_GRENADE::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void CS_THROW_GRENADE::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.CS_THROW_GRENADE.posY)
}

// uint32 posZ = 3;
inline void CS_THROW_GRENADE::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t CS_THROW_GRENADE::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t CS_THROW_GRENADE::posz() const {
  // @@protoc_insertion_point(field_get:game.CS_THROW_GRENADE.posZ)
  return _internal_posz();
}
inline void CS_THROW_GRENADE::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void CS_THROW_GRENADE::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.CS_THROW_GRENADE.posZ)
}

// fixed32 dirX = 4;
inline void CS_THROW_GRENADE::clear_dirx() {
  _impl_.dirx_ = 0u;
}
inline uint32_t CS_THROW_GRENADE::_internal_dirx() const {
  return _impl_.dirx_;
}
inline uint32_t CS_THROW_GRENADE::dirx() const {
  // @@protoc_insertion_point(field_get:game.CS_THROW_GRENADE.dirX)
  return _internal_dirx();
}
inline void CS_THROW_GRENADE::_internal_set_dirx(uint32_t value) {
  
  _impl_.dirx_ = value;
}
inline void CS_THROW_GRENADE::set_dirx(uint32_t value) {
  _internal_set_dirx(value);
  // @@protoc_insertion_point(field_set:game.CS_THROW_GRENADE.dirX)
}

// fixed32 dirY = 5;
inline void CS_THROW_GRENADE::clear_diry() {
  _impl_.diry_ = 0u;
}
inline uint32_t CS_THROW_GRENADE::_internal_diry() const {
  return _impl_.diry_;
}
inline uint32_t CS_THROW_GRENADE::diry() const {
  // @@protoc_insertion_point(field_get:game.CS_THROW_GRENADE.dirY)
  return _internal_diry();
}
inline void CS_THROW_GRENADE::_internal_set_diry(uint32_t value) {
  
  _impl_.diry_ = value;
}
inline void CS_THROW_GRENADE::set_diry(uint32_t value) {
  _internal_set_diry(value);
  // @@protoc_insertion_point(field_set:game.CS_THROW_GRENADE.dirY)
}

// fixed32 dirZ = 6;
inline void CS_THROW_GRENADE::clear_dirz() {
  _impl_.dirz_ = 0u;
}
inline uint32_t CS_THROW_GRENADE::_internal_dirz() const {
  return _impl_.dirz_;
}
inline uint32_t CS_THROW_GRENADE::dirz() const {
  // @@protoc_insertion_point(field_get:game.CS_THROW_GRENADE.dirZ)
  return _internal_dirz();
}
inline void CS_THROW_GRENADE::_internal_set_dirz(uint32_t value) {
  
  _impl_.dirz_ = value;
}
inline void CS_THROW_GRENADE::set_dirz(uint32_t value) {
  _internal_set_dirz(value);
  // @@protoc_insertion_point(field_set:game.CS_THROW_GRENADE.dirZ)
}

// -------------------------------------------------------------------

// KDAInfo

// uint32 kill = 1;
inline void KDAInfo::clear_kill() {
  _impl_.kill_ = 0u;
}
inline uint32_t KDAInfo::_internal_kill() const {
  return _impl_.kill_;
}
inline uint32_t KDAInfo::kill() const {
  // @@protoc_insertion_point(field_get:game.KDAInfo.kill)
  return _internal_kill();
}
inline void KDAInfo::_internal_set_kill(uint32_t value) {
  
  _impl_.kill_ = value;
}
inline void KDAInfo::set_kill(uint32_t value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:game.KDAInfo.kill)
}

// uint32 death = 2;
inline void KDAInfo::clear_death() {
  _impl_.death_ = 0u;
}
inline uint32_t KDAInfo::_internal_death() const {
  return _impl_.death_;
}
inline uint32_t KDAInfo::death() const {
  // @@protoc_insertion_point(field_get:game.KDAInfo.death)
  return _internal_death();
}
inline void KDAInfo::_internal_set_death(uint32_t value) {
  
  _impl_.death_ = value;
}
inline void KDAInfo::set_death(uint32_t value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:game.KDAInfo.death)
}

// uint32 assist = 3;
inline void KDAInfo::clear_assist() {
  _impl_.assist_ = 0u;
}
inline uint32_t KDAInfo::_internal_assist() const {
  return _impl_.assist_;
}
inline uint32_t KDAInfo::assist() const {
  // @@protoc_insertion_point(field_get:game.KDAInfo.assist)
  return _internal_assist();
}
inline void KDAInfo::_internal_set_assist(uint32_t value) {
  
  _impl_.assist_ = value;
}
inline void KDAInfo::set_assist(uint32_t value) {
  _internal_set_assist(value);
  // @@protoc_insertion_point(field_set:game.KDAInfo.assist)
}

// -------------------------------------------------------------------

// PlayerInfo

// uint32 playerId = 1;
inline void PlayerInfo::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t PlayerInfo::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:game.PlayerInfo.playerId)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void PlayerInfo::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.PlayerInfo.playerId)
}

// .game.KDAInfo kda = 2;
inline bool PlayerInfo::_internal_has_kda() const {
  return this != internal_default_instance() && _impl_.kda_ != nullptr;
}
inline bool PlayerInfo::has_kda() const {
  return _internal_has_kda();
}
inline void PlayerInfo::clear_kda() {
  if (GetArenaForAllocation() == nullptr && _impl_.kda_ != nullptr) {
    delete _impl_.kda_;
  }
  _impl_.kda_ = nullptr;
}
inline const ::game::KDAInfo& PlayerInfo::_internal_kda() const {
  const ::game::KDAInfo* p = _impl_.kda_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::KDAInfo&>(
      ::game::_KDAInfo_default_instance_);
}
inline const ::game::KDAInfo& PlayerInfo::kda() const {
  // @@protoc_insertion_point(field_get:game.PlayerInfo.kda)
  return _internal_kda();
}
inline void PlayerInfo::unsafe_arena_set_allocated_kda(
    ::game::KDAInfo* kda) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kda_);
  }
  _impl_.kda_ = kda;
  if (kda) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.PlayerInfo.kda)
}
inline ::game::KDAInfo* PlayerInfo::release_kda() {
  
  ::game::KDAInfo* temp = _impl_.kda_;
  _impl_.kda_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::KDAInfo* PlayerInfo::unsafe_arena_release_kda() {
  // @@protoc_insertion_point(field_release:game.PlayerInfo.kda)
  
  ::game::KDAInfo* temp = _impl_.kda_;
  _impl_.kda_ = nullptr;
  return temp;
}
inline ::game::KDAInfo* PlayerInfo::_internal_mutable_kda() {
  
  if (_impl_.kda_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::KDAInfo>(GetArenaForAllocation());
    _impl_.kda_ = p;
  }
  return _impl_.kda_;
}
inline ::game::KDAInfo* PlayerInfo::mutable_kda() {
  ::game::KDAInfo* _msg = _internal_mutable_kda();
  // @@protoc_insertion_point(field_mutable:game.PlayerInfo.kda)
  return _msg;
}
inline void PlayerInfo::set_allocated_kda(::game::KDAInfo* kda) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kda_;
  }
  if (kda) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kda);
    if (message_arena != submessage_arena) {
      kda = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kda, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kda_ = kda;
  // @@protoc_insertion_point(field_set_allocated:game.PlayerInfo.kda)
}

// -------------------------------------------------------------------

// SC_ATTACK

// uint32 playerId = 1;
inline void SC_ATTACK::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_ATTACK::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.playerId)
  return _internal_playerid();
}
inline void SC_ATTACK::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_ATTACK::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.playerId)
}

// uint32 normalX = 2;
inline void SC_ATTACK::clear_normalx() {
  _impl_.normalx_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_normalx() const {
  return _impl_.normalx_;
}
inline uint32_t SC_ATTACK::normalx() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.normalX)
  return _internal_normalx();
}
inline void SC_ATTACK::_internal_set_normalx(uint32_t value) {
  
  _impl_.normalx_ = value;
}
inline void SC_ATTACK::set_normalx(uint32_t value) {
  _internal_set_normalx(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.normalX)
}

// uint32 normalY = 3;
inline void SC_ATTACK::clear_normaly() {
  _impl_.normaly_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_normaly() const {
  return _impl_.normaly_;
}
inline uint32_t SC_ATTACK::normaly() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.normalY)
  return _internal_normaly();
}
inline void SC_ATTACK::_internal_set_normaly(uint32_t value) {
  
  _impl_.normaly_ = value;
}
inline void SC_ATTACK::set_normaly(uint32_t value) {
  _internal_set_normaly(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.normalY)
}

// uint32 normalZ = 4;
inline void SC_ATTACK::clear_normalz() {
  _impl_.normalz_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_normalz() const {
  return _impl_.normalz_;
}
inline uint32_t SC_ATTACK::normalz() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.normalZ)
  return _internal_normalz();
}
inline void SC_ATTACK::_internal_set_normalz(uint32_t value) {
  
  _impl_.normalz_ = value;
}
inline void SC_ATTACK::set_normalz(uint32_t value) {
  _internal_set_normalz(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.normalZ)
}

// uint32 posX = 5;
inline void SC_ATTACK::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t SC_ATTACK::posx() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.posX)
  return _internal_posx();
}
inline void SC_ATTACK::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void SC_ATTACK::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.posX)
}

// uint32 posY = 6;
inline void SC_ATTACK::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t SC_ATTACK::posy() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.posY)
  return _internal_posy();
}
inline void SC_ATTACK::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void SC_ATTACK::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.posY)
}

// uint32 posZ = 7;
inline void SC_ATTACK::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t SC_ATTACK::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t SC_ATTACK::posz() const {
  // @@protoc_insertion_point(field_get:game.SC_ATTACK.posZ)
  return _internal_posz();
}
inline void SC_ATTACK::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void SC_ATTACK::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.SC_ATTACK.posZ)
}

// -------------------------------------------------------------------

// SC_CHANGE_WEAPON

// uint32 playerId = 1;
inline void SC_CHANGE_WEAPON::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_CHANGE_WEAPON::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_CHANGE_WEAPON::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_CHANGE_WEAPON.playerId)
  return _internal_playerid();
}
inline void SC_CHANGE_WEAPON::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_CHANGE_WEAPON::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_CHANGE_WEAPON.playerId)
}

// uint32 weapon = 2;
inline void SC_CHANGE_WEAPON::clear_weapon() {
  _impl_.weapon_ = 0u;
}
inline uint32_t SC_CHANGE_WEAPON::_internal_weapon() const {
  return _impl_.weapon_;
}
inline uint32_t SC_CHANGE_WEAPON::weapon() const {
  // @@protoc_insertion_point(field_get:game.SC_CHANGE_WEAPON.weapon)
  return _internal_weapon();
}
inline void SC_CHANGE_WEAPON::_internal_set_weapon(uint32_t value) {
  
  _impl_.weapon_ = value;
}
inline void SC_CHANGE_WEAPON::set_weapon(uint32_t value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:game.SC_CHANGE_WEAPON.weapon)
}

// -------------------------------------------------------------------

// SC_CHARACTER_DOWN

// uint32 playerId = 1;
inline void SC_CHARACTER_DOWN::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_CHARACTER_DOWN::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_CHARACTER_DOWN::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_CHARACTER_DOWN.playerId)
  return _internal_playerid();
}
inline void SC_CHARACTER_DOWN::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_CHARACTER_DOWN::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_CHARACTER_DOWN.playerId)
}

// uint32 teamID = 2;
inline void SC_CHARACTER_DOWN::clear_teamid() {
  _impl_.teamid_ = 0u;
}
inline uint32_t SC_CHARACTER_DOWN::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint32_t SC_CHARACTER_DOWN::teamid() const {
  // @@protoc_insertion_point(field_get:game.SC_CHARACTER_DOWN.teamID)
  return _internal_teamid();
}
inline void SC_CHARACTER_DOWN::_internal_set_teamid(uint32_t value) {
  
  _impl_.teamid_ = value;
}
inline void SC_CHARACTER_DOWN::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:game.SC_CHARACTER_DOWN.teamID)
}

// -------------------------------------------------------------------

// SC_CHARACTER_KILL_LOG

// repeated .game.PlayerInfo playerInfoList = 1;
inline int SC_CHARACTER_KILL_LOG::_internal_playerinfolist_size() const {
  return _impl_.playerinfolist_.size();
}
inline int SC_CHARACTER_KILL_LOG::playerinfolist_size() const {
  return _internal_playerinfolist_size();
}
inline void SC_CHARACTER_KILL_LOG::clear_playerinfolist() {
  _impl_.playerinfolist_.Clear();
}
inline ::game::PlayerInfo* SC_CHARACTER_KILL_LOG::mutable_playerinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:game.SC_CHARACTER_KILL_LOG.playerInfoList)
  return _impl_.playerinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >*
SC_CHARACTER_KILL_LOG::mutable_playerinfolist() {
  // @@protoc_insertion_point(field_mutable_list:game.SC_CHARACTER_KILL_LOG.playerInfoList)
  return &_impl_.playerinfolist_;
}
inline const ::game::PlayerInfo& SC_CHARACTER_KILL_LOG::_internal_playerinfolist(int index) const {
  return _impl_.playerinfolist_.Get(index);
}
inline const ::game::PlayerInfo& SC_CHARACTER_KILL_LOG::playerinfolist(int index) const {
  // @@protoc_insertion_point(field_get:game.SC_CHARACTER_KILL_LOG.playerInfoList)
  return _internal_playerinfolist(index);
}
inline ::game::PlayerInfo* SC_CHARACTER_KILL_LOG::_internal_add_playerinfolist() {
  return _impl_.playerinfolist_.Add();
}
inline ::game::PlayerInfo* SC_CHARACTER_KILL_LOG::add_playerinfolist() {
  ::game::PlayerInfo* _add = _internal_add_playerinfolist();
  // @@protoc_insertion_point(field_add:game.SC_CHARACTER_KILL_LOG.playerInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::PlayerInfo >&
SC_CHARACTER_KILL_LOG::playerinfolist() const {
  // @@protoc_insertion_point(field_list:game.SC_CHARACTER_KILL_LOG.playerInfoList)
  return _impl_.playerinfolist_;
}

// -------------------------------------------------------------------

// SC_CREATE_MY_CHARACTER

// uint32 playerId = 1;
inline void SC_CREATE_MY_CHARACTER::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_CREATE_MY_CHARACTER::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_CREATE_MY_CHARACTER::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MY_CHARACTER.playerId)
  return _internal_playerid();
}
inline void SC_CREATE_MY_CHARACTER::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_CREATE_MY_CHARACTER::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_MY_CHARACTER.playerId)
}

// uint32 posIndex = 2;
inline void SC_CREATE_MY_CHARACTER::clear_posindex() {
  _impl_.posindex_ = 0u;
}
inline uint32_t SC_CREATE_MY_CHARACTER::_internal_posindex() const {
  return _impl_.posindex_;
}
inline uint32_t SC_CREATE_MY_CHARACTER::posindex() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MY_CHARACTER.posIndex)
  return _internal_posindex();
}
inline void SC_CREATE_MY_CHARACTER::_internal_set_posindex(uint32_t value) {
  
  _impl_.posindex_ = value;
}
inline void SC_CREATE_MY_CHARACTER::set_posindex(uint32_t value) {
  _internal_set_posindex(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_MY_CHARACTER.posIndex)
}

// uint32 maxHP = 3;
inline void SC_CREATE_MY_CHARACTER::clear_maxhp() {
  _impl_.maxhp_ = 0u;
}
inline uint32_t SC_CREATE_MY_CHARACTER::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint32_t SC_CREATE_MY_CHARACTER::maxhp() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MY_CHARACTER.maxHP)
  return _internal_maxhp();
}
inline void SC_CREATE_MY_CHARACTER::_internal_set_maxhp(uint32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void SC_CREATE_MY_CHARACTER::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_MY_CHARACTER.maxHP)
}

// uint32 teamID = 4;
inline void SC_CREATE_MY_CHARACTER::clear_teamid() {
  _impl_.teamid_ = 0u;
}
inline uint32_t SC_CREATE_MY_CHARACTER::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint32_t SC_CREATE_MY_CHARACTER::teamid() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_MY_CHARACTER.teamID)
  return _internal_teamid();
}
inline void SC_CREATE_MY_CHARACTER::_internal_set_teamid(uint32_t value) {
  
  _impl_.teamid_ = value;
}
inline void SC_CREATE_MY_CHARACTER::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_MY_CHARACTER.teamID)
}

// -------------------------------------------------------------------

// SC_CREATE_OTHER_CHARACTER

// uint32 playerId = 1;
inline void SC_CREATE_OTHER_CHARACTER::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.playerId)
  return _internal_playerid();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_CREATE_OTHER_CHARACTER::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.playerId)
}

// uint32 posIndex = 2;
inline void SC_CREATE_OTHER_CHARACTER::clear_posindex() {
  _impl_.posindex_ = 0u;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::_internal_posindex() const {
  return _impl_.posindex_;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::posindex() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.posIndex)
  return _internal_posindex();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_posindex(uint32_t value) {
  
  _impl_.posindex_ = value;
}
inline void SC_CREATE_OTHER_CHARACTER::set_posindex(uint32_t value) {
  _internal_set_posindex(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.posIndex)
}

// uint32 maxHP = 3;
inline void SC_CREATE_OTHER_CHARACTER::clear_maxhp() {
  _impl_.maxhp_ = 0u;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::maxhp() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.maxHP)
  return _internal_maxhp();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_maxhp(uint32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void SC_CREATE_OTHER_CHARACTER::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.maxHP)
}

// uint32 curHP = 4;
inline void SC_CREATE_OTHER_CHARACTER::clear_curhp() {
  _impl_.curhp_ = 0u;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::_internal_curhp() const {
  return _impl_.curhp_;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::curhp() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.curHP)
  return _internal_curhp();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_curhp(uint32_t value) {
  
  _impl_.curhp_ = value;
}
inline void SC_CREATE_OTHER_CHARACTER::set_curhp(uint32_t value) {
  _internal_set_curhp(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.curHP)
}

// string name = 5;
inline void SC_CREATE_OTHER_CHARACTER::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SC_CREATE_OTHER_CHARACTER::name() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SC_CREATE_OTHER_CHARACTER::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.name)
}
inline std::string* SC_CREATE_OTHER_CHARACTER::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:game.SC_CREATE_OTHER_CHARACTER.name)
  return _s;
}
inline const std::string& SC_CREATE_OTHER_CHARACTER::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SC_CREATE_OTHER_CHARACTER::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SC_CREATE_OTHER_CHARACTER::release_name() {
  // @@protoc_insertion_point(field_release:game.SC_CREATE_OTHER_CHARACTER.name)
  return _impl_.name_.Release();
}
inline void SC_CREATE_OTHER_CHARACTER::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.SC_CREATE_OTHER_CHARACTER.name)
}

// .game.KDAInfo kdaInfo = 6;
inline bool SC_CREATE_OTHER_CHARACTER::_internal_has_kdainfo() const {
  return this != internal_default_instance() && _impl_.kdainfo_ != nullptr;
}
inline bool SC_CREATE_OTHER_CHARACTER::has_kdainfo() const {
  return _internal_has_kdainfo();
}
inline void SC_CREATE_OTHER_CHARACTER::clear_kdainfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.kdainfo_ != nullptr) {
    delete _impl_.kdainfo_;
  }
  _impl_.kdainfo_ = nullptr;
}
inline const ::game::KDAInfo& SC_CREATE_OTHER_CHARACTER::_internal_kdainfo() const {
  const ::game::KDAInfo* p = _impl_.kdainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::KDAInfo&>(
      ::game::_KDAInfo_default_instance_);
}
inline const ::game::KDAInfo& SC_CREATE_OTHER_CHARACTER::kdainfo() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.kdaInfo)
  return _internal_kdainfo();
}
inline void SC_CREATE_OTHER_CHARACTER::unsafe_arena_set_allocated_kdainfo(
    ::game::KDAInfo* kdainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kdainfo_);
  }
  _impl_.kdainfo_ = kdainfo;
  if (kdainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.SC_CREATE_OTHER_CHARACTER.kdaInfo)
}
inline ::game::KDAInfo* SC_CREATE_OTHER_CHARACTER::release_kdainfo() {
  
  ::game::KDAInfo* temp = _impl_.kdainfo_;
  _impl_.kdainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::KDAInfo* SC_CREATE_OTHER_CHARACTER::unsafe_arena_release_kdainfo() {
  // @@protoc_insertion_point(field_release:game.SC_CREATE_OTHER_CHARACTER.kdaInfo)
  
  ::game::KDAInfo* temp = _impl_.kdainfo_;
  _impl_.kdainfo_ = nullptr;
  return temp;
}
inline ::game::KDAInfo* SC_CREATE_OTHER_CHARACTER::_internal_mutable_kdainfo() {
  
  if (_impl_.kdainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::KDAInfo>(GetArenaForAllocation());
    _impl_.kdainfo_ = p;
  }
  return _impl_.kdainfo_;
}
inline ::game::KDAInfo* SC_CREATE_OTHER_CHARACTER::mutable_kdainfo() {
  ::game::KDAInfo* _msg = _internal_mutable_kdainfo();
  // @@protoc_insertion_point(field_mutable:game.SC_CREATE_OTHER_CHARACTER.kdaInfo)
  return _msg;
}
inline void SC_CREATE_OTHER_CHARACTER::set_allocated_kdainfo(::game::KDAInfo* kdainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kdainfo_;
  }
  if (kdainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kdainfo);
    if (message_arena != submessage_arena) {
      kdainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kdainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kdainfo_ = kdainfo;
  // @@protoc_insertion_point(field_set_allocated:game.SC_CREATE_OTHER_CHARACTER.kdaInfo)
}

// uint32 weapon = 7;
inline void SC_CREATE_OTHER_CHARACTER::clear_weapon() {
  _impl_.weapon_ = 0u;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::_internal_weapon() const {
  return _impl_.weapon_;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::weapon() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.weapon)
  return _internal_weapon();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_weapon(uint32_t value) {
  
  _impl_.weapon_ = value;
}
inline void SC_CREATE_OTHER_CHARACTER::set_weapon(uint32_t value) {
  _internal_set_weapon(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.weapon)
}

// uint32 teamID = 8;
inline void SC_CREATE_OTHER_CHARACTER::clear_teamid() {
  _impl_.teamid_ = 0u;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::_internal_teamid() const {
  return _impl_.teamid_;
}
inline uint32_t SC_CREATE_OTHER_CHARACTER::teamid() const {
  // @@protoc_insertion_point(field_get:game.SC_CREATE_OTHER_CHARACTER.teamID)
  return _internal_teamid();
}
inline void SC_CREATE_OTHER_CHARACTER::_internal_set_teamid(uint32_t value) {
  
  _impl_.teamid_ = value;
}
inline void SC_CREATE_OTHER_CHARACTER::set_teamid(uint32_t value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:game.SC_CREATE_OTHER_CHARACTER.teamID)
}

// -------------------------------------------------------------------

// SC_GRENADE_EXPLOSITION_POS

// uint32 posX = 1;
inline void SC_GRENADE_EXPLOSITION_POS::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t SC_GRENADE_EXPLOSITION_POS::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t SC_GRENADE_EXPLOSITION_POS::posx() const {
  // @@protoc_insertion_point(field_get:game.SC_GRENADE_EXPLOSITION_POS.posX)
  return _internal_posx();
}
inline void SC_GRENADE_EXPLOSITION_POS::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void SC_GRENADE_EXPLOSITION_POS::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.SC_GRENADE_EXPLOSITION_POS.posX)
}

// uint32 posY = 2;
inline void SC_GRENADE_EXPLOSITION_POS::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t SC_GRENADE_EXPLOSITION_POS::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t SC_GRENADE_EXPLOSITION_POS::posy() const {
  // @@protoc_insertion_point(field_get:game.SC_GRENADE_EXPLOSITION_POS.posY)
  return _internal_posy();
}
inline void SC_GRENADE_EXPLOSITION_POS::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void SC_GRENADE_EXPLOSITION_POS::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.SC_GRENADE_EXPLOSITION_POS.posY)
}

// uint32 posZ = 3;
inline void SC_GRENADE_EXPLOSITION_POS::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t SC_GRENADE_EXPLOSITION_POS::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t SC_GRENADE_EXPLOSITION_POS::posz() const {
  // @@protoc_insertion_point(field_get:game.SC_GRENADE_EXPLOSITION_POS.posZ)
  return _internal_posz();
}
inline void SC_GRENADE_EXPLOSITION_POS::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void SC_GRENADE_EXPLOSITION_POS::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.SC_GRENADE_EXPLOSITION_POS.posZ)
}

// -------------------------------------------------------------------

// SC_ITEM_PICK_FAIL

// uint32 playerId = 1;
inline void SC_ITEM_PICK_FAIL::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_ITEM_PICK_FAIL::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_ITEM_PICK_FAIL::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_PICK_FAIL.playerId)
  return _internal_playerid();
}
inline void SC_ITEM_PICK_FAIL::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_ITEM_PICK_FAIL::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_PICK_FAIL.playerId)
}

// uint32 itemId = 2;
inline void SC_ITEM_PICK_FAIL::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t SC_ITEM_PICK_FAIL::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t SC_ITEM_PICK_FAIL::itemid() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_PICK_FAIL.itemId)
  return _internal_itemid();
}
inline void SC_ITEM_PICK_FAIL::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void SC_ITEM_PICK_FAIL::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_PICK_FAIL.itemId)
}

// -------------------------------------------------------------------

// SC_ITEM_PICK_SUCCESS

// uint32 playerId = 1;
inline void SC_ITEM_PICK_SUCCESS::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_ITEM_PICK_SUCCESS::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_ITEM_PICK_SUCCESS::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_PICK_SUCCESS.playerId)
  return _internal_playerid();
}
inline void SC_ITEM_PICK_SUCCESS::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_ITEM_PICK_SUCCESS::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_PICK_SUCCESS.playerId)
}

// uint32 itemId = 2;
inline void SC_ITEM_PICK_SUCCESS::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t SC_ITEM_PICK_SUCCESS::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t SC_ITEM_PICK_SUCCESS::itemid() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_PICK_SUCCESS.itemId)
  return _internal_itemid();
}
inline void SC_ITEM_PICK_SUCCESS::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void SC_ITEM_PICK_SUCCESS::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_PICK_SUCCESS.itemId)
}

// -------------------------------------------------------------------

// SC_ITEM_SPAWNED

// uint32 itemId = 1;
inline void SC_ITEM_SPAWNED::clear_itemid() {
  _impl_.itemid_ = 0u;
}
inline uint32_t SC_ITEM_SPAWNED::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t SC_ITEM_SPAWNED::itemid() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_SPAWNED.itemId)
  return _internal_itemid();
}
inline void SC_ITEM_SPAWNED::_internal_set_itemid(uint32_t value) {
  
  _impl_.itemid_ = value;
}
inline void SC_ITEM_SPAWNED::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_SPAWNED.itemId)
}

// uint32 itemType = 2;
inline void SC_ITEM_SPAWNED::clear_itemtype() {
  _impl_.itemtype_ = 0u;
}
inline uint32_t SC_ITEM_SPAWNED::_internal_itemtype() const {
  return _impl_.itemtype_;
}
inline uint32_t SC_ITEM_SPAWNED::itemtype() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_SPAWNED.itemType)
  return _internal_itemtype();
}
inline void SC_ITEM_SPAWNED::_internal_set_itemtype(uint32_t value) {
  
  _impl_.itemtype_ = value;
}
inline void SC_ITEM_SPAWNED::set_itemtype(uint32_t value) {
  _internal_set_itemtype(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_SPAWNED.itemType)
}

// uint32 itemPosIndex = 3;
inline void SC_ITEM_SPAWNED::clear_itemposindex() {
  _impl_.itemposindex_ = 0u;
}
inline uint32_t SC_ITEM_SPAWNED::_internal_itemposindex() const {
  return _impl_.itemposindex_;
}
inline uint32_t SC_ITEM_SPAWNED::itemposindex() const {
  // @@protoc_insertion_point(field_get:game.SC_ITEM_SPAWNED.itemPosIndex)
  return _internal_itemposindex();
}
inline void SC_ITEM_SPAWNED::_internal_set_itemposindex(uint32_t value) {
  
  _impl_.itemposindex_ = value;
}
inline void SC_ITEM_SPAWNED::set_itemposindex(uint32_t value) {
  _internal_set_itemposindex(value);
  // @@protoc_insertion_point(field_set:game.SC_ITEM_SPAWNED.itemPosIndex)
}

// -------------------------------------------------------------------

// SC_KEY_INPUT

// uint32 playerId = 1;
inline void SC_KEY_INPUT::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_KEY_INPUT::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.playerId)
  return _internal_playerid();
}
inline void SC_KEY_INPUT::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_KEY_INPUT::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.playerId)
}

// uint32 keyW = 2;
inline void SC_KEY_INPUT::clear_keyw() {
  _impl_.keyw_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_keyw() const {
  return _impl_.keyw_;
}
inline uint32_t SC_KEY_INPUT::keyw() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.keyW)
  return _internal_keyw();
}
inline void SC_KEY_INPUT::_internal_set_keyw(uint32_t value) {
  
  _impl_.keyw_ = value;
}
inline void SC_KEY_INPUT::set_keyw(uint32_t value) {
  _internal_set_keyw(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.keyW)
}

// uint32 keyA = 3;
inline void SC_KEY_INPUT::clear_keya() {
  _impl_.keya_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_keya() const {
  return _impl_.keya_;
}
inline uint32_t SC_KEY_INPUT::keya() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.keyA)
  return _internal_keya();
}
inline void SC_KEY_INPUT::_internal_set_keya(uint32_t value) {
  
  _impl_.keya_ = value;
}
inline void SC_KEY_INPUT::set_keya(uint32_t value) {
  _internal_set_keya(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.keyA)
}

// uint32 keyS = 4;
inline void SC_KEY_INPUT::clear_keys() {
  _impl_.keys_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_keys() const {
  return _impl_.keys_;
}
inline uint32_t SC_KEY_INPUT::keys() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.keyS)
  return _internal_keys();
}
inline void SC_KEY_INPUT::_internal_set_keys(uint32_t value) {
  
  _impl_.keys_ = value;
}
inline void SC_KEY_INPUT::set_keys(uint32_t value) {
  _internal_set_keys(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.keyS)
}

// uint32 keyD = 5;
inline void SC_KEY_INPUT::clear_keyd() {
  _impl_.keyd_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_keyd() const {
  return _impl_.keyd_;
}
inline uint32_t SC_KEY_INPUT::keyd() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.keyD)
  return _internal_keyd();
}
inline void SC_KEY_INPUT::_internal_set_keyd(uint32_t value) {
  
  _impl_.keyd_ = value;
}
inline void SC_KEY_INPUT::set_keyd(uint32_t value) {
  _internal_set_keyd(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.keyD)
}

// fixed32 rotateAxisX = 6;
inline void SC_KEY_INPUT::clear_rotateaxisx() {
  _impl_.rotateaxisx_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_rotateaxisx() const {
  return _impl_.rotateaxisx_;
}
inline uint32_t SC_KEY_INPUT::rotateaxisx() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.rotateAxisX)
  return _internal_rotateaxisx();
}
inline void SC_KEY_INPUT::_internal_set_rotateaxisx(uint32_t value) {
  
  _impl_.rotateaxisx_ = value;
}
inline void SC_KEY_INPUT::set_rotateaxisx(uint32_t value) {
  _internal_set_rotateaxisx(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.rotateAxisX)
}

// fixed32 rotateAxisY = 7;
inline void SC_KEY_INPUT::clear_rotateaxisy() {
  _impl_.rotateaxisy_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_rotateaxisy() const {
  return _impl_.rotateaxisy_;
}
inline uint32_t SC_KEY_INPUT::rotateaxisy() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.rotateAxisY)
  return _internal_rotateaxisy();
}
inline void SC_KEY_INPUT::_internal_set_rotateaxisy(uint32_t value) {
  
  _impl_.rotateaxisy_ = value;
}
inline void SC_KEY_INPUT::set_rotateaxisy(uint32_t value) {
  _internal_set_rotateaxisy(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.rotateAxisY)
}

// uint32 Jump = 8;
inline void SC_KEY_INPUT::clear_jump() {
  _impl_.jump_ = 0u;
}
inline uint32_t SC_KEY_INPUT::_internal_jump() const {
  return _impl_.jump_;
}
inline uint32_t SC_KEY_INPUT::jump() const {
  // @@protoc_insertion_point(field_get:game.SC_KEY_INPUT.Jump)
  return _internal_jump();
}
inline void SC_KEY_INPUT::_internal_set_jump(uint32_t value) {
  
  _impl_.jump_ = value;
}
inline void SC_KEY_INPUT::set_jump(uint32_t value) {
  _internal_set_jump(value);
  // @@protoc_insertion_point(field_set:game.SC_KEY_INPUT.Jump)
}

// -------------------------------------------------------------------

// SC_ON_ACCEPT

// uint32 playerId = 1;
inline void SC_ON_ACCEPT::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_ON_ACCEPT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_ON_ACCEPT::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_ON_ACCEPT.playerId)
  return _internal_playerid();
}
inline void SC_ON_ACCEPT::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_ON_ACCEPT::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_ON_ACCEPT.playerId)
}

// -------------------------------------------------------------------

// SC_POS_INTERPOLATION

// uint32 posX = 1;
inline void SC_POS_INTERPOLATION::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t SC_POS_INTERPOLATION::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t SC_POS_INTERPOLATION::posx() const {
  // @@protoc_insertion_point(field_get:game.SC_POS_INTERPOLATION.posX)
  return _internal_posx();
}
inline void SC_POS_INTERPOLATION::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void SC_POS_INTERPOLATION::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.SC_POS_INTERPOLATION.posX)
}

// uint32 posY = 2;
inline void SC_POS_INTERPOLATION::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t SC_POS_INTERPOLATION::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t SC_POS_INTERPOLATION::posy() const {
  // @@protoc_insertion_point(field_get:game.SC_POS_INTERPOLATION.posY)
  return _internal_posy();
}
inline void SC_POS_INTERPOLATION::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void SC_POS_INTERPOLATION::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.SC_POS_INTERPOLATION.posY)
}

// uint32 posZ = 3;
inline void SC_POS_INTERPOLATION::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t SC_POS_INTERPOLATION::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t SC_POS_INTERPOLATION::posz() const {
  // @@protoc_insertion_point(field_get:game.SC_POS_INTERPOLATION.posZ)
  return _internal_posz();
}
inline void SC_POS_INTERPOLATION::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void SC_POS_INTERPOLATION::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.SC_POS_INTERPOLATION.posZ)
}

// -------------------------------------------------------------------

// SC_SHOT_HIT

// uint32 playerId = 1;
inline void SC_SHOT_HIT::clear_playerid() {
  _impl_.playerid_ = 0u;
}
inline uint32_t SC_SHOT_HIT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint32_t SC_SHOT_HIT::playerid() const {
  // @@protoc_insertion_point(field_get:game.SC_SHOT_HIT.playerId)
  return _internal_playerid();
}
inline void SC_SHOT_HIT::_internal_set_playerid(uint32_t value) {
  
  _impl_.playerid_ = value;
}
inline void SC_SHOT_HIT::set_playerid(uint32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:game.SC_SHOT_HIT.playerId)
}

// uint32 hp = 2;
inline void SC_SHOT_HIT::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t SC_SHOT_HIT::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t SC_SHOT_HIT::hp() const {
  // @@protoc_insertion_point(field_get:game.SC_SHOT_HIT.hp)
  return _internal_hp();
}
inline void SC_SHOT_HIT::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void SC_SHOT_HIT::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:game.SC_SHOT_HIT.hp)
}

// -------------------------------------------------------------------

// SC_THROW_GRENADE

// uint32 posX = 1;
inline void SC_THROW_GRENADE::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t SC_THROW_GRENADE::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t SC_THROW_GRENADE::posx() const {
  // @@protoc_insertion_point(field_get:game.SC_THROW_GRENADE.posX)
  return _internal_posx();
}
inline void SC_THROW_GRENADE::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void SC_THROW_GRENADE::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:game.SC_THROW_GRENADE.posX)
}

// uint32 posY = 2;
inline void SC_THROW_GRENADE::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t SC_THROW_GRENADE::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t SC_THROW_GRENADE::posy() const {
  // @@protoc_insertion_point(field_get:game.SC_THROW_GRENADE.posY)
  return _internal_posy();
}
inline void SC_THROW_GRENADE::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void SC_THROW_GRENADE::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:game.SC_THROW_GRENADE.posY)
}

// uint32 posZ = 3;
inline void SC_THROW_GRENADE::clear_posz() {
  _impl_.posz_ = 0u;
}
inline uint32_t SC_THROW_GRENADE::_internal_posz() const {
  return _impl_.posz_;
}
inline uint32_t SC_THROW_GRENADE::posz() const {
  // @@protoc_insertion_point(field_get:game.SC_THROW_GRENADE.posZ)
  return _internal_posz();
}
inline void SC_THROW_GRENADE::_internal_set_posz(uint32_t value) {
  
  _impl_.posz_ = value;
}
inline void SC_THROW_GRENADE::set_posz(uint32_t value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:game.SC_THROW_GRENADE.posZ)
}

// fixed32 dirX = 4;
inline void SC_THROW_GRENADE::clear_dirx() {
  _impl_.dirx_ = 0u;
}
inline uint32_t SC_THROW_GRENADE::_internal_dirx() const {
  return _impl_.dirx_;
}
inline uint32_t SC_THROW_GRENADE::dirx() const {
  // @@protoc_insertion_point(field_get:game.SC_THROW_GRENADE.dirX)
  return _internal_dirx();
}
inline void SC_THROW_GRENADE::_internal_set_dirx(uint32_t value) {
  
  _impl_.dirx_ = value;
}
inline void SC_THROW_GRENADE::set_dirx(uint32_t value) {
  _internal_set_dirx(value);
  // @@protoc_insertion_point(field_set:game.SC_THROW_GRENADE.dirX)
}

// fixed32 dirY = 5;
inline void SC_THROW_GRENADE::clear_diry() {
  _impl_.diry_ = 0u;
}
inline uint32_t SC_THROW_GRENADE::_internal_diry() const {
  return _impl_.diry_;
}
inline uint32_t SC_THROW_GRENADE::diry() const {
  // @@protoc_insertion_point(field_get:game.SC_THROW_GRENADE.dirY)
  return _internal_diry();
}
inline void SC_THROW_GRENADE::_internal_set_diry(uint32_t value) {
  
  _impl_.diry_ = value;
}
inline void SC_THROW_GRENADE::set_diry(uint32_t value) {
  _internal_set_diry(value);
  // @@protoc_insertion_point(field_set:game.SC_THROW_GRENADE.dirY)
}

// fixed32 dirZ = 6;
inline void SC_THROW_GRENADE::clear_dirz() {
  _impl_.dirz_ = 0u;
}
inline uint32_t SC_THROW_GRENADE::_internal_dirz() const {
  return _impl_.dirz_;
}
inline uint32_t SC_THROW_GRENADE::dirz() const {
  // @@protoc_insertion_point(field_get:game.SC_THROW_GRENADE.dirZ)
  return _internal_dirz();
}
inline void SC_THROW_GRENADE::_internal_set_dirz(uint32_t value) {
  
  _impl_.dirz_ = value;
}
inline void SC_THROW_GRENADE::set_dirz(uint32_t value) {
  _internal_set_dirz(value);
  // @@protoc_insertion_point(field_set:game.SC_THROW_GRENADE.dirZ)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::PacketID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::PacketID>() {
  return ::game::PacketID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
